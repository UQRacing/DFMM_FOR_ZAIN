
DFMM_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800554c  0800554c  0000654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800560c  0800560c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800560c  0800560c  0000660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005614  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          000004b8  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012847  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d53  00000000  00000000  0001988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0001c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c68  00000000  00000000  0001d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225cd  00000000  00000000  0001e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c5c  00000000  00000000  00040815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d6f  00000000  00000000  00055471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001281e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004228  00000000  00000000  00128224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012c44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005534 	.word	0x08005534

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005534 	.word	0x08005534

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <setLED>:
uint16_t ASSI_Timecheck = 0;

int toggle = 0;

void setLED (int led, int RED, int GREEN, int BLUE)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	603b      	str	r3, [r7, #0]
    LED_Data[led][0] = led;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	b2d9      	uxtb	r1, r3
 80004da:	4a11      	ldr	r2, [pc, #68]	@ (8000520 <setLED+0x58>)
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[led][1] = GREEN;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <setLED+0x58>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	460a      	mov	r2, r1
 80004f0:	705a      	strb	r2, [r3, #1]
    LED_Data[led][2] = RED;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <setLED+0x58>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	460a      	mov	r2, r1
 8000500:	709a      	strb	r2, [r3, #2]
    LED_Data[led][3] = BLUE;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	b2d9      	uxtb	r1, r3
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <setLED+0x58>)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	70da      	strb	r2, [r3, #3]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000030 	.word	0x20000030

08000524 <ws2812_synchronous>:

void ws2812_synchronous (int GREEN, int RED, int BLUE)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	@ 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
	//Here I'm bit shifting the values from SetLED as the LED strip reads GRB values not RGB values
    uint32_t color = (GREEN << 8) | (RED<<4) | BLUE;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	021a      	lsls	r2, r3, #8
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	61fb      	str	r3, [r7, #28]
    //Twice as many LED's lit up (i.e. if NUM_LED was 5, then sending 24 bytes for each LED (72 bits)
    //Would light up 10 LED's instead of 5 and these would be the wrong colour
    //Hence, I changed the sendData buffer to be a 12 byte array and this made the right number of LED's light up
    //But the colours being delivered are slightly off and the first LED turns green, (I'm not sure how to resolve this)
    uint8_t sendData[12];
    int indx = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 12; i >=0; i--)
 8000544:	230c      	movs	r3, #12
 8000546:	623b      	str	r3, [r7, #32]
 8000548:	e01b      	b.n	8000582 <ws2812_synchronous+0x5e>
    {
    	//The if statement below shifts the bit present to the least significant bit and checks if this is a 1 or 0
        if (((color >> i) & 0x01) == 1)
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	fa22 f303 	lsr.w	r3, r2, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	d008      	beq.n	800056c <ws2812_synchronous+0x48>
            sendData[indx++] = 0b110;  // store 1
 800055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000560:	3328      	adds	r3, #40	@ 0x28
 8000562:	443b      	add	r3, r7
 8000564:	2206      	movs	r2, #6
 8000566:	f803 2c18 	strb.w	r2, [r3, #-24]
 800056a:	e007      	b.n	800057c <ws2812_synchronous+0x58>
        else
            sendData[indx++] = 0b100;  // store 0
 800056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	627a      	str	r2, [r7, #36]	@ 0x24
 8000572:	3328      	adds	r3, #40	@ 0x28
 8000574:	443b      	add	r3, r7
 8000576:	2204      	movs	r2, #4
 8000578:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 12; i >=0; i--)
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	3b01      	subs	r3, #1
 8000580:	623b      	str	r3, [r7, #32]
 8000582:	6a3b      	ldr	r3, [r7, #32]
 8000584:	2b00      	cmp	r3, #0
 8000586:	dae0      	bge.n	800054a <ws2812_synchronous+0x26>
    }

    //Calling the DMA transmit function so that data can be sent
    //I'm using DMA as it results in the fastest data transfer and less lag
    HAL_UART_Transmit(&huart1, sendData, 12, HAL_MAX_DELAY);
 8000588:	f107 0110 	add.w	r1, r7, #16
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	220c      	movs	r2, #12
 8000592:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <ws2812_synchronous+0x8c>)
 8000594:	f004 fbc8 	bl	8004d28 <HAL_UART_Transmit>
    //The line below only allows data to be transmitted again after the data beforehand has been transmitted
    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY); // Wait for DMA transfer to complete
 8000598:	bf00      	nop
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <ws2812_synchronous+0x8c>)
 800059c:	f004 fc4f 	bl	8004e3e <HAL_UART_GetState>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b20      	cmp	r3, #32
 80005a4:	d1f9      	bne.n	800059a <ws2812_synchronous+0x76>
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	@ 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000420 	.word	0x20000420

080005b4 <WS2812_Send>:

void WS2812_Send (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LED; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e016      	b.n	80005ee <WS2812_Send+0x3a>
    {
        ws2812_synchronous(LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 80005c0:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <WS2812_Send+0x50>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4618      	mov	r0, r3
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <WS2812_Send+0x50>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <WS2812_Send+0x50>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	461a      	mov	r2, r3
 80005e4:	f7ff ff9e 	bl	8000524 <ws2812_synchronous>
    for (int i = 0; i < NUM_LED; i++)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b76      	cmp	r3, #118	@ 0x76
 80005f2:	dde5      	ble.n	80005c0 <WS2812_Send+0xc>
    }
    HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f001 fcd7 	bl	8001fa8 <HAL_Delay>
 // Wait for all data to be latched
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000030 	.word	0x20000030

08000608 <ASSI_Off>:
//The functions above are essential to driving the LED's.
//The functions below are specifically for the ASSI status


void ASSI_Off(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

		for (int i=0; i< NUM_LED; i++)
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e008      	b.n	8000626 <ASSI_Off+0x1e>
		{
			setLED(i, 0,0,0);
 8000614:	2300      	movs	r3, #0
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff54 	bl	80004c8 <setLED>
		for (int i=0; i< NUM_LED; i++)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b76      	cmp	r3, #118	@ 0x76
 800062a:	ddf3      	ble.n	8000614 <ASSI_Off+0xc>
		}
		WS2812_Send();
 800062c:	f7ff ffc2 	bl	80005b4 <WS2812_Send>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ASSI_Ready>:

void ASSI_Ready(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	//This keeps the LED strip a continous yello
		//for (int x = 0; x<250; x+=1) {
			for (int i=0; i<NUM_LED; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e008      	b.n	8000656 <ASSI_Ready+0x1e>
			{
				//This sets the LED's to yellow, weirdly one would expect this to turn the strip green
				//But this turns the lights yellow, some tuning may be required for different strips
				setLED(i,230,1,0);
 8000644:	2300      	movs	r3, #0
 8000646:	2201      	movs	r2, #1
 8000648:	21e6      	movs	r1, #230	@ 0xe6
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ff3c 	bl	80004c8 <setLED>
			for (int i=0; i<NUM_LED; i++)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b76      	cmp	r3, #118	@ 0x76
 800065a:	ddf3      	ble.n	8000644 <ASSI_Ready+0xc>
			}
			WS2812_Send();
 800065c:	f7ff ffaa 	bl	80005b4 <WS2812_Send>
		//}
	}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ASSI_Driving>:

void ASSI_Driving(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	//This is yellow flashing lights
	//Setting the LED's yellow initially
	if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 200 && toggle == 0) {
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <ASSI_Driving+0xa8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <ASSI_Driving+0xac>)
 8000676:	8812      	ldrh	r2, [r2, #0]
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	2bc8      	cmp	r3, #200	@ 0xc8
 800067c:	d91e      	bls.n	80006bc <ASSI_Driving+0x54>
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <ASSI_Driving+0xb0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d11a      	bne.n	80006bc <ASSI_Driving+0x54>
		for (int i =0; i<NUM_LED; i++)
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	e008      	b.n	800069e <ASSI_Driving+0x36>
		{
			setLED(i, 230, 1, 0);
 800068c:	2300      	movs	r3, #0
 800068e:	2201      	movs	r2, #1
 8000690:	21e6      	movs	r1, #230	@ 0xe6
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff18 	bl	80004c8 <setLED>
		for (int i =0; i<NUM_LED; i++)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b76      	cmp	r3, #118	@ 0x76
 80006a2:	ddf3      	ble.n	800068c <ASSI_Driving+0x24>
		}
		//Sending this data to the strip
		WS2812_Send();
 80006a4:	f7ff ff86 	bl	80005b4 <WS2812_Send>
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <ASSI_Driving+0xa8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <ASSI_Driving+0xac>)
 80006b2:	801a      	strh	r2, [r3, #0]
		toggle = 1;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <ASSI_Driving+0xb0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
		}
		WS2812_Send();
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
		toggle = 0;
	}
}
 80006ba:	e025      	b.n	8000708 <ASSI_Driving+0xa0>
	else if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 200 && toggle == 1) {
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <ASSI_Driving+0xa8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <ASSI_Driving+0xac>)
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80006ca:	d91d      	bls.n	8000708 <ASSI_Driving+0xa0>
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <ASSI_Driving+0xb0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d119      	bne.n	8000708 <ASSI_Driving+0xa0>
		for (int i=0; i<NUM_LED; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	e008      	b.n	80006ec <ASSI_Driving+0x84>
			setLED(i, 0,0,0);
 80006da:	2300      	movs	r3, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f7ff fef1 	bl	80004c8 <setLED>
		for (int i=0; i<NUM_LED; i++)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b76      	cmp	r3, #118	@ 0x76
 80006f0:	ddf3      	ble.n	80006da <ASSI_Driving+0x72>
		WS2812_Send();
 80006f2:	f7ff ff5f 	bl	80005b4 <WS2812_Send>
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <ASSI_Driving+0xa8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <ASSI_Driving+0xac>)
 8000700:	801a      	strh	r2, [r3, #0]
		toggle = 0;
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <ASSI_Driving+0xb0>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000390 	.word	0x20000390
 8000714:	2000020c 	.word	0x2000020c
 8000718:	20000210 	.word	0x20000210

0800071c <ASSI_Emergency>:

void ASSI_Emergency(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
		//This is blue flashing lights
		//This is the colour data for a dark blue, light blue can be achieved by setLED(i,0,50,255);
		if (__HAL_TIM_GET_COUNTER(&htim7) - ASSI_Timecheck > 200 && toggle == 0) {
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <ASSI_Emergency+0xa8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <ASSI_Emergency+0xac>)
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000730:	d91e      	bls.n	8000770 <ASSI_Emergency+0x54>
 8000732:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <ASSI_Emergency+0xb0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d11a      	bne.n	8000770 <ASSI_Emergency+0x54>
			//Setting the LED's blue initially
			for (int i =0; i<NUM_LED; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e008      	b.n	8000752 <ASSI_Emergency+0x36>
			{
				setLED(i, 0, 200, 255);
 8000740:	23ff      	movs	r3, #255	@ 0xff
 8000742:	22c8      	movs	r2, #200	@ 0xc8
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff febe 	bl	80004c8 <setLED>
			for (int i =0; i<NUM_LED; i++)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b76      	cmp	r3, #118	@ 0x76
 8000756:	ddf3      	ble.n	8000740 <ASSI_Emergency+0x24>
				//The timings are slightly off hence why the G value is 100
			}
			//Sending this data to the strip
			WS2812_Send();
 8000758:	f7ff ff2c 	bl	80005b4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <ASSI_Emergency+0xb4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <ASSI_Emergency+0xac>)
 8000766:	801a      	strh	r2, [r3, #0]
			toggle = 1;
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <ASSI_Emergency+0xb0>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
			}
			WS2812_Send();
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
			toggle = 0;
		}
}
 800076e:	e025      	b.n	80007bc <ASSI_Emergency+0xa0>
		else if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 80 && toggle == 1) {
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <ASSI_Emergency+0xb4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <ASSI_Emergency+0xac>)
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	2b50      	cmp	r3, #80	@ 0x50
 800077e:	d91d      	bls.n	80007bc <ASSI_Emergency+0xa0>
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <ASSI_Emergency+0xb0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d119      	bne.n	80007bc <ASSI_Emergency+0xa0>
			for (int i=0; i<NUM_LED; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	e008      	b.n	80007a0 <ASSI_Emergency+0x84>
				setLED(i, 0,0,0);
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f7ff fe97 	bl	80004c8 <setLED>
			for (int i=0; i<NUM_LED; i++)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b76      	cmp	r3, #118	@ 0x76
 80007a4:	ddf3      	ble.n	800078e <ASSI_Emergency+0x72>
			WS2812_Send();
 80007a6:	f7ff ff05 	bl	80005b4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <ASSI_Emergency+0xb4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <ASSI_Emergency+0xac>)
 80007b4:	801a      	strh	r2, [r3, #0]
			toggle = 0;
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <ASSI_Emergency+0xb0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200003d8 	.word	0x200003d8
 80007c8:	2000020c 	.word	0x2000020c
 80007cc:	20000210 	.word	0x20000210
 80007d0:	20000390 	.word	0x20000390

080007d4 <ASSI_Finished>:

void ASSI_Finished(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_COUNTER(&htim7) - ASSI_Timecheck > 1) {
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <ASSI_Finished+0x40>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <ASSI_Finished+0x44>)
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d910      	bls.n	800080c <ASSI_Finished+0x38>

		for (int i=0; i<NUM_LED; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e008      	b.n	8000802 <ASSI_Finished+0x2e>
		{
			//This sets the LED's to a blue colour
			setLED(i,0,200,255);
 80007f0:	23ff      	movs	r3, #255	@ 0xff
 80007f2:	22c8      	movs	r2, #200	@ 0xc8
 80007f4:	2100      	movs	r1, #0
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fe66 	bl	80004c8 <setLED>
		for (int i=0; i<NUM_LED; i++)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b76      	cmp	r3, #118	@ 0x76
 8000806:	ddf3      	ble.n	80007f0 <ASSI_Finished+0x1c>
		}
		WS2812_Send();
 8000808:	f7ff fed4 	bl	80005b4 <WS2812_Send>
	}
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200003d8 	.word	0x200003d8
 8000818:	2000020c 	.word	0x2000020c

0800081c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000830:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <MX_ADC1_Init+0x9c>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000836:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800083a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_ADC1_Init+0xa0>)
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_ADC1_Init+0x98>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800087e:	f001 fbb7 	bl	8001ff0 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000888:	f001 f8ee 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800088c:	2301      	movs	r3, #1
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC1_Init+0x98>)
 800089e:	f001 fbeb 	bl	8002078 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f001 f8de 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000214 	.word	0x20000214
 80008b8:	40012000 	.word	0x40012000
 80008bc:	0f000001 	.word	0x0f000001

080008c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <MX_ADC2_Init+0x9c>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_ADC2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_ADC2_Init+0x98>)
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <MX_ADC2_Init+0xa0>)
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_ADC2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_ADC2_Init+0x98>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_ADC2_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_ADC2_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000920:	480d      	ldr	r0, [pc, #52]	@ (8000958 <MX_ADC2_Init+0x98>)
 8000922:	f001 fb65 	bl	8001ff0 <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800092c:	f001 f89c 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000930:	2302      	movs	r3, #2
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_ADC2_Init+0x98>)
 8000942:	f001 fb99 	bl	8002078 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800094c:	f001 f88c 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000025c 	.word	0x2000025c
 800095c:	40012100 	.word	0x40012100
 8000960:	0f000001 	.word	0x0f000001

08000964 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2e      	ldr	r2, [pc, #184]	@ (8000a3c <HAL_ADC_MspInit+0xd8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d128      	bne.n	80009d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a25      	ldr	r2, [pc, #148]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANL1_Pin;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <HAL_ADC_MspInit+0xe0>)
 80009d2:	f003 f805 	bl	80039e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009d6:	e02c      	b.n	8000a32 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a48 <HAL_ADC_MspInit+0xe4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d127      	bne.n	8000a32 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <HAL_ADC_MspInit+0xdc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANL2_Pin;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <HAL_ADC_MspInit+0xe0>)
 8000a2e:	f002 ffd7 	bl	80039e0 <HAL_GPIO_Init>
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	@ 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40012100 	.word	0x40012100

08000a4c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a52:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <MX_CAN1_Init+0x8c>)
 8000a54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a6a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a76:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000a9e:	f001 fd09 	bl	80024b4 <HAL_CAN_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 ffde 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000aac:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <MX_CAN1_Init+0x88>)
 8000aae:	f001 fedd 	bl	800286c <HAL_CAN_Start>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_CAN1_Init+0x70>
    {
      Error_Handler();
 8000ab8:	f000 ffd6 	bl	8001a68 <Error_Handler>
    }
  TxHeader.IDE = CAN_ID_STD;
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <MX_CAN1_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = DFMM_ID;
 8000ac2:	f240 4276 	movw	r2, #1142	@ 0x476
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <MX_CAN1_Init+0x90>)
 8000ac8:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <MX_CAN1_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000314 	.word	0x20000314
 8000ad8:	40006400 	.word	0x40006400
 8000adc:	200002a4 	.word	0x200002a4

08000ae0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <MX_CAN2_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000afe:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000b02:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b0a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b30:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b32:	f001 fcbf 	bl	80024b4 <HAL_CAN_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b3c:	f000 ff94 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b42:	f001 fe93 	bl	800286c <HAL_CAN_Start>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_CAN2_Init+0x70>
	{
	  Error_Handler();
 8000b4c:	f000 ff8c 	bl	8001a68 <Error_Handler>
	}
  CAN_Set_Filter(17, &canfilter); // ALL messages sent to the DFMM must have channel id starting with 5
 8000b50:	4909      	ldr	r1, [pc, #36]	@ (8000b78 <MX_CAN2_Init+0x98>)
 8000b52:	2011      	movs	r0, #17
 8000b54:	f000 f906 	bl	8000d64 <CAN_Set_Filter>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) // Activates interrupt for received messages.
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_CAN2_Init+0x90>)
 8000b5c:	f002 f8bc 	bl	8002cd8 <HAL_CAN_ActivateNotification>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_CAN2_Init+0x8a>
    {
  	  Error_Handler();
 8000b66:	f000 ff7f 	bl	8001a68 <Error_Handler>
    }
  /* USER CODE END CAN2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000033c 	.word	0x2000033c
 8000b74:	40006800 	.word	0x40006800
 8000b78:	200002ec 	.word	0x200002ec

08000b7c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a4a      	ldr	r2, [pc, #296]	@ (8000cc4 <HAL_CAN_MspInit+0x148>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d13e      	bne.n	8000c1c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a48      	ldr	r2, [pc, #288]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ba8:	4b47      	ldr	r3, [pc, #284]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10d      	bne.n	8000bcc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	4b45      	ldr	r3, [pc, #276]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a44      	ldr	r2, [pc, #272]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b42      	ldr	r3, [pc, #264]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000be8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4832      	ldr	r0, [pc, #200]	@ (8000cd0 <HAL_CAN_MspInit+0x154>)
 8000c06:	f002 feeb 	bl	80039e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2014      	movs	r0, #20
 8000c10:	f002 fbb7 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c14:	2014      	movs	r0, #20
 8000c16:	f002 fbd0 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000c1a:	e04f      	b.n	8000cbc <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2c      	ldr	r2, [pc, #176]	@ (8000cd4 <HAL_CAN_MspInit+0x158>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d14a      	bne.n	8000cbc <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a27      	ldr	r2, [pc, #156]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000c4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <HAL_CAN_MspInit+0x14c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10d      	bne.n	8000c70 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_CAN_MspInit+0x150>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c8c:	2360      	movs	r3, #96	@ 0x60
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <HAL_CAN_MspInit+0x15c>)
 8000ca8:	f002 fe9a 	bl	80039e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2041      	movs	r0, #65	@ 0x41
 8000cb2:	f002 fb66 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000cb6:	2041      	movs	r0, #65	@ 0x41
 8000cb8:	f002 fb7f 	bl	80033ba <HAL_NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	@ 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	20000364 	.word	0x20000364
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40006800 	.word	0x40006800
 8000cd8:	40020400 	.word	0x40020400

08000cdc <CAN_Send_Message_String>:
	   Error_Handler();
	}
}

void CAN_Send_Message_String(char Transmission_Data[8])
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	memset(TxData, 0, sizeof(TxData));
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4819      	ldr	r0, [pc, #100]	@ (8000d50 <CAN_Send_Message_String+0x74>)
 8000cea:	f004 fbf7 	bl	80054dc <memset>
	length = strlen(Transmission_Data);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fa6a 	bl	80001c8 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <CAN_Send_Message_String+0x78>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <CAN_Send_Message_String+0x78>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <CAN_Send_Message_String+0x7c>)
 8000d06:	611a      	str	r2, [r3, #16]
	int i;
	for(i=0; i<(length-1); i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e00a      	b.n	8000d24 <CAN_Send_Message_String+0x48>
		*(TxData + i) = (unsigned int)((unsigned char)*(Transmission_Data + i));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	441a      	add	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	490e      	ldr	r1, [pc, #56]	@ (8000d50 <CAN_Send_Message_String+0x74>)
 8000d18:	440b      	add	r3, r1
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <CAN_Send_Message_String+0x78>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbed      	blt.n	8000d0e <CAN_Send_Message_String+0x32>
	}

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <CAN_Send_Message_String+0x80>)
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <CAN_Send_Message_String+0x74>)
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <CAN_Send_Message_String+0x7c>)
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <CAN_Send_Message_String+0x84>)
 8000d3a:	f001 fddb 	bl	80028f4 <HAL_CAN_AddTxMessage>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <CAN_Send_Message_String+0x6c>
	{
	   Error_Handler();
 8000d44:	f000 fe90 	bl	8001a68 <Error_Handler>
	}
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200002bc 	.word	0x200002bc
 8000d54:	20000386 	.word	0x20000386
 8000d58:	200002a4 	.word	0x200002a4
 8000d5c:	200002e8 	.word	0x200002e8
 8000d60:	20000314 	.word	0x20000314

08000d64 <CAN_Set_Filter>:


void CAN_Set_Filter(uint8_t FilterBank, CAN_FilterTypeDef *canhandler) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
    canhandler->FilterActivation = CAN_FILTER_ENABLE;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	621a      	str	r2, [r3, #32]
	canhandler->FilterBank = FilterBank;  // which filter bank to use from the assigned ones
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	615a      	str	r2, [r3, #20]
	canhandler->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
	canhandler->FilterIdHigh = 0x500<<5;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000d88:	601a      	str	r2, [r3, #0]
	canhandler->FilterIdLow = 0;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
	canhandler->FilterMaskIdHigh = 0xF00<<5;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 32f0 	mov.w	r2, #122880	@ 0x1e000
 8000d96:	609a      	str	r2, [r3, #8]
	canhandler->FilterMaskIdLow = 0;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
	canhandler->FilterMode = CAN_FILTERMODE_IDMASK;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
	canhandler->FilterScale = CAN_FILTERSCALE_32BIT;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	61da      	str	r2, [r3, #28]
	canhandler->SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	220e      	movs	r2, #14
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan2, canhandler);
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <CAN_Set_Filter+0x5c>)
 8000db4:	f001 fc7a 	bl	80026ac <HAL_CAN_ConfigFilter>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000033c 	.word	0x2000033c

08000dc4 <ReceiveMessage>:

void ReceiveMessage(CAN_RxHeaderTypeDef *ReceptionHeader, uint8_t *Receive_Data) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	if (ReceptionHeader->StdId == M150_ID) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	f040 8081 	bne.w	8000ede <ReceiveMessage+0x11a>
		HeartbeatCheck[0] = __HAL_TIM_GET_COUNTER(&htim7);
 8000ddc:	4b7d      	ldr	r3, [pc, #500]	@ (8000fd4 <ReceiveMessage+0x210>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd8 <ReceiveMessage+0x214>)
 8000de6:	701a      	strb	r2, [r3, #0]
		if (0x11 == *(Receive_Data + 7)) {
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3307      	adds	r3, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b11      	cmp	r3, #17
 8000df0:	f000 80e9 	beq.w	8000fc6 <ReceiveMessage+0x202>
		}
		else if (0x01 == *(Receive_Data + 7)) {
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3307      	adds	r3, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d103      	bne.n	8000e06 <ReceiveMessage+0x42>
			EBS_Brake_Line = 1;
 8000dfe:	4b77      	ldr	r3, [pc, #476]	@ (8000fdc <ReceiveMessage+0x218>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
		}
		else if (0x02 == *(Receive_Data + 7)) {
			Steering_Actuator_Check = 0;
		}
	}
}
 8000e04:	e0df      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x02 == *(Receive_Data + 7)) {
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3307      	adds	r3, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d103      	bne.n	8000e18 <ReceiveMessage+0x54>
			EBS_Pressure_Check = 1;
 8000e10:	4b73      	ldr	r3, [pc, #460]	@ (8000fe0 <ReceiveMessage+0x21c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	e0d6      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x03 ==*(Receive_Data + 7)) {
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3307      	adds	r3, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d103      	bne.n	8000e2a <ReceiveMessage+0x66>
			Service_Brake_Check = 1;
 8000e22:	4b70      	ldr	r3, [pc, #448]	@ (8000fe4 <ReceiveMessage+0x220>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	e0cd      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x04 == *(Receive_Data + 7)) {
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d103      	bne.n	8000e3c <ReceiveMessage+0x78>
			EBS_Sound = 1;
 8000e34:	4b6c      	ldr	r3, [pc, #432]	@ (8000fe8 <ReceiveMessage+0x224>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	e0c4      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x05 == *(Receive_Data + 7)) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3307      	adds	r3, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d103      	bne.n	8000e4e <ReceiveMessage+0x8a>
			EBS_Sound = 2;
 8000e46:	4b68      	ldr	r3, [pc, #416]	@ (8000fe8 <ReceiveMessage+0x224>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	701a      	strb	r2, [r3, #0]
}
 8000e4c:	e0bb      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x06 ==*(Receive_Data + 7)) {
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3307      	adds	r3, #7
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d103      	bne.n	8000e60 <ReceiveMessage+0x9c>
			Service_Brake_Check = 2;
 8000e58:	4b62      	ldr	r3, [pc, #392]	@ (8000fe4 <ReceiveMessage+0x220>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	e0b2      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x07 == *(Receive_Data + 7)) {
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	3307      	adds	r3, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	d103      	bne.n	8000e72 <ReceiveMessage+0xae>
			EBS_Brake_Line = 0;
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fdc <ReceiveMessage+0x218>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
}
 8000e70:	e0a9      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x08 == *(Receive_Data + 7)) {
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3307      	adds	r3, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d103      	bne.n	8000e84 <ReceiveMessage+0xc0>
			EBS_Pressure_Check = 0;
 8000e7c:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <ReceiveMessage+0x21c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
}
 8000e82:	e0a0      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x09 == *(Receive_Data + 7)) {
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3307      	adds	r3, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b09      	cmp	r3, #9
 8000e8c:	d103      	bne.n	8000e96 <ReceiveMessage+0xd2>
			EBS_Sound = 0;
 8000e8e:	4b56      	ldr	r3, [pc, #344]	@ (8000fe8 <ReceiveMessage+0x224>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	e097      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x0A ==*(Receive_Data + 7)) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3307      	adds	r3, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	d103      	bne.n	8000ea8 <ReceiveMessage+0xe4>
			Service_Brake_Check = 0;
 8000ea0:	4b50      	ldr	r3, [pc, #320]	@ (8000fe4 <ReceiveMessage+0x220>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	e08e      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x0B == *(Receive_Data + 7)) {
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3307      	adds	r3, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b0b      	cmp	r3, #11
 8000eb0:	d103      	bne.n	8000eba <ReceiveMessage+0xf6>
			Mission_Finished = 1;
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <ReceiveMessage+0x228>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
}
 8000eb8:	e085      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x0E == *(Receive_Data + 7)) {
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b0e      	cmp	r3, #14
 8000ec2:	d103      	bne.n	8000ecc <ReceiveMessage+0x108>
			StrainGauge = 1;
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <ReceiveMessage+0x22c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	e07c      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x0F == *(Receive_Data + 7)) {
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d177      	bne.n	8000fc6 <ReceiveMessage+0x202>
			StrainGauge = 0;
 8000ed6:	4b46      	ldr	r3, [pc, #280]	@ (8000ff0 <ReceiveMessage+0x22c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	e073      	b.n	8000fc6 <ReceiveMessage+0x202>
	else if (ReceptionHeader->StdId == RES_ID) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d11f      	bne.n	8000f2a <ReceiveMessage+0x166>
			if (0x11 == *(Receive_Data + 7)) {}
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3307      	adds	r3, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b11      	cmp	r3, #17
 8000ef2:	d068      	beq.n	8000fc6 <ReceiveMessage+0x202>
			else if (0x0B == *(Receive_Data + 7)) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b0b      	cmp	r3, #11
 8000efc:	d103      	bne.n	8000f06 <ReceiveMessage+0x142>
				RES = 1;
 8000efe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <ReceiveMessage+0x230>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
}
 8000f04:	e05f      	b.n	8000fc6 <ReceiveMessage+0x202>
			else if (0x0C == *(Receive_Data + 7)) {
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b0c      	cmp	r3, #12
 8000f0e:	d103      	bne.n	8000f18 <ReceiveMessage+0x154>
				R2D = 1;
 8000f10:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <ReceiveMessage+0x234>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
}
 8000f16:	e056      	b.n	8000fc6 <ReceiveMessage+0x202>
			else if (0x0D == *(Receive_Data + 7)) {
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b0d      	cmp	r3, #13
 8000f20:	d151      	bne.n	8000fc6 <ReceiveMessage+0x202>
				R2D = 0;
 8000f22:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <ReceiveMessage+0x234>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
}
 8000f28:	e04d      	b.n	8000fc6 <ReceiveMessage+0x202>
	else if (ReceptionHeader->StdId == PC_ID) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d125      	bne.n	8000f82 <ReceiveMessage+0x1be>
		HeartbeatCheck[1] = __HAL_TIM_GET_COUNTER(&htim7);
 8000f36:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <ReceiveMessage+0x210>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <ReceiveMessage+0x214>)
 8000f40:	705a      	strb	r2, [r3, #1]
		if (0x11 == *(Receive_Data + 7)) {}
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3307      	adds	r3, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b11      	cmp	r3, #17
 8000f4a:	d03c      	beq.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x01 == *(Receive_Data + 7)) {
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3307      	adds	r3, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d103      	bne.n	8000f5e <ReceiveMessage+0x19a>
			EBS_Energy_Check = 1;
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <ReceiveMessage+0x238>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	e033      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x02 == *(Receive_Data + 7)) {
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3307      	adds	r3, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d103      	bne.n	8000f70 <ReceiveMessage+0x1ac>
			EBS_Energy_Check = 0;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <ReceiveMessage+0x238>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	e02a      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x03 == *(Receive_Data + 7)) {
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3307      	adds	r3, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d125      	bne.n	8000fc6 <ReceiveMessage+0x202>
			EBS_Test_Accel_Stop = 1;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <ReceiveMessage+0x23c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	e021      	b.n	8000fc6 <ReceiveMessage+0x202>
	else if (ReceptionHeader->StdId == EPOS4_ID) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d11b      	bne.n	8000fc6 <ReceiveMessage+0x202>
		HeartbeatCheck[2] = __HAL_TIM_GET_COUNTER(&htim7);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <ReceiveMessage+0x210>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <ReceiveMessage+0x214>)
 8000f98:	709a      	strb	r2, [r3, #2]
		if (0x11 == *(Receive_Data + 7)) {}
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3307      	adds	r3, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d010      	beq.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x01 == *(Receive_Data + 7)) {
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d103      	bne.n	8000fb6 <ReceiveMessage+0x1f2>
			Steering_Actuator_Check = 1;
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <ReceiveMessage+0x240>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	e007      	b.n	8000fc6 <ReceiveMessage+0x202>
		else if (0x02 == *(Receive_Data + 7)) {
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3307      	adds	r3, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d102      	bne.n	8000fc6 <ReceiveMessage+0x202>
			Steering_Actuator_Check = 0;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <ReceiveMessage+0x240>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200003d8 	.word	0x200003d8
 8000fd8:	2000038c 	.word	0x2000038c
 8000fdc:	20000388 	.word	0x20000388
 8000fe0:	20000380 	.word	0x20000380
 8000fe4:	20000381 	.word	0x20000381
 8000fe8:	20000384 	.word	0x20000384
 8000fec:	20000383 	.word	0x20000383
 8000ff0:	20000389 	.word	0x20000389
 8000ff4:	20000385 	.word	0x20000385
 8000ff8:	20000387 	.word	0x20000387
 8000ffc:	2000037f 	.word	0x2000037f
 8001000:	2000038a 	.word	0x2000038a
 8001004:	20000382 	.word	0x20000382

08001008 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001014:	2100      	movs	r1, #0
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001018:	f001 fd3c 	bl	8002a94 <HAL_CAN_GetRxMessage>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
		Error_Handler();
 8001022:	f000 fd21 	bl	8001a68 <Error_Handler>
  }
  ReceiveMessage(&RxHeader, RxData);
 8001026:	4904      	ldr	r1, [pc, #16]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800102a:	f7ff fecb 	bl	8000dc4 <ReceiveMessage>
 }
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002e0 	.word	0x200002e0
 800103c:	200002c4 	.word	0x200002c4
 8001040:	2000033c 	.word	0x2000033c

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_DMA_Init+0x3c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <MX_DMA_Init+0x3c>)
 8001054:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_DMA_Init+0x3c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2046      	movs	r0, #70	@ 0x46
 800106c:	f002 f989 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001070:	2046      	movs	r0, #70	@ 0x46
 8001072:	f002 f9a2 	bl	80033ba <HAL_NVIC_EnableIRQ>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b56      	ldr	r3, [pc, #344]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a55      	ldr	r2, [pc, #340]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b53      	ldr	r3, [pc, #332]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b4f      	ldr	r3, [pc, #316]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a4e      	ldr	r2, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b4c      	ldr	r3, [pc, #304]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a47      	ldr	r2, [pc, #284]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b45      	ldr	r3, [pc, #276]	@ (80011f8 <MX_GPIO_Init+0x174>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ASSI_BLUE_Pin|AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2112      	movs	r1, #18
 80010f2:	4842      	ldr	r0, [pc, #264]	@ (80011fc <MX_GPIO_Init+0x178>)
 80010f4:	f002 fe28 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AS_SDC_Pin|WDI_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80010fe:	4840      	ldr	r0, [pc, #256]	@ (8001200 <MX_GPIO_Init+0x17c>)
 8001100:	f002 fe22 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ASSI_BLUE_Pin|AS_CLOSE_SDC_Pin;
 8001104:	2312      	movs	r3, #18
 8001106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4619      	mov	r1, r3
 800111a:	4838      	ldr	r0, [pc, #224]	@ (80011fc <MX_GPIO_Init+0x178>)
 800111c:	f002 fc60 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BMS_FAULT_Pin|BSPD_FLT_Pin|WDG_STATUS_Pin;
 8001120:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8001124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4833      	ldr	r0, [pc, #204]	@ (8001204 <MX_GPIO_Init+0x180>)
 8001136:	f002 fc53 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_FAULT_Pin|ASMS_SIG_Pin;
 800113a:	23c0      	movs	r3, #192	@ 0xc0
 800113c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4619      	mov	r1, r3
 800114c:	482d      	ldr	r0, [pc, #180]	@ (8001204 <MX_GPIO_Init+0x180>)
 800114e:	f002 fc47 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _3V3_TS_SWITCH_Pin;
 8001152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(_3V3_TS_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4826      	ldr	r0, [pc, #152]	@ (8001200 <MX_GPIO_Init+0x17c>)
 8001168:	f002 fc3a 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDC_CHECK_Pin;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001176:	2302      	movs	r3, #2
 8001178:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDC_CHECK_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	481f      	ldr	r0, [pc, #124]	@ (8001200 <MX_GPIO_Init+0x17c>)
 8001182:	f002 fc2d 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AS_SDC_Pin|WDI_Pin;
 8001186:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <MX_GPIO_Init+0x17c>)
 80011a0:	f002 fc1e 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDO_Pin;
 80011a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WDO_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_GPIO_Init+0x17c>)
 80011ba:	f002 fc11 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_1_SIG_Pin|ROT_2_SIG_Pin;
 80011be:	23c0      	movs	r3, #192	@ 0xc0
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	480a      	ldr	r0, [pc, #40]	@ (80011fc <MX_GPIO_Init+0x178>)
 80011d2:	f002 fc05 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_3_SIG_Pin|ROT_4_SIG_Pin;
 80011d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_GPIO_Init+0x178>)
 80011ec:	f002 fbf8 	bl	80039e0 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020400 	.word	0x40020400
 8001204:	40020000 	.word	0x40020000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fe5a 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f974 	bl	80014fc <SystemClock_Config>
  // Peripheral initialisation starts -------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f7ff ff36 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 8001218:	f7ff ff14 	bl	8001044 <MX_DMA_Init>
  MX_ADC1_Init();
 800121c:	f7ff fafe 	bl	800081c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001220:	f7ff fb4e 	bl	80008c0 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001224:	f000 fd76 	bl	8001d14 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001228:	f000 fcc2 	bl	8001bb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800122c:	f000 fcf6 	bl	8001c1c <MX_TIM7_Init>
  MX_CAN2_Init();
 8001230:	f7ff fc56 	bl	8000ae0 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001234:	f7ff fc0a 	bl	8000a4c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Initialise timer
 8001238:	489b      	ldr	r0, [pc, #620]	@ (80014a8 <main+0x2a0>)
 800123a:	f003 fa61 	bl	8004700 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Initialise timer
 800123e:	489b      	ldr	r0, [pc, #620]	@ (80014ac <main+0x2a4>)
 8001240:	f003 fa5e 	bl	8004700 <HAL_TIM_Base_Start_IT>

  // Peripheral initialisation complete -------------------------------------------------------

  Read_Rotary(&(State_Variables.R_S)); // Reads the current mission of the AV
 8001244:	489a      	ldr	r0, [pc, #616]	@ (80014b0 <main+0x2a8>)
 8001246:	f000 fab9 	bl	80017bc <Read_Rotary>
  ASSI_Off(); // Ensures ASSI output is off
 800124a:	f7ff f9dd 	bl	8000608 <ASSI_Off>
  while (1)
  {
	/* This is an implementation of a FSM in C. State outputs are executed at the start of every loop, along with the state attribute checks.
	 * A switch block is used for the state transitions for ever possible state.
	 */
	ReadInputs(indicators); // Updates all AV inputs
 800124e:	4b99      	ldr	r3, [pc, #612]	@ (80014b4 <main+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f9f2 	bl	800163c <ReadInputs>
	ReadForFaults(&FAILURE_MODE, indicators); // Checks all fault readings from AV
 8001258:	4b96      	ldr	r3, [pc, #600]	@ (80014b4 <main+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4896      	ldr	r0, [pc, #600]	@ (80014b8 <main+0x2b0>)
 8001260:	f000 fae4 	bl	800182c <ReadForFaults>
	AV_State_Outputs(indicators, av_status, FAILURE_MODE); // Implements ASSI and EBS changes depending on current State
 8001264:	4b93      	ldr	r3, [pc, #588]	@ (80014b4 <main+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a94      	ldr	r2, [pc, #592]	@ (80014bc <main+0x2b4>)
 800126a:	7811      	ldrb	r1, [r2, #0]
 800126c:	4a92      	ldr	r2, [pc, #584]	@ (80014b8 <main+0x2b0>)
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fa7b 	bl	800176c <AV_State_Outputs>

	switch(av_status) {
 8001276:	4b91      	ldr	r3, [pc, #580]	@ (80014bc <main+0x2b4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b04      	cmp	r3, #4
 800127c:	d8e7      	bhi.n	800124e <main+0x46>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <main+0x7c>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012db 	.word	0x080012db
 8001288:	08001397 	.word	0x08001397
 800128c:	08001299 	.word	0x08001299
 8001290:	0800140d 	.word	0x0800140d
 8001294:	08001459 	.word	0x08001459
			case OFF:
				if(indicators->R_S != INSPECTION && indicators->TS == 1
 8001298:	4b86      	ldr	r3, [pc, #536]	@ (80014b4 <main+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	f000 80f7 	beq.w	8001492 <main+0x28a>
 80012a4:	4b83      	ldr	r3, [pc, #524]	@ (80014b4 <main+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f040 80f1 	bne.w	8001492 <main+0x28a>
						&& indicators->ASMS_Status == 1) {
 80012b0:	4b80      	ldr	r3, [pc, #512]	@ (80014b4 <main+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	7c5b      	ldrb	r3, [r3, #17]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 80eb 	bne.w	8001492 <main+0x28a>
					CAN_Send_Message_String("READY \n");
 80012bc:	4880      	ldr	r0, [pc, #512]	@ (80014c0 <main+0x2b8>)
 80012be:	f7ff fd0d 	bl	8000cdc <CAN_Send_Message_String>
					Initial_Checkup();
 80012c2:	f000 fb49 	bl	8001958 <Initial_Checkup>
					av_status = READY;
 80012c6:	4b7d      	ldr	r3, [pc, #500]	@ (80014bc <main+0x2b4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
					timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 80012cc:	4b77      	ldr	r3, [pc, #476]	@ (80014ac <main+0x2a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b7b      	ldr	r3, [pc, #492]	@ (80014c4 <main+0x2bc>)
 80012d6:	801a      	strh	r2, [r3, #0]
				}
				break;
 80012d8:	e0db      	b.n	8001492 <main+0x28a>

			case READY:
				if(FAILURE_MODE != NONE || RES == 1) {
 80012da:	4b77      	ldr	r3, [pc, #476]	@ (80014b8 <main+0x2b0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d104      	bne.n	80012ec <main+0xe4>
 80012e2:	4b79      	ldr	r3, [pc, #484]	@ (80014c8 <main+0x2c0>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d109      	bne.n	8001300 <main+0xf8>
					CAN_Send_Message_String("EMGNCY\n");
 80012ec:	4877      	ldr	r0, [pc, #476]	@ (80014cc <main+0x2c4>)
 80012ee:	f7ff fcf5 	bl	8000cdc <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 80012f2:	4877      	ldr	r0, [pc, #476]	@ (80014d0 <main+0x2c8>)
 80012f4:	f7ff fcf2 	bl	8000cdc <CAN_Send_Message_String>
					av_status = EMERGENCY;
 80012f8:	4b70      	ldr	r3, [pc, #448]	@ (80014bc <main+0x2b4>)
 80012fa:	2203      	movs	r2, #3
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e049      	b.n	8001394 <main+0x18c>
				}
				else if(indicators->ASMS_Status == 0 && indicators->TS == 0 && indicators->EBS == 0) {
 8001300:	4b6c      	ldr	r3, [pc, #432]	@ (80014b4 <main+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	7c5b      	ldrb	r3, [r3, #17]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d110      	bne.n	800132c <main+0x124>
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <main+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <main+0x124>
 8001314:	4b67      	ldr	r3, [pc, #412]	@ (80014b4 <main+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	7c1b      	ldrb	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <main+0x124>
					CAN_Send_Message_String("OFF   \n");
 800131e:	486d      	ldr	r0, [pc, #436]	@ (80014d4 <main+0x2cc>)
 8001320:	f7ff fcdc 	bl	8000cdc <CAN_Send_Message_String>
					av_status = OFF;
 8001324:	4b65      	ldr	r3, [pc, #404]	@ (80014bc <main+0x2b4>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e033      	b.n	8001394 <main+0x18c>
				}
				else if((__HAL_TIM_GET_COUNTER(&htim7) - timecheck) > 500 && indicators->R_S != MANUAL && R2D == 1) {
 800132c:	4b5f      	ldr	r3, [pc, #380]	@ (80014ac <main+0x2a4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	4a64      	ldr	r2, [pc, #400]	@ (80014c4 <main+0x2bc>)
 8001334:	8812      	ldrh	r2, [r2, #0]
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800133c:	f240 80ab 	bls.w	8001496 <main+0x28e>
 8001340:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <main+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80a5 	beq.w	8001496 <main+0x28e>
 800134c:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <main+0x2d0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	f040 809f 	bne.w	8001496 <main+0x28e>
					if (indicators->R_S == TRACK) {
 8001358:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <main+0x2ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d103      	bne.n	800136a <main+0x162>
						CAN_Send_Message_String("EBSTEST");
 8001362:	485e      	ldr	r0, [pc, #376]	@ (80014dc <main+0x2d4>)
 8001364:	f7ff fcba 	bl	8000cdc <CAN_Send_Message_String>
 8001368:	e010      	b.n	800138c <main+0x184>
					}
					else if (indicators->R_S == EBS_TEST) {
 800136a:	4b52      	ldr	r3, [pc, #328]	@ (80014b4 <main+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d103      	bne.n	800137c <main+0x174>
						CAN_Send_Message_String("INSPECT");
 8001374:	485a      	ldr	r0, [pc, #360]	@ (80014e0 <main+0x2d8>)
 8001376:	f7ff fcb1 	bl	8000cdc <CAN_Send_Message_String>
 800137a:	e007      	b.n	800138c <main+0x184>
					}
					else if (indicators->R_S == INSPECTION) {
 800137c:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <main+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d102      	bne.n	800138c <main+0x184>
						CAN_Send_Message_String("DRIVING");
 8001386:	4857      	ldr	r0, [pc, #348]	@ (80014e4 <main+0x2dc>)
 8001388:	f7ff fca8 	bl	8000cdc <CAN_Send_Message_String>
					}
					av_status = DRIVING;
 800138c:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <main+0x2b4>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001392:	e080      	b.n	8001496 <main+0x28e>
 8001394:	e07f      	b.n	8001496 <main+0x28e>

			case DRIVING:
				if(FAILURE_MODE != NONE || RES == 1) {
 8001396:	4b48      	ldr	r3, [pc, #288]	@ (80014b8 <main+0x2b0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d104      	bne.n	80013a8 <main+0x1a0>
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <main+0x2c0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10c      	bne.n	80013c2 <main+0x1ba>
					CAN_Send_Message_String("EMGNCY\n");
 80013a8:	4848      	ldr	r0, [pc, #288]	@ (80014cc <main+0x2c4>)
 80013aa:	f7ff fc97 	bl	8000cdc <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 80013ae:	4848      	ldr	r0, [pc, #288]	@ (80014d0 <main+0x2c8>)
 80013b0:	f7ff fc94 	bl	8000cdc <CAN_Send_Message_String>
					CAN_Send_Message_String("DS OFF\n");
 80013b4:	484c      	ldr	r0, [pc, #304]	@ (80014e8 <main+0x2e0>)
 80013b6:	f7ff fc91 	bl	8000cdc <CAN_Send_Message_String>
					av_status = EMERGENCY;
 80013ba:	4b40      	ldr	r3, [pc, #256]	@ (80014bc <main+0x2b4>)
 80013bc:	2203      	movs	r2, #3
 80013be:	701a      	strb	r2, [r3, #0]
					CAN_Send_Message_String("FINISH\n");
					CAN_Send_Message_String("TS OFF\n");
					CAN_Send_Message_String("DS OFF\n");
					av_status = FINISHED;
				}
				break;
 80013c0:	e06b      	b.n	800149a <main+0x292>
				else if(indicators->R_S == TRACK) {
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <main+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <main+0x1d6>
					if(EBS_Test_Accel_Stop == 1) {
 80013cc:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <main+0x2e4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d161      	bne.n	800149a <main+0x292>
						av_status = EMERGENCY;
 80013d6:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <main+0x2b4>)
 80013d8:	2203      	movs	r2, #3
 80013da:	701a      	strb	r2, [r3, #0]
				break;
 80013dc:	e05d      	b.n	800149a <main+0x292>
				else if(Mission_Finished == 1) {
 80013de:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <main+0x2e8>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d158      	bne.n	800149a <main+0x292>
					EBSActivate(indicators);
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <main+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fa69 	bl	80018c4 <EBSActivate>
					CAN_Send_Message_String("FINISH\n");
 80013f2:	4840      	ldr	r0, [pc, #256]	@ (80014f4 <main+0x2ec>)
 80013f4:	f7ff fc72 	bl	8000cdc <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 80013f8:	4835      	ldr	r0, [pc, #212]	@ (80014d0 <main+0x2c8>)
 80013fa:	f7ff fc6f 	bl	8000cdc <CAN_Send_Message_String>
					CAN_Send_Message_String("DS OFF\n");
 80013fe:	483a      	ldr	r0, [pc, #232]	@ (80014e8 <main+0x2e0>)
 8001400:	f7ff fc6c 	bl	8000cdc <CAN_Send_Message_String>
					av_status = FINISHED;
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <main+0x2b4>)
 8001406:	2204      	movs	r2, #4
 8001408:	701a      	strb	r2, [r3, #0]
				break;
 800140a:	e046      	b.n	800149a <main+0x292>

			case EMERGENCY:
				if(EBS_Sound == 0 && indicators->ASMS_Status == 0 && indicators->SB == 0 && indicators->TS == 0 && indicators->R_S == TRACK) {
 800140c:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <main+0x2f0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d143      	bne.n	800149e <main+0x296>
 8001416:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <main+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	7c5b      	ldrb	r3, [r3, #17]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d13e      	bne.n	800149e <main+0x296>
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <main+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d139      	bne.n	800149e <main+0x296>
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <main+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d134      	bne.n	800149e <main+0x296>
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <main+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d12f      	bne.n	800149e <main+0x296>
					av_status = OFF;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <main+0x2b4>)
 8001440:	2202      	movs	r2, #2
 8001442:	701a      	strb	r2, [r3, #0]
					RES = 0;
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <main+0x2c0>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
					CAN_Send_Message_String("OFF   \n");
 800144a:	4822      	ldr	r0, [pc, #136]	@ (80014d4 <main+0x2cc>)
 800144c:	f7ff fc46 	bl	8000cdc <CAN_Send_Message_String>
					FAILURE_MODE = NONE;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <main+0x2b0>)
 8001452:	2208      	movs	r2, #8
 8001454:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001456:	e022      	b.n	800149e <main+0x296>

			case FINISHED:
				if(RES == 1) {
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <main+0x2c0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <main+0x268>
					CAN_Send_Message_String("EMGNCY\n");
 8001462:	481a      	ldr	r0, [pc, #104]	@ (80014cc <main+0x2c4>)
 8001464:	f7ff fc3a 	bl	8000cdc <CAN_Send_Message_String>
					av_status = EMERGENCY;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <main+0x2b4>)
 800146a:	2203      	movs	r2, #3
 800146c:	701a      	strb	r2, [r3, #0]
				}
				else if(indicators->ASMS_Status == 0 && indicators->SB == 0) {
					CAN_Send_Message_String("OFF   \n");
					av_status = OFF;
				}
				break;
 800146e:	e018      	b.n	80014a2 <main+0x29a>
				else if(indicators->ASMS_Status == 0 && indicators->SB == 0) {
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <main+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	7c5b      	ldrb	r3, [r3, #17]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d113      	bne.n	80014a2 <main+0x29a>
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <main+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10e      	bne.n	80014a2 <main+0x29a>
					CAN_Send_Message_String("OFF   \n");
 8001484:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <main+0x2cc>)
 8001486:	f7ff fc29 	bl	8000cdc <CAN_Send_Message_String>
					av_status = OFF;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <main+0x2b4>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
				break;
 8001490:	e007      	b.n	80014a2 <main+0x29a>
				break;
 8001492:	bf00      	nop
 8001494:	e6db      	b.n	800124e <main+0x46>
				break;
 8001496:	bf00      	nop
 8001498:	e6d9      	b.n	800124e <main+0x46>
				break;
 800149a:	bf00      	nop
 800149c:	e6d7      	b.n	800124e <main+0x46>
				break;
 800149e:	bf00      	nop
 80014a0:	e6d5      	b.n	800124e <main+0x46>
				break;
 80014a2:	bf00      	nop
 80014a4:	e6d3      	b.n	800124e <main+0x46>
 80014a6:	bf00      	nop
 80014a8:	20000390 	.word	0x20000390
 80014ac:	200003d8 	.word	0x200003d8
 80014b0:	2000036c 	.word	0x2000036c
 80014b4:	20000004 	.word	0x20000004
 80014b8:	20000001 	.word	0x20000001
 80014bc:	20000000 	.word	0x20000000
 80014c0:	0800554c 	.word	0x0800554c
 80014c4:	2000037c 	.word	0x2000037c
 80014c8:	20000385 	.word	0x20000385
 80014cc:	08005554 	.word	0x08005554
 80014d0:	0800555c 	.word	0x0800555c
 80014d4:	08005564 	.word	0x08005564
 80014d8:	20000387 	.word	0x20000387
 80014dc:	0800556c 	.word	0x0800556c
 80014e0:	08005574 	.word	0x08005574
 80014e4:	0800557c 	.word	0x0800557c
 80014e8:	08005584 	.word	0x08005584
 80014ec:	2000038a 	.word	0x2000038a
 80014f0:	20000383 	.word	0x20000383
 80014f4:	0800558c 	.word	0x0800558c
 80014f8:	20000384 	.word	0x20000384

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 ffe6 	bl	80054dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <SystemClock_Config+0xc8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <SystemClock_Config+0xc8>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <SystemClock_Config+0xc8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a20      	ldr	r2, [pc, #128]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <SystemClock_Config+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2310      	movs	r3, #16
 8001562:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800156c:	2310      	movs	r3, #16
 800156e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001570:	2378      	movs	r3, #120	@ 0x78
 8001572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fc15 	bl	8003db0 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800158c:	f000 fa6c 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fe77 	bl	80042a0 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015b8:	f000 fa56 	bl	8001a68 <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3750      	adds	r7, #80	@ 0x50
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle Watchdog
  if (htim == &htim7) // Heartbeat check may be faulty if nodes cannot meet timeout of 2s but still work. Scrap Heartbeat check in this case. Also refer to CAN source file to change Node ids (channel Ids) for respective nodes.
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d117      	bne.n	800160c <HAL_TIM_PeriodElapsedCallback+0x40>
  {
	  int i;
	  	for (i = 1; i < 3; i++) {
 80015dc:	2301      	movs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e011      	b.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  		if ((__HAL_TIM_GET_COUNTER(&htim6) - HeartbeatCheck[i]) > 2000) {
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	4911      	ldr	r1, [pc, #68]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	440a      	add	r2, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015f8:	d902      	bls.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x34>
	  			FAILURE_MODE = HEARTBEAT_FAULT;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015fc:	2206      	movs	r2, #6
 80015fe:	701a      	strb	r2, [r3, #0]
	  	for (i = 1; i < 3; i++) {
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3301      	adds	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b02      	cmp	r3, #2
 800160a:	ddea      	ble.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x16>
	  			}
	  	}
  }

  if (htim == &htim7)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d104      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x52>
    {
  	  HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin); // Toggle watchdog control pin
 8001614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001618:	4807      	ldr	r0, [pc, #28]	@ (8001638 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800161a:	f002 fbae 	bl	8003d7a <HAL_GPIO_TogglePin>
    }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003d8 	.word	0x200003d8
 800162c:	20000390 	.word	0x20000390
 8001630:	2000038c 	.word	0x2000038c
 8001634:	20000001 	.word	0x20000001
 8001638:	40020400 	.word	0x40020400

0800163c <ReadInputs>:

void ReadInputs(AS__INDICATOR_STATES *indicators) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	Read_Rotary(&(indicators->R_S));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8b7 	bl	80017bc <Read_Rotary>
	indicators->TS = HAL_GPIO_ReadPin(_3V3_TS_SWITCH_GPIO_Port, _3V3_TS_SWITCH_Pin);
 800164e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001652:	4811      	ldr	r0, [pc, #68]	@ (8001698 <ReadInputs+0x5c>)
 8001654:	f002 fb60 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
	indicators->SB = Service_Brake_Check; // Redundant
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <ReadInputs+0x60>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
	indicators->SA = Steering_Actuator_Check; // Redundant
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <ReadInputs+0x64>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
	indicators->ASMS_Status = HAL_GPIO_ReadPin(ASMS_SIG_GPIO_Port, ASMS_SIG_Pin);
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <ReadInputs+0x68>)
 800167c:	f002 fb4c 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	745a      	strb	r2, [r3, #17]
	EBSCheck(indicators);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f93b 	bl	8001904 <EBSCheck>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40020400 	.word	0x40020400
 800169c:	20000381 	.word	0x20000381
 80016a0:	20000382 	.word	0x20000382
 80016a4:	40020000 	.word	0x40020000

080016a8 <SystemFailureHandler>:
  * @brief  This function is used to handle the failure-specific information transmitted over CAN.
  * 		Depending on the Failure Mode, the response over CAN will be different.
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  * @retval void
  */
void SystemFailureHandler(FAILURE_MODE_READING fm) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	switch (fm) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d839      	bhi.n	800172c <SystemFailureHandler+0x84>
 80016b8:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <SystemFailureHandler+0x18>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016ed 	.word	0x080016ed
 80016c4:	080016f5 	.word	0x080016f5
 80016c8:	080016fd 	.word	0x080016fd
 80016cc:	08001705 	.word	0x08001705
 80016d0:	08001715 	.word	0x08001715
 80016d4:	0800170d 	.word	0x0800170d
 80016d8:	0800171d 	.word	0x0800171d
 80016dc:	08001725 	.word	0x08001725
 80016e0:	080016e5 	.word	0x080016e5
		case NONE:
			CAN_Send_Message_String("No Err\n");
 80016e4:	4817      	ldr	r0, [pc, #92]	@ (8001744 <SystemFailureHandler+0x9c>)
 80016e6:	f7ff faf9 	bl	8000cdc <CAN_Send_Message_String>
			break;
 80016ea:	e01f      	b.n	800172c <SystemFailureHandler+0x84>
		case SDC_FAILURE:
			CAN_Send_Message_String("SDCFlt\n");
 80016ec:	4816      	ldr	r0, [pc, #88]	@ (8001748 <SystemFailureHandler+0xa0>)
 80016ee:	f7ff faf5 	bl	8000cdc <CAN_Send_Message_String>
			break;
 80016f2:	e01b      	b.n	800172c <SystemFailureHandler+0x84>
		case NON_PROG_FAILURE:
			CAN_Send_Message_String("NonPrg\n");
 80016f4:	4815      	ldr	r0, [pc, #84]	@ (800174c <SystemFailureHandler+0xa4>)
 80016f6:	f7ff faf1 	bl	8000cdc <CAN_Send_Message_String>
			break;
 80016fa:	e017      	b.n	800172c <SystemFailureHandler+0x84>
		case EBS_FAILURE:
			CAN_Send_Message_String("EBS   \n");
 80016fc:	4814      	ldr	r0, [pc, #80]	@ (8001750 <SystemFailureHandler+0xa8>)
 80016fe:	f7ff faed 	bl	8000cdc <CAN_Send_Message_String>
			break;
 8001702:	e013      	b.n	800172c <SystemFailureHandler+0x84>
		case IMD_FAULT:
			CAN_Send_Message_String("IMD   \n");
 8001704:	4813      	ldr	r0, [pc, #76]	@ (8001754 <SystemFailureHandler+0xac>)
 8001706:	f7ff fae9 	bl	8000cdc <CAN_Send_Message_String>
			break;
 800170a:	e00f      	b.n	800172c <SystemFailureHandler+0x84>
		case BMS_FAULT:
			CAN_Send_Message_String("BMS   \n");
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <SystemFailureHandler+0xb0>)
 800170e:	f7ff fae5 	bl	8000cdc <CAN_Send_Message_String>
			break;
 8001712:	e00b      	b.n	800172c <SystemFailureHandler+0x84>
		case BSPD_FAULT:
			CAN_Send_Message_String("BSPD  \n");
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <SystemFailureHandler+0xb4>)
 8001716:	f7ff fae1 	bl	8000cdc <CAN_Send_Message_String>
			break;
 800171a:	e007      	b.n	800172c <SystemFailureHandler+0x84>
		case HEARTBEAT_FAULT:
			CAN_Send_Message_String("NodeFLT");
 800171c:	4810      	ldr	r0, [pc, #64]	@ (8001760 <SystemFailureHandler+0xb8>)
 800171e:	f7ff fadd 	bl	8000cdc <CAN_Send_Message_String>
			break;
 8001722:	e003      	b.n	800172c <SystemFailureHandler+0x84>
		case SPRING_BROKE:
			CAN_Send_Message_String("SprgFLT");
 8001724:	480f      	ldr	r0, [pc, #60]	@ (8001764 <SystemFailureHandler+0xbc>)
 8001726:	f7ff fad9 	bl	8000cdc <CAN_Send_Message_String>
			break;
 800172a:	bf00      	nop
	}
	EBSActivate(indicators);
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <SystemFailureHandler+0xc0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8c7 	bl	80018c4 <EBSActivate>
	Error_Handler();
 8001736:	f000 f997 	bl	8001a68 <Error_Handler>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08005594 	.word	0x08005594
 8001748:	0800559c 	.word	0x0800559c
 800174c:	080055a4 	.word	0x080055a4
 8001750:	080055ac 	.word	0x080055ac
 8001754:	080055b4 	.word	0x080055b4
 8001758:	080055bc 	.word	0x080055bc
 800175c:	080055c4 	.word	0x080055c4
 8001760:	080055cc 	.word	0x080055cc
 8001764:	080055d4 	.word	0x080055d4
 8001768:	20000004 	.word	0x20000004

0800176c <AV_State_Outputs>:
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  * 		indicators is a pointer to the struct containing all state information.
  * 		status is an enum that corresponds to the current state of the AV, according to the FSM in the .README documentation.
  * @retval void
  */
void AV_State_Outputs(AS__INDICATOR_STATES *indicators, AV_STATE status, FAILURE_MODE_READING FM) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
 8001778:	4613      	mov	r3, r2
 800177a:	70bb      	strb	r3, [r7, #2]
	switch(status) {
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d818      	bhi.n	80017b4 <AV_State_Outputs+0x48>
 8001782:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <AV_State_Outputs+0x1c>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	0800179d 	.word	0x0800179d
 800178c:	080017a1 	.word	0x080017a1
 8001790:	080017b1 	.word	0x080017b1
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017ad 	.word	0x080017ad
		case (READY):
				ASSI_Ready();
 800179c:	f7fe ff4c 	bl	8000638 <ASSI_Ready>
		case (DRIVING):
				ASSI_Driving();
 80017a0:	f7fe ff62 	bl	8000668 <ASSI_Driving>
		case (EMERGENCY):
				SystemFailureHandler(FM);
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff7e 	bl	80016a8 <SystemFailureHandler>
		case (FINISHED):
				ASSI_Finished();
 80017ac:	f7ff f812 	bl	80007d4 <ASSI_Finished>
		case (OFF):
				ASSI_Off();
 80017b0:	f7fe ff2a 	bl	8000608 <ASSI_Off>
	}


}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <Read_Rotary>:
/**
  * @brief  This function is used to check what state the Rotary Switch is currently in.
  * @param  RS is a pointer to the Rotary Switch enum that corresponds to all the different states.
  * @retval void
  */
void Read_Rotary(ROT_SWITCH* RS) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	// Rotary switch is active high
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_1_SIG_GPIO_Port, ROT_1_SIG_Pin)) {
 80017c4:	2140      	movs	r1, #64	@ 0x40
 80017c6:	4818      	ldr	r0, [pc, #96]	@ (8001828 <Read_Rotary+0x6c>)
 80017c8:	f002 faa6 	bl	8003d18 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <Read_Rotary+0x1e>
		*RS = MANUAL;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
		*RS = EBS_TEST;
	}
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
		*RS = INSPECTION;
	}
}
 80017d8:	e021      	b.n	800181e <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_2_SIG_GPIO_Port, ROT_2_SIG_Pin)) {
 80017da:	2180      	movs	r1, #128	@ 0x80
 80017dc:	4812      	ldr	r0, [pc, #72]	@ (8001828 <Read_Rotary+0x6c>)
 80017de:	f002 fa9b 	bl	8003d18 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <Read_Rotary+0x34>
		*RS = TRACK;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
}
 80017ee:	e016      	b.n	800181e <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_3_SIG_GPIO_Port, ROT_3_SIG_Pin)) {
 80017f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <Read_Rotary+0x6c>)
 80017f6:	f002 fa8f 	bl	8003d18 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <Read_Rotary+0x4c>
		*RS = EBS_TEST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	e00a      	b.n	800181e <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
 8001808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800180c:	4806      	ldr	r0, [pc, #24]	@ (8001828 <Read_Rotary+0x6c>)
 800180e:	f002 fa83 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <Read_Rotary+0x62>
		*RS = INSPECTION;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020800 	.word	0x40020800

0800182c <ReadForFaults>:
  * @brief  This function reads the status of IMD, BSPD and BMS failure pins and changes the corresponding flags.
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  *			indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void ReadForFaults(FAILURE_MODE_READING *Fm, AS__INDICATOR_STATES *indicators) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	if(HAL_GPIO_ReadPin(BMS_FAULT_GPIO_Port, BMS_FAULT_Pin) == 1) {
 8001836:	2110      	movs	r1, #16
 8001838:	481f      	ldr	r0, [pc, #124]	@ (80018b8 <ReadForFaults+0x8c>)
 800183a:	f002 fa6d 	bl	8003d18 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d103      	bne.n	800184c <ReadForFaults+0x20>
		*Fm = BMS_FAULT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2205      	movs	r2, #5
 8001848:	701a      	strb	r2, [r3, #0]
		*Fm = SDC_FAILURE;
	}
	else if(StrainGauge == 1) {
		*Fm = SPRING_BROKE;
	}
}
 800184a:	e031      	b.n	80018b0 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(BSPD_FLT_GPIO_Port, BSPD_FLT_Pin) == 1) {
 800184c:	2120      	movs	r1, #32
 800184e:	481a      	ldr	r0, [pc, #104]	@ (80018b8 <ReadForFaults+0x8c>)
 8001850:	f002 fa62 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b01      	cmp	r3, #1
 8001858:	d103      	bne.n	8001862 <ReadForFaults+0x36>
		*Fm = BSPD_FAULT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2204      	movs	r2, #4
 800185e:	701a      	strb	r2, [r3, #0]
}
 8001860:	e026      	b.n	80018b0 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(IMD_FAULT_GPIO_Port, IMD_FAULT_Pin) == 1) {
 8001862:	2140      	movs	r1, #64	@ 0x40
 8001864:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <ReadForFaults+0x8c>)
 8001866:	f002 fa57 	bl	8003d18 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d103      	bne.n	8001878 <ReadForFaults+0x4c>
		*Fm = IMD_FAULT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	701a      	strb	r2, [r3, #0]
}
 8001876:	e01b      	b.n	80018b0 <ReadForFaults+0x84>
	else if(indicators->EBS == 0) {
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	7c1b      	ldrb	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <ReadForFaults+0x5c>
		*Fm = EBS_FAILURE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
}
 8001886:	e013      	b.n	80018b0 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 0) {
 8001888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188c:	480b      	ldr	r0, [pc, #44]	@ (80018bc <ReadForFaults+0x90>)
 800188e:	f002 fa43 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <ReadForFaults+0x74>
		*Fm = SDC_FAILURE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
}
 800189e:	e007      	b.n	80018b0 <ReadForFaults+0x84>
	else if(StrainGauge == 1) {
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <ReadForFaults+0x94>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <ReadForFaults+0x84>
		*Fm = SPRING_BROKE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2207      	movs	r2, #7
 80018ae:	701a      	strb	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	20000389 	.word	0x20000389

080018c4 <EBSActivate>:
/**
  * @brief  This function is used to activate the EBS by setting the EBS actuator pin high. Also activates the redundant system if EBS not available.
  * @param  indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void EBSActivate(AS__INDICATOR_STATES *indicators) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	EBSCheck(indicators);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f819 	bl	8001904 <EBSCheck>
	if (indicators->EBS == ACTIVATED) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7c1b      	ldrb	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d103      	bne.n	80018e2 <EBSActivate+0x1e>
		/* Send a message over CAN to activate redundant system*/
		CAN_Send_Message_String("RDNDNT\n");
 80018da:	4808      	ldr	r0, [pc, #32]	@ (80018fc <EBSActivate+0x38>)
 80018dc:	f7ff f9fe 	bl	8000cdc <CAN_Send_Message_String>
	}
	else if (indicators->EBS == DEACTIVATED) {
		HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
	}
}
 80018e0:	e008      	b.n	80018f4 <EBSActivate+0x30>
	else if (indicators->EBS == DEACTIVATED) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7c1b      	ldrb	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <EBSActivate+0x30>
		HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2110      	movs	r1, #16
 80018ee:	4804      	ldr	r0, [pc, #16]	@ (8001900 <EBSActivate+0x3c>)
 80018f0:	f002 fa2a 	bl	8003d48 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	080055dc 	.word	0x080055dc
 8001900:	40020800 	.word	0x40020800

08001904 <EBSCheck>:
/**
  * @brief  Performs initial checkup before going into Ready State from Idle.
  * @param  void
  * @retval void
  */
void EBSCheck(AS__INDICATOR_STATES *indicators) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	if (EBS_Pressure_Check == 1 && EBS_Brake_Line == 1) {
 800190c:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <EBSCheck+0x4c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <EBSCheck+0x24>
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <EBSCheck+0x50>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d103      	bne.n	8001928 <EBSCheck+0x24>
		indicators->EBS = ACTIVATED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	741a      	strb	r2, [r3, #16]
	}
	else if (EBS_Brake_Line == 0 || EBS_Pressure_Check == 0) {
		indicators->EBS = DEACTIVATED;
	}
}
 8001926:	e00c      	b.n	8001942 <EBSCheck+0x3e>
	else if (EBS_Brake_Line == 0 || EBS_Pressure_Check == 0) {
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <EBSCheck+0x50>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <EBSCheck+0x38>
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <EBSCheck+0x4c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <EBSCheck+0x3e>
		indicators->EBS = DEACTIVATED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	741a      	strb	r2, [r3, #16]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000380 	.word	0x20000380
 8001954:	20000388 	.word	0x20000388

08001958 <Initial_Checkup>:
/**
  * @brief  This function is used to deactivate the EBS by enabling the SDC, which will happen if failures have been resolved.
  * @param  indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void Initial_Checkup(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7); // You will see this often. This is me setting the current count of the timer to the timecheck variable for future comparison.
 800195c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <Initial_Checkup+0xf0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <Initial_Checkup+0xf4>)
 8001966:	801a      	strh	r2, [r3, #0]
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == GPIO_PIN_RESET) {
 8001968:	e00f      	b.n	800198a <Initial_Checkup+0x32>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 800196a:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <Initial_Checkup+0xf0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	4a36      	ldr	r2, [pc, #216]	@ (8001a4c <Initial_Checkup+0xf4>)
 8001972:	8812      	ldrh	r2, [r2, #0]
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	2b96      	cmp	r3, #150	@ 0x96
 8001978:	d907      	bls.n	800198a <Initial_Checkup+0x32>
			  // Timeout Condition for if the SDC does not go to high.
			  FAILURE_MODE = SDC_FAILURE;
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <Initial_Checkup+0xf8>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <Initial_Checkup+0xf8>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fe8f 	bl	80016a8 <SystemFailureHandler>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == GPIO_PIN_RESET) {
 800198a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800198e:	4831      	ldr	r0, [pc, #196]	@ (8001a54 <Initial_Checkup+0xfc>)
 8001990:	f002 f9c2 	bl	8003d18 <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0e7      	beq.n	800196a <Initial_Checkup+0x12>
		  }
	  }

	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <Initial_Checkup+0xf0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <Initial_Checkup+0xf4>)
 80019a4:	801a      	strh	r2, [r3, #0]
	  CAN_Bus_Limiter = 0; // reset the CAN Bus Error Limiter
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <Initial_Checkup+0x100>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(TIM7_IRQn); // Disable Watchdog interrupts
 80019ac:	2037      	movs	r0, #55	@ 0x37
 80019ae:	f001 fd12 	bl	80033d6 <HAL_NVIC_DisableIRQ>
	  HAL_Delay(200);
 80019b2:	20c8      	movs	r0, #200	@ 0xc8
 80019b4:	f000 faf8 	bl	8001fa8 <HAL_Delay>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 1) {
 80019b8:	e00f      	b.n	80019da <Initial_Checkup+0x82>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 80019ba:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <Initial_Checkup+0xf0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <Initial_Checkup+0xf4>)
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	2b96      	cmp	r3, #150	@ 0x96
 80019c8:	d907      	bls.n	80019da <Initial_Checkup+0x82>
			  FAILURE_MODE = NON_PROG_FAILURE;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <Initial_Checkup+0xf8>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <Initial_Checkup+0xf8>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe67 	bl	80016a8 <SystemFailureHandler>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 1) {
 80019da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019de:	481d      	ldr	r0, [pc, #116]	@ (8001a54 <Initial_Checkup+0xfc>)
 80019e0:	f002 f99a 	bl	8003d18 <HAL_GPIO_ReadPin>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d0e7      	beq.n	80019ba <Initial_Checkup+0x62>
		  }
	  }

	  HAL_NVIC_EnableIRQ(TIM7_IRQn); // Enable Watchdog interrupts
 80019ea:	2037      	movs	r0, #55	@ 0x37
 80019ec:	f001 fce5 	bl	80033ba <HAL_NVIC_EnableIRQ>
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <Initial_Checkup+0xf0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <Initial_Checkup+0xf4>)
 80019fa:	801a      	strh	r2, [r3, #0]
	  while (EBS_Energy_Check == 0) {
 80019fc:	e00f      	b.n	8001a1e <Initial_Checkup+0xc6>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <Initial_Checkup+0xf0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <Initial_Checkup+0xf4>)
 8001a06:	8812      	ldrh	r2, [r2, #0]
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	2b96      	cmp	r3, #150	@ 0x96
 8001a0c:	d907      	bls.n	8001a1e <Initial_Checkup+0xc6>
			  // Timeout Condition if EBS Cannister and line Pressure are not built up.
			  FAILURE_MODE = EBS_FAILURE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <Initial_Checkup+0xf8>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <Initial_Checkup+0xf8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fe45 	bl	80016a8 <SystemFailureHandler>
	  while (EBS_Energy_Check == 0) {
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <Initial_Checkup+0x104>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ea      	beq.n	80019fe <Initial_Checkup+0xa6>
		  }
	  }

	  HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_SET); // Close SDC Relay once checks have been performed.
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <Initial_Checkup+0x108>)
 8001a2e:	f002 f98b 	bl	8003d48 <HAL_GPIO_WritePin>

	  av_status = READY; // Transition into READY state
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <Initial_Checkup+0x10c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <Initial_Checkup+0xf0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b02      	ldr	r3, [pc, #8]	@ (8001a4c <Initial_Checkup+0xf4>)
 8001a42:	801a      	strh	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200003d8 	.word	0x200003d8
 8001a4c:	2000037c 	.word	0x2000037c
 8001a50:	20000001 	.word	0x20000001
 8001a54:	40020400 	.word	0x40020400
 8001a58:	2000037e 	.word	0x2000037e
 8001a5c:	2000037f 	.word	0x2000037f
 8001a60:	40020800 	.word	0x40020800
 8001a64:	20000000 	.word	0x20000000

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ASSI_Emergency();
 8001a70:	f7fe fe54 	bl	800071c <ASSI_Emergency>
 8001a74:	e7fc      	b.n	8001a70 <Error_Handler+0x8>
	...

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 fa23 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <CAN1_RX0_IRQHandler+0x10>)
 8001b2e:	f001 f8f9 	bl	8002d24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000314 	.word	0x20000314

08001b3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM6_DAC_IRQHandler+0x10>)
 8001b42:	f002 fe4d 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000390 	.word	0x20000390

08001b50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM7_IRQHandler+0x10>)
 8001b56:	f002 fe43 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003d8 	.word	0x200003d8

08001b64 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <CAN2_RX1_IRQHandler+0x10>)
 8001b6a:	f001 f8db 	bl	8002d24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000033c 	.word	0x2000033c

08001b78 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <DMA2_Stream7_IRQHandler+0x10>)
 8001b7e:	f001 fcf3 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000468 	.word	0x20000468

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <MX_TIM6_Init+0x68>)
 8001bc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bc6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001bca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24999;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bd4:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001bd8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001be2:	f002 fd3d 	bl	8004660 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bec:	f7ff ff3c 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_TIM6_Init+0x64>)
 8001bfe:	f002 ffb3 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c08:	f7ff ff2e 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000390 	.word	0x20000390
 8001c18:	40001000 	.word	0x40001000

08001c1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c2c:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <MX_TIM7_Init+0x68>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59999;
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c32:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001c36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 89;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c40:	2259      	movs	r2, #89	@ 0x59
 8001c42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c4c:	f002 fd08 	bl	8004660 <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c56:	f7ff ff07 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <MX_TIM7_Init+0x64>)
 8001c68:	f002 ff7e 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c72:	f7ff fef9 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003d8 	.word	0x200003d8
 8001c84:	40001400 	.word	0x40001400

08001c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d116      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2036      	movs	r0, #54	@ 0x36
 8001cbc:	f001 fb61 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cc0:	2036      	movs	r0, #54	@ 0x36
 8001cc2:	f001 fb7a 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001cc6:	e01a      	b.n	8001cfe <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_TIM_Base_MspInit+0x88>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d115      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2037      	movs	r0, #55	@ 0x37
 8001cf4:	f001 fb45 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cf8:	2037      	movs	r0, #55	@ 0x37
 8001cfa:	f001 fb5e 	bl	80033ba <HAL_NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40001000 	.word	0x40001000
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40001400 	.word	0x40001400

08001d14 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d1a:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2500000;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <MX_USART1_UART_Init+0x50>)
 8001d22:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d38:	2208      	movs	r2, #8
 8001d3a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MX_USART1_UART_Init+0x48>)
 8001d4a:	f002 ff9d 	bl	8004c88 <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001d54:	f7ff fe88 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000420 	.word	0x20000420
 8001d60:	40011000 	.word	0x40011000
 8001d64:	002625a0 	.word	0x002625a0

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a35      	ldr	r2, [pc, #212]	@ (8001e5c <HAL_UART_MspInit+0xf4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d163      	bne.n	8001e52 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_UART_MspInit+0xf8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4821      	ldr	r0, [pc, #132]	@ (8001e64 <HAL_UART_MspInit+0xfc>)
 8001de0:	f001 fdfe 	bl	80039e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001de6:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <HAL_UART_MspInit+0x104>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001dec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001df0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e20:	2204      	movs	r2, #4
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e26:	2203      	movs	r2, #3
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e38:	f001 fae8 	bl	800340c <HAL_DMA_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001e42:	f7ff fe11 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_UART_MspInit+0x100>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	20000468 	.word	0x20000468
 8001e6c:	400264b8 	.word	0x400264b8

08001e70 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e76:	490e      	ldr	r1, [pc, #56]	@ (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e78:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8001ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff fe77 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f003 fb25 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7ff f9b1 	bl	8001208 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001eb4:	08005614 	.word	0x08005614
  ldr r2, =_sbss
 8001eb8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ebc:	200004cc 	.word	0x200004cc

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f001 fa3d 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fdbe 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fa63 	bl	80033f2 <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f001 fa1d 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000010 	.word	0x20000010
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	200004c8 	.word	0x200004c8

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	200004c8 	.word	0x200004c8

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010

08001ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e033      	b.n	800206e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fca8 	bl	8000964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002036:	f023 0302 	bic.w	r3, r3, #2
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f93a 	bl	80022bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40
 800205e:	e001      	b.n	8002064 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1c>
 8002090:	2302      	movs	r3, #2
 8002092:	e105      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x228>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d925      	bls.n	80020f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	400a      	ands	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68d9      	ldr	r1, [r3, #12]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	4603      	mov	r3, r0
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4403      	add	r3, r0
 80020e2:	3b1e      	subs	r3, #30
 80020e4:	409a      	lsls	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	e022      	b.n	8002136 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	2207      	movs	r2, #7
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	400a      	ands	r2, r1
 8002112:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	4603      	mov	r3, r0
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4403      	add	r3, r0
 800212c:	409a      	lsls	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b06      	cmp	r3, #6
 800213c:	d824      	bhi.n	8002188 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b05      	subs	r3, #5
 8002150:	221f      	movs	r2, #31
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	400a      	ands	r2, r1
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b05      	subs	r3, #5
 800217a:	fa00 f203 	lsl.w	r2, r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	635a      	str	r2, [r3, #52]	@ 0x34
 8002186:	e04c      	b.n	8002222 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d824      	bhi.n	80021da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b23      	subs	r3, #35	@ 0x23
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43da      	mvns	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	400a      	ands	r2, r1
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b23      	subs	r3, #35	@ 0x23
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d8:	e023      	b.n	8002222 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b41      	subs	r3, #65	@ 0x41
 80021ec:	221f      	movs	r2, #31
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3b41      	subs	r3, #65	@ 0x41
 8002216:	fa00 f203 	lsl.w	r2, r0, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002222:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <HAL_ADC_ConfigChannel+0x234>)
 8002224:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <HAL_ADC_ConfigChannel+0x238>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d109      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1cc>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b12      	cmp	r3, #18
 8002236:	d105      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_ADC_ConfigChannel+0x238>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d123      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b10      	cmp	r3, #16
 8002254:	d003      	beq.n	800225e <HAL_ADC_ConfigChannel+0x1e6>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b11      	cmp	r3, #17
 800225c:	d11b      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d111      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_ADC_ConfigChannel+0x23c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a10      	ldr	r2, [pc, #64]	@ (80022b8 <HAL_ADC_ConfigChannel+0x240>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9a      	lsrs	r2, r3, #18
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40012300 	.word	0x40012300
 80022b0:	40012000 	.word	0x40012000
 80022b4:	20000008 	.word	0x20000008
 80022b8:	431bde83 	.word	0x431bde83

080022bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c4:	4b79      	ldr	r3, [pc, #484]	@ (80024ac <ADC_Init+0x1f0>)
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	021a      	lsls	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	4a58      	ldr	r2, [pc, #352]	@ (80024b0 <ADC_Init+0x1f4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d022      	beq.n	800239a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002362:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	e00f      	b.n	80023ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0202 	bic.w	r2, r2, #2
 80023c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
 80023d4:	005a      	lsls	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002406:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	3b01      	subs	r3, #1
 8002414:	035a      	lsls	r2, r3, #13
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	e007      	b.n	8002430 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800242e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800243e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	3b01      	subs	r3, #1
 800244c:	051a      	lsls	r2, r3, #20
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002472:	025a      	lsls	r2, r3, #9
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800248a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	029a      	lsls	r2, r3, #10
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40012300 	.word	0x40012300
 80024b0:	0f000001 	.word	0x0f000001

080024b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0ed      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fb52 	bl	8000b7c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7ff fd52 	bl	8001f90 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ee:	e012      	b.n	8002516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f0:	f7ff fd4e 	bl	8001f90 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d90b      	bls.n	8002516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0c5      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0e5      	beq.n	80024f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0202 	bic.w	r2, r2, #2
 8002532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002534:	f7ff fd2c 	bl	8001f90 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800253a:	e012      	b.n	8002562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800253c:	f7ff fd28 	bl	8001f90 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b0a      	cmp	r3, #10
 8002548:	d90b      	bls.n	8002562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2205      	movs	r2, #5
 800255a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e09f      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7e5b      	ldrb	r3, [r3, #25]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e9b      	ldrb	r3, [r3, #26]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0220 	orr.w	r2, r2, #32
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0220 	bic.w	r2, r2, #32
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7edb      	ldrb	r3, [r3, #27]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0210 	bic.w	r2, r2, #16
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0210 	orr.w	r2, r2, #16
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7f1b      	ldrb	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d108      	bne.n	8002632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e007      	b.n	8002642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0208 	bic.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7f5b      	ldrb	r3, [r3, #29]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0204 	orr.w	r2, r2, #4
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e007      	b.n	800266c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	ea42 0103 	orr.w	r1, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d003      	beq.n	80026d2 <HAL_CAN_ConfigFilter+0x26>
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	f040 80be 	bne.w	800284e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026d2:	4b65      	ldr	r3, [pc, #404]	@ (8002868 <HAL_CAN_ConfigFilter+0x1bc>)
 80026d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2201      	movs	r2, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	401a      	ands	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d123      	bne.n	800277c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002756:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3248      	adds	r2, #72	@ 0x48
 800275c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002770:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	3348      	adds	r3, #72	@ 0x48
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d122      	bne.n	80027ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3248      	adds	r2, #72	@ 0x48
 80027aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	3348      	adds	r3, #72	@ 0x48
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80027e4:	e007      	b.n	80027f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002810:	e007      	b.n	8002822 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	431a      	orrs	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	431a      	orrs	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002840:	f023 0201 	bic.w	r2, r3, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e006      	b.n	800285c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40006400 	.word	0x40006400

0800286c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d12e      	bne.n	80028de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002898:	f7ff fb7a 	bl	8001f90 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800289e:	e012      	b.n	80028c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a0:	f7ff fb76 	bl	8001f90 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d90b      	bls.n	80028c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2205      	movs	r2, #5
 80028be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e012      	b.n	80028ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e5      	bne.n	80028a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e006      	b.n	80028ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002908:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d003      	beq.n	8002920 <HAL_CAN_AddTxMessage+0x2c>
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	2b02      	cmp	r3, #2
 800291c:	f040 80ad 	bne.w	8002a7a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8095 	beq.w	8002a6a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	0e1b      	lsrs	r3, r3, #24
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002966:	68f9      	ldr	r1, [r7, #12]
 8002968:	6809      	ldr	r1, [r1, #0]
 800296a:	431a      	orrs	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3318      	adds	r3, #24
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	440b      	add	r3, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00f      	b.n	8002998 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002982:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800298c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3318      	adds	r3, #24
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	440b      	add	r3, r1
 8002996:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3318      	adds	r3, #24
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	440b      	add	r3, r1
 80029a8:	3304      	adds	r3, #4
 80029aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	7d1b      	ldrb	r3, [r3, #20]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d111      	bne.n	80029d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3318      	adds	r3, #24
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	4413      	add	r3, r2
 80029c0:	3304      	adds	r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6811      	ldr	r1, [r2, #0]
 80029c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3318      	adds	r3, #24
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	440b      	add	r3, r1
 80029d4:	3304      	adds	r3, #4
 80029d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3307      	adds	r3, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	061a      	lsls	r2, r3, #24
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3306      	adds	r3, #6
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3305      	adds	r3, #5
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	4313      	orrs	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	3204      	adds	r2, #4
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	4610      	mov	r0, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	ea43 0200 	orr.w	r2, r3, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3303      	adds	r3, #3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	061a      	lsls	r2, r3, #24
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	4610      	mov	r0, r2
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	ea43 0200 	orr.w	r2, r3, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4413      	add	r3, r2
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	6811      	ldr	r1, [r2, #0]
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	440b      	add	r3, r1
 8002a64:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e00e      	b.n	8002a88 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e006      	b.n	8002a88 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3724      	adds	r7, #36	@ 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d003      	beq.n	8002ab8 <HAL_CAN_GetRxMessage+0x24>
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 8103 	bne.w	8002cbe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0f7      	b.n	8002ccc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0e8      	b.n	8002ccc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	331b      	adds	r3, #27
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0204 	and.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	331b      	adds	r3, #27
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0d5b      	lsrs	r3, r3, #21
 8002b28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e00b      	b.n	8002b4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	331b      	adds	r3, #27
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	331b      	adds	r3, #27
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	4413      	add	r3, r2
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0202 	and.w	r2, r3, #2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	331b      	adds	r3, #27
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	e00b      	b.n	8002b98 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	331b      	adds	r3, #27
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0a1a      	lsrs	r2, r3, #8
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0c1a      	lsrs	r2, r3, #16
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e1a      	lsrs	r2, r3, #24
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	3303      	adds	r3, #3
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0a1a      	lsrs	r2, r3, #8
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3305      	adds	r3, #5
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0c1a      	lsrs	r2, r3, #16
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3306      	adds	r3, #6
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e1a      	lsrs	r2, r3, #24
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3307      	adds	r3, #7
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e007      	b.n	8002cba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0220 	orr.w	r2, r2, #32
 8002cb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e006      	b.n	8002ccc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <HAL_CAN_ActivateNotification+0x1e>
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d109      	bne.n	8002d0a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6959      	ldr	r1, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e006      	b.n	8002d18 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	@ 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07c      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d023      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f983 	bl	8003092 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d8c:	e016      	b.n	8002dbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	e00c      	b.n	8002dbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db4:	e002      	b.n	8002dbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f989 	bl	80030ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f963 	bl	80030a6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002de0:	e016      	b.n	8002e10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	e00c      	b.n	8002e10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e08:	e002      	b.n	8002e10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f969 	bl	80030e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d024      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f943 	bl	80030ba <HAL_CAN_TxMailbox2CompleteCallback>
 8002e34:	e016      	b.n	8002e64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	e00c      	b.n	8002e64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5c:	e002      	b.n	8002e64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f949 	bl	80030f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2210      	movs	r2, #16
 8002e86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f930 	bl	800310a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe f8a0 	bl	8001008 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2208      	movs	r2, #8
 8002f06:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f912 	bl	8003132 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8f9 	bl	800311e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8fc 	bl	8003146 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2208      	movs	r2, #8
 8002f68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8f5 	bl	800315a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d07b      	beq.n	8003072 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d072      	beq.n	800306a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	f043 0304 	orr.w	r3, r3, #4
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d043      	beq.n	800306a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03e      	beq.n	800306a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff2:	2b60      	cmp	r3, #96	@ 0x60
 8002ff4:	d02b      	beq.n	800304e <HAL_CAN_IRQHandler+0x32a>
 8002ff6:	2b60      	cmp	r3, #96	@ 0x60
 8002ff8:	d82e      	bhi.n	8003058 <HAL_CAN_IRQHandler+0x334>
 8002ffa:	2b50      	cmp	r3, #80	@ 0x50
 8002ffc:	d022      	beq.n	8003044 <HAL_CAN_IRQHandler+0x320>
 8002ffe:	2b50      	cmp	r3, #80	@ 0x50
 8003000:	d82a      	bhi.n	8003058 <HAL_CAN_IRQHandler+0x334>
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d019      	beq.n	800303a <HAL_CAN_IRQHandler+0x316>
 8003006:	2b40      	cmp	r3, #64	@ 0x40
 8003008:	d826      	bhi.n	8003058 <HAL_CAN_IRQHandler+0x334>
 800300a:	2b30      	cmp	r3, #48	@ 0x30
 800300c:	d010      	beq.n	8003030 <HAL_CAN_IRQHandler+0x30c>
 800300e:	2b30      	cmp	r3, #48	@ 0x30
 8003010:	d822      	bhi.n	8003058 <HAL_CAN_IRQHandler+0x334>
 8003012:	2b10      	cmp	r3, #16
 8003014:	d002      	beq.n	800301c <HAL_CAN_IRQHandler+0x2f8>
 8003016:	2b20      	cmp	r3, #32
 8003018:	d005      	beq.n	8003026 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800301a:	e01d      	b.n	8003058 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003024:	e019      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800302e:	e014      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f043 0320 	orr.w	r3, r3, #32
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003038:	e00f      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003042:	e00a      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800304c:	e005      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003056:	e000      	b.n	800305a <HAL_CAN_IRQHandler+0x336>
            break;
 8003058:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003068:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2204      	movs	r2, #4
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f872 	bl	800316e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	@ 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4907      	ldr	r1, [pc, #28]	@ (8003220 <__NVIC_EnableIRQ+0x38>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100

08003224 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	2b00      	cmp	r3, #0
 8003234:	db12      	blt.n	800325c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	490a      	ldr	r1, [pc, #40]	@ (8003268 <__NVIC_DisableIRQ+0x44>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2001      	movs	r0, #1
 8003246:	fa00 f202 	lsl.w	r2, r0, r2
 800324a:	3320      	adds	r3, #32
 800324c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003250:	f3bf 8f4f 	dsb	sy
}
 8003254:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003256:	f3bf 8f6f 	isb	sy
}
 800325a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	@ (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff05 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003394:	f7ff ff1a 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff8e 	bl	80032c0 <NVIC_EncodePriority>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff5d 	bl	800326c <__NVIC_SetPriority>
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff0d 	bl	80031e8 <__NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff1d 	bl	8003224 <__NVIC_DisableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff94 	bl	8003328 <SysTick_Config>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7fe fdba 	bl	8001f90 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e099      	b.n	800355c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003448:	e00f      	b.n	800346a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344a:	f7fe fda1 	bl	8001f90 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b05      	cmp	r3, #5
 8003456:	d908      	bls.n	800346a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e078      	b.n	800355c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e8      	bne.n	800344a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <HAL_DMA_Init+0x158>)
 8003484:	4013      	ands	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d117      	bne.n	800352e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f9e9 	bl	80038e8 <DMA_CheckFifoParam>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800352a:	2301      	movs	r3, #1
 800352c:	e016      	b.n	800355c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9a0 	bl	800387c <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	223f      	movs	r2, #63	@ 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f010803f 	.word	0xf010803f

08003568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003574:	4b8e      	ldr	r3, [pc, #568]	@ (80037b0 <HAL_DMA_IRQHandler+0x248>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a8e      	ldr	r2, [pc, #568]	@ (80037b4 <HAL_DMA_IRQHandler+0x24c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0a9b      	lsrs	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003592:	2208      	movs	r2, #8
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01a      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	2201      	movs	r2, #1
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2204      	movs	r2, #4
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	2210      	movs	r2, #16
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d043      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03c      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	2210      	movs	r2, #16
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d024      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e01f      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0208 	bic.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	2220      	movs	r2, #32
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 808f 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8087 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	2220      	movs	r2, #32
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d136      	bne.n	8003780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0216 	bic.w	r2, r2, #22
 8003720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_DMA_IRQHandler+0x1da>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0208 	bic.w	r2, r2, #8
 8003750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	223f      	movs	r2, #63	@ 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d07e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
        }
        return;
 800377e:	e079      	b.n	8003874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01d      	beq.n	80037ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e02c      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
 80037ae:	bf00      	nop
 80037b0:	20000008 	.word	0x20000008
 80037b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e01e      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0210 	bic.w	r2, r2, #16
 80037e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	d032      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2205      	movs	r2, #5
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3301      	adds	r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d307      	bcc.n	8003850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f2      	bne.n	8003834 <HAL_DMA_IRQHandler+0x2cc>
 800384e:	e000      	b.n	8003852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e000      	b.n	8003876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003874:	bf00      	nop
    }
  }
}
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3b10      	subs	r3, #16
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <DMA_CalcBaseAndBitshift+0x64>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003896:	4a13      	ldr	r2, [pc, #76]	@ (80038e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d909      	bls.n	80038be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	1d1a      	adds	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80038bc:	e007      	b.n	80038ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	aaaaaaab 	.word	0xaaaaaaab
 80038e4:	080055fc 	.word	0x080055fc

080038e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11f      	bne.n	8003942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d856      	bhi.n	80039b6 <DMA_CheckFifoParam+0xce>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <DMA_CheckFifoParam+0x28>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003921 	.word	0x08003921
 8003914:	08003933 	.word	0x08003933
 8003918:	08003921 	.word	0x08003921
 800391c:	080039b7 	.word	0x080039b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d046      	beq.n	80039ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e043      	b.n	80039ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800393a:	d140      	bne.n	80039be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e03d      	b.n	80039be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394a:	d121      	bne.n	8003990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d837      	bhi.n	80039c2 <DMA_CheckFifoParam+0xda>
 8003952:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <DMA_CheckFifoParam+0x70>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	08003969 	.word	0x08003969
 800395c:	0800396f 	.word	0x0800396f
 8003960:	08003969 	.word	0x08003969
 8003964:	08003981 	.word	0x08003981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e030      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d025      	beq.n	80039c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397e:	e022      	b.n	80039c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003988:	d11f      	bne.n	80039ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800398e:	e01c      	b.n	80039ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d903      	bls.n	800399e <DMA_CheckFifoParam+0xb6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800399c:	e018      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      break;
 80039a2:	e015      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e00b      	b.n	80039ce <DMA_CheckFifoParam+0xe6>
      break;
 80039b6:	bf00      	nop
 80039b8:	e00a      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ba:	bf00      	nop
 80039bc:	e008      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
 80039c0:	e006      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e004      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e002      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
    }
  } 
  
  return status; 
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	@ 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	e16b      	b.n	8003cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f040 815a 	bne.w	8003cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d005      	beq.n	8003a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d130      	bne.n	8003a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 0201 	and.w	r2, r3, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d017      	beq.n	8003ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d123      	bne.n	8003b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	220f      	movs	r2, #15
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0203 	and.w	r2, r3, #3
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80b4 	beq.w	8003cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b60      	ldr	r3, [pc, #384]	@ (8003cec <HAL_GPIO_Init+0x30c>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cec <HAL_GPIO_Init+0x30c>)
 8003b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b76:	4b5d      	ldr	r3, [pc, #372]	@ (8003cec <HAL_GPIO_Init+0x30c>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b82:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf0 <HAL_GPIO_Init+0x310>)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	3302      	adds	r3, #2
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	220f      	movs	r2, #15
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	@ (8003cf4 <HAL_GPIO_Init+0x314>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02b      	beq.n	8003c06 <HAL_GPIO_Init+0x226>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a51      	ldr	r2, [pc, #324]	@ (8003cf8 <HAL_GPIO_Init+0x318>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d025      	beq.n	8003c02 <HAL_GPIO_Init+0x222>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	@ (8003cfc <HAL_GPIO_Init+0x31c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <HAL_GPIO_Init+0x21e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d00 <HAL_GPIO_Init+0x320>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d019      	beq.n	8003bfa <HAL_GPIO_Init+0x21a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d04 <HAL_GPIO_Init+0x324>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x216>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d08 <HAL_GPIO_Init+0x328>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_GPIO_Init+0x212>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8003d0c <HAL_GPIO_Init+0x32c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <HAL_GPIO_Init+0x20e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d10 <HAL_GPIO_Init+0x330>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_GPIO_Init+0x20a>
 8003be6:	2307      	movs	r3, #7
 8003be8:	e00e      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bea:	2308      	movs	r3, #8
 8003bec:	e00c      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bee:	2306      	movs	r3, #6
 8003bf0:	e00a      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	e008      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x228>
 8003c06:	2300      	movs	r3, #0
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	@ (8003cf0 <HAL_GPIO_Init+0x310>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b3b      	ldr	r3, [pc, #236]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4a:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c50:	4b30      	ldr	r3, [pc, #192]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c74:	4a27      	ldr	r2, [pc, #156]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c7a:	4b26      	ldr	r3, [pc, #152]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc8:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <HAL_GPIO_Init+0x334>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	f67f ae90 	bls.w	80039fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3724      	adds	r7, #36	@ 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40021400 	.word	0x40021400
 8003d0c:	40021800 	.word	0x40021800
 8003d10:	40021c00 	.word	0x40021c00
 8003d14:	40013c00 	.word	0x40013c00

08003d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e001      	b.n	8003d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d64:	e003      	b.n	8003d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	041a      	lsls	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e267      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dce:	4b88      	ldr	r3, [pc, #544]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b85      	ldr	r3, [pc, #532]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b82      	ldr	r3, [pc, #520]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e242      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b76      	ldr	r3, [pc, #472]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b70      	ldr	r3, [pc, #448]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b69      	ldr	r3, [pc, #420]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b66      	ldr	r3, [pc, #408]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a65      	ldr	r2, [pc, #404]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe f892 	bl	8001f90 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe f88e 	bl	8001f90 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e207      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe f87e 	bl	8001f90 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe f87a 	bl	8001f90 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1f3      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b51      	ldr	r3, [pc, #324]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b44      	ldr	r3, [pc, #272]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c7      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4937      	ldr	r1, [pc, #220]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b34      	ldr	r3, [pc, #208]	@ (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe f833 	bl	8001f90 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fe f82f 	bl	8001f90 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a8      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4925      	ldr	r1, [pc, #148]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe f812 	bl	8001f90 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fe f80e 	bl	8001f90 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e187      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d036      	beq.n	8004008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd fff2 	bl	8001f90 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd ffee 	bl	8001f90 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e167      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e01b      	b.n	8004008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd ffdb 	bl	8001f90 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e00e      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fd ffd7 	bl	8001f90 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d907      	bls.n	8003ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e150      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	4b88      	ldr	r3, [pc, #544]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ea      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8097 	beq.w	8004144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b81      	ldr	r3, [pc, #516]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	4b7d      	ldr	r3, [pc, #500]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a7c      	ldr	r2, [pc, #496]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b7a      	ldr	r3, [pc, #488]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b77      	ldr	r3, [pc, #476]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b74      	ldr	r3, [pc, #464]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a73      	ldr	r2, [pc, #460]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fd ff97 	bl	8001f90 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd ff93 	bl	8001f90 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e10c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b6a      	ldr	r3, [pc, #424]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x2ea>
 800408c:	4b64      	ldr	r3, [pc, #400]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004090:	4a63      	ldr	r2, [pc, #396]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	@ 0x70
 8004098:	e01c      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x30c>
 80040a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 80040bc:	4b58      	ldr	r3, [pc, #352]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	4a57      	ldr	r2, [pc, #348]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c8:	4b55      	ldr	r3, [pc, #340]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040cc:	4a54      	ldr	r2, [pc, #336]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ce:	f023 0304 	bic.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd ff58 	bl	8001f90 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd ff54 	bl	8001f90 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0cb      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	4b49      	ldr	r3, [pc, #292]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_RCC_OscConfig+0x334>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fd ff42 	bl	8001f90 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd ff3e 	bl	8001f90 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0b5      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	4b3e      	ldr	r3, [pc, #248]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ee      	bne.n	8004110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b39      	ldr	r3, [pc, #228]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	4a38      	ldr	r2, [pc, #224]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a1 	beq.w	8004290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414e:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d05c      	beq.n	8004214 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d141      	bne.n	80041e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd ff12 	bl	8001f90 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd ff0e 	bl	8001f90 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e087      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	491b      	ldr	r1, [pc, #108]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fd fee7 	bl	8001f90 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fd fee3 	bl	8001f90 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e05c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x416>
 80041e4:	e054      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fd fed0 	bl	8001f90 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd fecc 	bl	8001f90 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e045      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x444>
 8004212:	e03d      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e038      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8004220:	40023800 	.word	0x40023800
 8004224:	40007000 	.word	0x40007000
 8004228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <HAL_RCC_OscConfig+0x4ec>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d028      	beq.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d121      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d11a      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cc      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b68      	ldr	r3, [pc, #416]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90c      	bls.n	80042dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b65      	ldr	r3, [pc, #404]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b63      	ldr	r3, [pc, #396]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b8      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f4:	4b59      	ldr	r3, [pc, #356]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a58      	ldr	r2, [pc, #352]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800430c:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a52      	ldr	r2, [pc, #328]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b50      	ldr	r3, [pc, #320]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	494d      	ldr	r1, [pc, #308]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d044      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	2b03      	cmp	r3, #3
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436e:	4b3b      	ldr	r3, [pc, #236]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e067      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b37      	ldr	r3, [pc, #220]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4934      	ldr	r1, [pc, #208]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fd fdfe 	bl	8001f90 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fd fdfa 	bl	8001f90 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b2b      	ldr	r3, [pc, #172]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20c      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b22      	ldr	r3, [pc, #136]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e032      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f4:	4b19      	ldr	r3, [pc, #100]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4916      	ldr	r1, [pc, #88]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	490e      	ldr	r1, [pc, #56]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004426:	f000 f821 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800442a:	4602      	mov	r2, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	490a      	ldr	r1, [pc, #40]	@ (8004460 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	5ccb      	ldrb	r3, [r1, r3]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a09      	ldr	r2, [pc, #36]	@ (8004464 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004442:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fd5e 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00
 800445c:	40023800 	.word	0x40023800
 8004460:	080055e4 	.word	0x080055e4
 8004464:	20000008 	.word	0x20000008
 8004468:	2000000c 	.word	0x2000000c

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b090      	sub	sp, #64	@ 0x40
 8004472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004484:	4b59      	ldr	r3, [pc, #356]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x40>
 8004490:	2b08      	cmp	r3, #8
 8004492:	f200 80a1 	bhi.w	80045d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x34>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800449e:	e09b      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b53      	ldr	r3, [pc, #332]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044a4:	e09b      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a6:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044aa:	e098      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b6:	4b4d      	ldr	r3, [pc, #308]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d028      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4b4a      	ldr	r3, [pc, #296]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	2200      	movs	r2, #0
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044d4:	2100      	movs	r1, #0
 80044d6:	4b47      	ldr	r3, [pc, #284]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d8:	fb03 f201 	mul.w	r2, r3, r1
 80044dc:	2300      	movs	r3, #0
 80044de:	fb00 f303 	mul.w	r3, r0, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	4a43      	ldr	r2, [pc, #268]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80044e6:	fba0 1202 	umull	r1, r2, r0, r2
 80044ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ec:	460a      	mov	r2, r1
 80044ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f2:	4413      	add	r3, r2
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	2200      	movs	r2, #0
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	61fa      	str	r2, [r7, #28]
 80044fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004506:	f7fb fe67 	bl	80001d8 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4613      	mov	r3, r2
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004512:	e053      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004514:	4b35      	ldr	r3, [pc, #212]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	2200      	movs	r2, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	617a      	str	r2, [r7, #20]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004526:	f04f 0b00 	mov.w	fp, #0
 800452a:	4652      	mov	r2, sl
 800452c:	465b      	mov	r3, fp
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	ebb2 080a 	subs.w	r8, r2, sl
 8004546:	eb63 090b 	sbc.w	r9, r3, fp
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004556:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800455a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800455e:	ebb2 0408 	subs.w	r4, r2, r8
 8004562:	eb63 0509 	sbc.w	r5, r3, r9
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	00eb      	lsls	r3, r5, #3
 8004570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004574:	00e2      	lsls	r2, r4, #3
 8004576:	4614      	mov	r4, r2
 8004578:	461d      	mov	r5, r3
 800457a:	eb14 030a 	adds.w	r3, r4, sl
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	eb45 030b 	adc.w	r3, r5, fp
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004592:	4629      	mov	r1, r5
 8004594:	028b      	lsls	r3, r1, #10
 8004596:	4621      	mov	r1, r4
 8004598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800459c:	4621      	mov	r1, r4
 800459e:	028a      	lsls	r2, r1, #10
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a6:	2200      	movs	r2, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	60fa      	str	r2, [r7, #12]
 80045ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b0:	f7fb fe12 	bl	80001d8 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045bc:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x180>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045d6:	e002      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3740      	adds	r7, #64	@ 0x40
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	017d7840 	.word	0x017d7840

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	@ (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000008 	.word	0x20000008

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	@ (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	080055f4 	.word	0x080055f4

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	@ (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	080055f4 	.word	0x080055f4

08004660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd fafe 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 f9b6 	bl	8004a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d001      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e04e      	b.n	80047b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	@ (80047c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004742:	d01d      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_TIM_Base_Start_IT+0xdc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d111      	bne.n	80047a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d010      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	e007      	b.n	80047b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40001800 	.word	0x40001800

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0202 	mvn.w	r2, #2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8d2 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8c4 	bl	80049c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8d5 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d020      	beq.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8ac 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f89e 	bl	80049c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8af 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0208 	mvn.w	r2, #8
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2204      	movs	r2, #4
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f886 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f878 	bl	80049c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f889 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2208      	movs	r2, #8
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f860 	bl	80049d4 <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f852 	bl	80049c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f863 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc fe40 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f982 	bl	8004c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f834 	bl	80049fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0220 	mvn.w	r2, #32
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f954 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a46      	ldr	r2, [pc, #280]	@ (8004b3c <TIM_Base_SetConfig+0x12c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2e:	d00f      	beq.n	8004a50 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a43      	ldr	r2, [pc, #268]	@ (8004b40 <TIM_Base_SetConfig+0x130>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a42      	ldr	r2, [pc, #264]	@ (8004b44 <TIM_Base_SetConfig+0x134>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a41      	ldr	r2, [pc, #260]	@ (8004b48 <TIM_Base_SetConfig+0x138>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a40      	ldr	r2, [pc, #256]	@ (8004b4c <TIM_Base_SetConfig+0x13c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a35      	ldr	r2, [pc, #212]	@ (8004b3c <TIM_Base_SetConfig+0x12c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d02b      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d027      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a32      	ldr	r2, [pc, #200]	@ (8004b40 <TIM_Base_SetConfig+0x130>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d023      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a31      	ldr	r2, [pc, #196]	@ (8004b44 <TIM_Base_SetConfig+0x134>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a30      	ldr	r2, [pc, #192]	@ (8004b48 <TIM_Base_SetConfig+0x138>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01b      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8004b4c <TIM_Base_SetConfig+0x13c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d017      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2e      	ldr	r2, [pc, #184]	@ (8004b50 <TIM_Base_SetConfig+0x140>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b54 <TIM_Base_SetConfig+0x144>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00f      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b58 <TIM_Base_SetConfig+0x148>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	@ (8004b5c <TIM_Base_SetConfig+0x14c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b60 <TIM_Base_SetConfig+0x150>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <TIM_Base_SetConfig+0x154>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d108      	bne.n	8004ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a10      	ldr	r2, [pc, #64]	@ (8004b3c <TIM_Base_SetConfig+0x12c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0xf8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a12      	ldr	r2, [pc, #72]	@ (8004b4c <TIM_Base_SetConfig+0x13c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d103      	bne.n	8004b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]
  }
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40001800 	.word	0x40001800
 8004b60:	40001c00 	.word	0x40001c00
 8004b64:	40002000 	.word	0x40002000

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e05a      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	@ (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40010400 	.word	0x40010400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40001800 	.word	0x40001800

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e042      	b.n	8004d20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fd f85a 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	@ 0x24
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f991 	bl	8004ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	@ 0x28
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d175      	bne.n	8004e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Transmit+0x2c>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e06e      	b.n	8004e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2221      	movs	r2, #33	@ 0x21
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d66:	f7fd f913 	bl	8001f90 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Transmit+0x6c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d9c:	e02e      	b.n	8004dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	@ 0x80
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f866 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e03a      	b.n	8004e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3302      	adds	r3, #2
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e007      	b.n	8004dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3301      	adds	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1cb      	bne.n	8004d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2140      	movs	r1, #64	@ 0x40
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f832 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e006      	b.n	8004e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	b2db      	uxtb	r3, r3
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8a:	e03b      	b.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d037      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fd f87c 	bl	8001f90 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e03a      	b.n	8004f24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d023      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b80      	cmp	r3, #128	@ 0x80
 8004ec0:	d020      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	d01d      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d116      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f81d 	bl	8004f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e00f      	b.n	8004f24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d0b4      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b095      	sub	sp, #84	@ 0x54
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f54:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d119      	bne.n	8004fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc4:	61ba      	str	r2, [r7, #24]
 8004fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fe6:	bf00      	nop
 8004fe8:	3754      	adds	r7, #84	@ 0x54
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff8:	b0c0      	sub	sp, #256	@ 0x100
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	68d9      	ldr	r1, [r3, #12]
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	ea40 0301 	orr.w	r3, r0, r1
 800501c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	431a      	orrs	r2, r3
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	431a      	orrs	r2, r3
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800504c:	f021 010c 	bic.w	r1, r1, #12
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800505a:	430b      	orrs	r3, r1
 800505c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	6999      	ldr	r1, [r3, #24]
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	ea40 0301 	orr.w	r3, r0, r1
 800507a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <UART_SetConfig+0x2cc>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d005      	beq.n	8005094 <UART_SetConfig+0xa0>
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b8d      	ldr	r3, [pc, #564]	@ (80052c4 <UART_SetConfig+0x2d0>)
 8005090:	429a      	cmp	r2, r3
 8005092:	d104      	bne.n	800509e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7ff fad0 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8005098:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800509c:	e003      	b.n	80050a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509e:	f7ff fab7 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 80050a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b0:	f040 810c 	bne.w	80052cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ce:	415b      	adcs	r3, r3
 80050d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d6:	4621      	mov	r1, r4
 80050d8:	eb12 0801 	adds.w	r8, r2, r1
 80050dc:	4629      	mov	r1, r5
 80050de:	eb43 0901 	adc.w	r9, r3, r1
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f6:	4690      	mov	r8, r2
 80050f8:	4699      	mov	r9, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	eb18 0303 	adds.w	r3, r8, r3
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005104:	462b      	mov	r3, r5
 8005106:	eb49 0303 	adc.w	r3, r9, r3
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800511a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005122:	460b      	mov	r3, r1
 8005124:	18db      	adds	r3, r3, r3
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
 8005128:	4613      	mov	r3, r2
 800512a:	eb42 0303 	adc.w	r3, r2, r3
 800512e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005154:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005164:	415b      	adcs	r3, r3
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800516c:	4641      	mov	r1, r8
 800516e:	eb12 0a01 	adds.w	sl, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb43 0b01 	adc.w	fp, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800518c:	4692      	mov	sl, r2
 800518e:	469b      	mov	fp, r3
 8005190:	4643      	mov	r3, r8
 8005192:	eb1a 0303 	adds.w	r3, sl, r3
 8005196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800519a:	464b      	mov	r3, r9
 800519c:	eb4b 0303 	adc.w	r3, fp, r3
 80051a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b8:	460b      	mov	r3, r1
 80051ba:	18db      	adds	r3, r3, r3
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	4613      	mov	r3, r2
 80051c0:	eb42 0303 	adc.w	r3, r2, r3
 80051c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ce:	f7fb f803 	bl	80001d8 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051da:	fba3 2301 	umull	r2, r3, r3, r1
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2264      	movs	r2, #100	@ 0x64
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ee:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051f0:	fba3 2302 	umull	r2, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051fc:	441c      	add	r4, r3
 80051fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005208:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800520c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005218:	415b      	adcs	r3, r3
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005220:	4641      	mov	r1, r8
 8005222:	1851      	adds	r1, r2, r1
 8005224:	6339      	str	r1, [r7, #48]	@ 0x30
 8005226:	4649      	mov	r1, r9
 8005228:	414b      	adcs	r3, r1
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005238:	4659      	mov	r1, fp
 800523a:	00cb      	lsls	r3, r1, #3
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005242:	4651      	mov	r1, sl
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	4603      	mov	r3, r0
 800524c:	4642      	mov	r2, r8
 800524e:	189b      	adds	r3, r3, r2
 8005250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005254:	464b      	mov	r3, r9
 8005256:	460a      	mov	r2, r1
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800526c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005274:	460b      	mov	r3, r1
 8005276:	18db      	adds	r3, r3, r3
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527a:	4613      	mov	r3, r2
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800528a:	f7fa ffa5 	bl	80001d8 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005294:	fba3 1302 	umull	r1, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2164      	movs	r1, #100	@ 0x64
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	3332      	adds	r3, #50	@ 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 0207 	and.w	r2, r3, #7
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052bc:	e106      	b.n	80054cc <UART_SetConfig+0x4d8>
 80052be:	bf00      	nop
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	6239      	str	r1, [r7, #32]
 80052e6:	415b      	adcs	r3, r3
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ee:	4641      	mov	r1, r8
 80052f0:	1854      	adds	r4, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb43 0501 	adc.w	r5, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005314:	464b      	mov	r3, r9
 8005316:	eb45 0303 	adc.w	r3, r5, r3
 800531a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800532a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800533a:	4629      	mov	r1, r5
 800533c:	008b      	lsls	r3, r1, #2
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005344:	4621      	mov	r1, r4
 8005346:	008a      	lsls	r2, r1, #2
 8005348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800534c:	f7fa ff44 	bl	80001d8 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4b60      	ldr	r3, [pc, #384]	@ (80054d8 <UART_SetConfig+0x4e4>)
 8005356:	fba3 2302 	umull	r2, r3, r3, r2
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	011c      	lsls	r4, r3, #4
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005368:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800536c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	1891      	adds	r1, r2, r2
 8005376:	61b9      	str	r1, [r7, #24]
 8005378:	415b      	adcs	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	4641      	mov	r1, r8
 8005382:	1851      	adds	r1, r2, r1
 8005384:	6139      	str	r1, [r7, #16]
 8005386:	4649      	mov	r1, r9
 8005388:	414b      	adcs	r3, r1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005398:	4659      	mov	r1, fp
 800539a:	00cb      	lsls	r3, r1, #3
 800539c:	4651      	mov	r1, sl
 800539e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a2:	4651      	mov	r1, sl
 80053a4:	00ca      	lsls	r2, r1, #3
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	4642      	mov	r2, r8
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b4:	464b      	mov	r3, r9
 80053b6:	460a      	mov	r2, r1
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053d8:	4649      	mov	r1, r9
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	4641      	mov	r1, r8
 80053de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e2:	4641      	mov	r1, r8
 80053e4:	008a      	lsls	r2, r1, #2
 80053e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ea:	f7fa fef5 	bl	80001d8 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80053f6:	fba3 2301 	umull	r2, r3, r3, r1
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2264      	movs	r2, #100	@ 0x64
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	1acb      	subs	r3, r1, r3
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	3332      	adds	r3, #50	@ 0x32
 8005408:	4a33      	ldr	r2, [pc, #204]	@ (80054d8 <UART_SetConfig+0x4e4>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005414:	441c      	add	r4, r3
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	673b      	str	r3, [r7, #112]	@ 0x70
 800541e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005420:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	1891      	adds	r1, r2, r2
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	415b      	adcs	r3, r3
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005434:	4641      	mov	r1, r8
 8005436:	1851      	adds	r1, r2, r1
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	4649      	mov	r1, r9
 800543c:	414b      	adcs	r3, r1
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800544c:	4659      	mov	r1, fp
 800544e:	00cb      	lsls	r3, r1, #3
 8005450:	4651      	mov	r1, sl
 8005452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005456:	4651      	mov	r1, sl
 8005458:	00ca      	lsls	r2, r1, #3
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	4603      	mov	r3, r0
 8005460:	4642      	mov	r2, r8
 8005462:	189b      	adds	r3, r3, r2
 8005464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005466:	464b      	mov	r3, r9
 8005468:	460a      	mov	r2, r1
 800546a:	eb42 0303 	adc.w	r3, r2, r3
 800546e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	663b      	str	r3, [r7, #96]	@ 0x60
 800547a:	667a      	str	r2, [r7, #100]	@ 0x64
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005488:	4649      	mov	r1, r9
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	4641      	mov	r1, r8
 800548e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005492:	4641      	mov	r1, r8
 8005494:	008a      	lsls	r2, r1, #2
 8005496:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800549a:	f7fa fe9d 	bl	80001d8 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	2164      	movs	r1, #100	@ 0x64
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	3332      	adds	r3, #50	@ 0x32
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4422      	add	r2, r4
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d8:	51eb851f 	.word	0x51eb851f

080054dc <memset>:
 80054dc:	4402      	add	r2, r0
 80054de:	4603      	mov	r3, r0
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d100      	bne.n	80054e6 <memset+0xa>
 80054e4:	4770      	bx	lr
 80054e6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ea:	e7f9      	b.n	80054e0 <memset+0x4>

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	@ (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005530 <__libc_init_array+0x44>)
 8005500:	f000 f818 	bl	8005534 <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	0800560c 	.word	0x0800560c
 8005528:	0800560c 	.word	0x0800560c
 800552c:	0800560c 	.word	0x0800560c
 8005530:	08005610 	.word	0x08005610

08005534 <_init>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr

08005540 <_fini>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr
