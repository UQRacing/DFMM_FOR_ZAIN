
DFMM_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005628  08005628  00006628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005630  08005630  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005634  08005634  00006634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005638  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          000004bc  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012821  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d36  00000000  00000000  00019865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0001c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c68  00000000  00000000  0001d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225cd  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c27  00000000  00000000  000407d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d68  00000000  00000000  000553fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128164  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004224  00000000  00000000  001281a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005558 	.word	0x08005558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005558 	.word	0x08005558

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <setLED>:
uint16_t ASSI_Timecheck = 0;

int toggle = 0;

void setLED (int led, int RED, int GREEN, int BLUE)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	603b      	str	r3, [r7, #0]
    LED_Data[led][0] = led;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	b2d9      	uxtb	r1, r3
 80004ca:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <setLED+0x58>)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[led][1] = GREEN;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b2d9      	uxtb	r1, r3
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <setLED+0x58>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	460a      	mov	r2, r1
 80004e0:	705a      	strb	r2, [r3, #1]
    LED_Data[led][2] = RED;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <setLED+0x58>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	460a      	mov	r2, r1
 80004f0:	709a      	strb	r2, [r3, #2]
    LED_Data[led][3] = BLUE;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <setLED+0x58>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	460a      	mov	r2, r1
 8000500:	70da      	strb	r2, [r3, #3]
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000030 	.word	0x20000030

08000514 <ws2812_synchronous>:

void ws2812_synchronous (int GREEN, int RED, int BLUE)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	//Here I'm bit shifting the values from SetLED as the LED strip reads GRB values not RGB values
    uint32_t color = (GREEN << 8) | (RED<<4) | BLUE;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	61fb      	str	r3, [r7, #28]
    //Twice as many LED's lit up (i.e. if NUM_LED was 5, then sending 24 bytes for each LED (72 bits)
    //Would light up 10 LED's instead of 5 and these would be the wrong colour
    //Hence, I changed the sendData buffer to be a 12 byte array and this made the right number of LED's light up
    //But the colours being delivered are slightly off and the first LED turns green, (I'm not sure how to resolve this)
    uint8_t sendData[12];
    int indx = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 12; i >=0; i--)
 8000534:	230c      	movs	r3, #12
 8000536:	623b      	str	r3, [r7, #32]
 8000538:	e01b      	b.n	8000572 <ws2812_synchronous+0x5e>
    {
    	//The if statement below shifts the bit present to the least significant bit and checks if this is a 1 or 0
        if (((color >> i) & 0x01) == 1)
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	6a3b      	ldr	r3, [r7, #32]
 800053e:	fa22 f303 	lsr.w	r3, r2, r3
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <ws2812_synchronous+0x48>
            sendData[indx++] = 0b110;  // store 1
 800054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000550:	3328      	adds	r3, #40	@ 0x28
 8000552:	443b      	add	r3, r7
 8000554:	2206      	movs	r2, #6
 8000556:	f803 2c18 	strb.w	r2, [r3, #-24]
 800055a:	e007      	b.n	800056c <ws2812_synchronous+0x58>
        else
            sendData[indx++] = 0b100;  // store 0
 800055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	627a      	str	r2, [r7, #36]	@ 0x24
 8000562:	3328      	adds	r3, #40	@ 0x28
 8000564:	443b      	add	r3, r7
 8000566:	2204      	movs	r2, #4
 8000568:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 12; i >=0; i--)
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	3b01      	subs	r3, #1
 8000570:	623b      	str	r3, [r7, #32]
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dae0      	bge.n	800053a <ws2812_synchronous+0x26>
    }

    //Calling the DMA transmit function so that data can be sent
    //I'm using DMA as it results in the fastest data transfer and less lag
    HAL_UART_Transmit(&huart1, sendData, 12, HAL_MAX_DELAY);
 8000578:	f107 0110 	add.w	r1, r7, #16
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	220c      	movs	r2, #12
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <ws2812_synchronous+0x8c>)
 8000584:	f004 fbe2 	bl	8004d4c <HAL_UART_Transmit>
    //The line below only allows data to be transmitted again after the data beforehand has been transmitted
    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY); // Wait for DMA transfer to complete
 8000588:	bf00      	nop
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <ws2812_synchronous+0x8c>)
 800058c:	f004 fc69 	bl	8004e62 <HAL_UART_GetState>
 8000590:	4603      	mov	r3, r0
 8000592:	2b20      	cmp	r3, #32
 8000594:	d1f9      	bne.n	800058a <ws2812_synchronous+0x76>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000424 	.word	0x20000424

080005a4 <WS2812_Send>:

void WS2812_Send (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LED; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e016      	b.n	80005de <WS2812_Send+0x3a>
    {
        ws2812_synchronous(LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <WS2812_Send+0x50>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	4618      	mov	r0, r3
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <WS2812_Send+0x50>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <WS2812_Send+0x50>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	461a      	mov	r2, r3
 80005d4:	f7ff ff9e 	bl	8000514 <ws2812_synchronous>
    for (int i = 0; i < NUM_LED; i++)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b76      	cmp	r3, #118	@ 0x76
 80005e2:	dde5      	ble.n	80005b0 <WS2812_Send+0xc>
    }
    HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fcf1 	bl	8001fcc <HAL_Delay>
 // Wait for all data to be latched
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030

080005f8 <ASSI_Off>:
//The functions above are essential to driving the LED's.
//The functions below are specifically for the ASSI status


void ASSI_Off(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

		for (int i=0; i< NUM_LED; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e008      	b.n	8000616 <ASSI_Off+0x1e>
		{
			setLED(i, 0,0,0);
 8000604:	2300      	movs	r3, #0
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff54 	bl	80004b8 <setLED>
		for (int i=0; i< NUM_LED; i++)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b76      	cmp	r3, #118	@ 0x76
 800061a:	ddf3      	ble.n	8000604 <ASSI_Off+0xc>
		}
		WS2812_Send();
 800061c:	f7ff ffc2 	bl	80005a4 <WS2812_Send>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ASSI_Ready>:

void ASSI_Ready(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	//This keeps the LED strip a continous yello
		//for (int x = 0; x<250; x+=1) {
			for (int i=0; i<NUM_LED; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e008      	b.n	8000646 <ASSI_Ready+0x1e>
			{
				//This sets the LED's to yellow, weirdly one would expect this to turn the strip green
				//But this turns the lights yellow, some tuning may be required for different strips
				setLED(i,230,1,0);
 8000634:	2300      	movs	r3, #0
 8000636:	2201      	movs	r2, #1
 8000638:	21e6      	movs	r1, #230	@ 0xe6
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ff3c 	bl	80004b8 <setLED>
			for (int i=0; i<NUM_LED; i++)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b76      	cmp	r3, #118	@ 0x76
 800064a:	ddf3      	ble.n	8000634 <ASSI_Ready+0xc>
			}
			WS2812_Send();
 800064c:	f7ff ffaa 	bl	80005a4 <WS2812_Send>
		//}
	}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <ASSI_Driving>:

void ASSI_Driving(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	//This is yellow flashing lights
	//Setting the LED's yellow initially
	if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 200 && toggle == 0) {
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <ASSI_Driving+0xa8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <ASSI_Driving+0xac>)
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2bc8      	cmp	r3, #200	@ 0xc8
 800066c:	d91e      	bls.n	80006ac <ASSI_Driving+0x54>
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <ASSI_Driving+0xb0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11a      	bne.n	80006ac <ASSI_Driving+0x54>
		for (int i =0; i<NUM_LED; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e008      	b.n	800068e <ASSI_Driving+0x36>
		{
			setLED(i, 230, 1, 0);
 800067c:	2300      	movs	r3, #0
 800067e:	2201      	movs	r2, #1
 8000680:	21e6      	movs	r1, #230	@ 0xe6
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff18 	bl	80004b8 <setLED>
		for (int i =0; i<NUM_LED; i++)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b76      	cmp	r3, #118	@ 0x76
 8000692:	ddf3      	ble.n	800067c <ASSI_Driving+0x24>
		}
		//Sending this data to the strip
		WS2812_Send();
 8000694:	f7ff ff86 	bl	80005a4 <WS2812_Send>
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <ASSI_Driving+0xa8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <ASSI_Driving+0xac>)
 80006a2:	801a      	strh	r2, [r3, #0]
		toggle = 1;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <ASSI_Driving+0xb0>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
		}
		WS2812_Send();
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
		toggle = 0;
	}
}
 80006aa:	e025      	b.n	80006f8 <ASSI_Driving+0xa0>
	else if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 200 && toggle == 1) {
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <ASSI_Driving+0xa8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <ASSI_Driving+0xac>)
 80006b4:	8812      	ldrh	r2, [r2, #0]
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80006ba:	d91d      	bls.n	80006f8 <ASSI_Driving+0xa0>
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <ASSI_Driving+0xb0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d119      	bne.n	80006f8 <ASSI_Driving+0xa0>
		for (int i=0; i<NUM_LED; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	e008      	b.n	80006dc <ASSI_Driving+0x84>
			setLED(i, 0,0,0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	6838      	ldr	r0, [r7, #0]
 80006d2:	f7ff fef1 	bl	80004b8 <setLED>
		for (int i=0; i<NUM_LED; i++)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b76      	cmp	r3, #118	@ 0x76
 80006e0:	ddf3      	ble.n	80006ca <ASSI_Driving+0x72>
		WS2812_Send();
 80006e2:	f7ff ff5f 	bl	80005a4 <WS2812_Send>
		ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <ASSI_Driving+0xa8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <ASSI_Driving+0xac>)
 80006f0:	801a      	strh	r2, [r3, #0]
		toggle = 0;
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <ASSI_Driving+0xb0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000394 	.word	0x20000394
 8000704:	2000020c 	.word	0x2000020c
 8000708:	20000210 	.word	0x20000210

0800070c <ASSI_Emergency>:

void ASSI_Emergency(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
		//This is blue flashing lights
		//This is the colour data for a dark blue, light blue can be achieved by setLED(i,0,50,255);
		if (__HAL_TIM_GET_COUNTER(&htim7) - ASSI_Timecheck > 200 && toggle == 0) {
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <ASSI_Emergency+0xa8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000718:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <ASSI_Emergency+0xac>)
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000720:	d91e      	bls.n	8000760 <ASSI_Emergency+0x54>
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <ASSI_Emergency+0xb0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d11a      	bne.n	8000760 <ASSI_Emergency+0x54>
			//Setting the LED's blue initially
			for (int i =0; i<NUM_LED; i++)
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e008      	b.n	8000742 <ASSI_Emergency+0x36>
			{
				setLED(i, 0, 200, 255);
 8000730:	23ff      	movs	r3, #255	@ 0xff
 8000732:	22c8      	movs	r2, #200	@ 0xc8
 8000734:	2100      	movs	r1, #0
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff febe 	bl	80004b8 <setLED>
			for (int i =0; i<NUM_LED; i++)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b76      	cmp	r3, #118	@ 0x76
 8000746:	ddf3      	ble.n	8000730 <ASSI_Emergency+0x24>
				//The timings are slightly off hence why the G value is 100
			}
			//Sending this data to the strip
			WS2812_Send();
 8000748:	f7ff ff2c 	bl	80005a4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <ASSI_Emergency+0xb4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <ASSI_Emergency+0xac>)
 8000756:	801a      	strh	r2, [r3, #0]
			toggle = 1;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <ASSI_Emergency+0xb0>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
			}
			WS2812_Send();
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
			toggle = 0;
		}
}
 800075e:	e025      	b.n	80007ac <ASSI_Emergency+0xa0>
		else if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 80 && toggle == 1) {
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <ASSI_Emergency+0xb4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000766:	4a14      	ldr	r2, [pc, #80]	@ (80007b8 <ASSI_Emergency+0xac>)
 8000768:	8812      	ldrh	r2, [r2, #0]
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	2b50      	cmp	r3, #80	@ 0x50
 800076e:	d91d      	bls.n	80007ac <ASSI_Emergency+0xa0>
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <ASSI_Emergency+0xb0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d119      	bne.n	80007ac <ASSI_Emergency+0xa0>
			for (int i=0; i<NUM_LED; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	e008      	b.n	8000790 <ASSI_Emergency+0x84>
				setLED(i, 0,0,0);
 800077e:	2300      	movs	r3, #0
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	6838      	ldr	r0, [r7, #0]
 8000786:	f7ff fe97 	bl	80004b8 <setLED>
			for (int i=0; i<NUM_LED; i++)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b76      	cmp	r3, #118	@ 0x76
 8000794:	ddf3      	ble.n	800077e <ASSI_Emergency+0x72>
			WS2812_Send();
 8000796:	f7ff ff05 	bl	80005a4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <ASSI_Emergency+0xb4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <ASSI_Emergency+0xac>)
 80007a4:	801a      	strh	r2, [r3, #0]
			toggle = 0;
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <ASSI_Emergency+0xb0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200003dc 	.word	0x200003dc
 80007b8:	2000020c 	.word	0x2000020c
 80007bc:	20000210 	.word	0x20000210
 80007c0:	20000394 	.word	0x20000394

080007c4 <ASSI_Finished>:

void ASSI_Finished(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_COUNTER(&htim7) - ASSI_Timecheck > 1) {
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <ASSI_Finished+0x40>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <ASSI_Finished+0x44>)
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	1a9b      	subs	r3, r3, r2
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d910      	bls.n	80007fc <ASSI_Finished+0x38>

		for (int i=0; i<NUM_LED; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e008      	b.n	80007f2 <ASSI_Finished+0x2e>
		{
			//This sets the LED's to a blue colour
			setLED(i,0,200,255);
 80007e0:	23ff      	movs	r3, #255	@ 0xff
 80007e2:	22c8      	movs	r2, #200	@ 0xc8
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fe66 	bl	80004b8 <setLED>
		for (int i=0; i<NUM_LED; i++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b76      	cmp	r3, #118	@ 0x76
 80007f6:	ddf3      	ble.n	80007e0 <ASSI_Finished+0x1c>
		}
		WS2812_Send();
 80007f8:	f7ff fed4 	bl	80005a4 <WS2812_Send>
	}
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200003dc 	.word	0x200003dc
 8000808:	2000020c 	.word	0x2000020c

0800080c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800082a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800084e:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <MX_ADC1_Init+0xa0>)
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800086e:	f001 fbd1 	bl	8002014 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000878:	f001 f908 	bl	8001a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087c:	2301      	movs	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800088e:	f001 fc05 	bl	800209c <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000898:	f001 f8f8 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000214 	.word	0x20000214
 80008a8:	40012000 	.word	0x40012000
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008c4:	4a21      	ldr	r2, [pc, #132]	@ (800094c <MX_ADC2_Init+0x9c>)
 80008c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008f2:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <MX_ADC2_Init+0xa0>)
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_ADC2_Init+0x98>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_ADC2_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_ADC2_Init+0x98>)
 800090c:	2201      	movs	r2, #1
 800090e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_ADC2_Init+0x98>)
 8000912:	f001 fb7f 	bl	8002014 <HAL_ADC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800091c:	f001 f8b6 	bl	8001a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000920:	2302      	movs	r3, #2
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_ADC2_Init+0x98>)
 8000932:	f001 fbb3 	bl	800209c <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800093c:	f001 f8a6 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000025c 	.word	0x2000025c
 800094c:	40012100 	.word	0x40012100
 8000950:	0f000001 	.word	0x0f000001

08000954 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	@ 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <HAL_ADC_MspInit+0xd8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d128      	bne.n	80009c8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a25      	ldr	r2, [pc, #148]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANL1_Pin;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <HAL_ADC_MspInit+0xe0>)
 80009c2:	f003 f81f 	bl	8003a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009c6:	e02c      	b.n	8000a22 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a38 <HAL_ADC_MspInit+0xe4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d127      	bne.n	8000a22 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_ADC_MspInit+0xdc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANL2_Pin;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL2_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_ADC_MspInit+0xe0>)
 8000a1e:	f002 fff1 	bl	8003a04 <HAL_GPIO_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	@ 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40012100 	.word	0x40012100

08000a3c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <MX_CAN1_Init+0x8c>)
 8000a44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a5a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a8c:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a8e:	f001 fd23 	bl	80024d8 <HAL_CAN_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 fff8 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <MX_CAN1_Init+0x88>)
 8000a9e:	f001 fef7 	bl	8002890 <HAL_CAN_Start>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_CAN1_Init+0x70>
    {
      Error_Handler();
 8000aa8:	f000 fff0 	bl	8001a8c <Error_Handler>
    }
  TxHeader.IDE = CAN_ID_STD;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_CAN1_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = DFMM_ID;
 8000ab2:	f240 4246 	movw	r2, #1094	@ 0x446
 8000ab6:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <MX_CAN1_Init+0x90>)
 8000ab8:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000aba:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <MX_CAN1_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000318 	.word	0x20000318
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	200002a4 	.word	0x200002a4

08000ad0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <MX_CAN2_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000aee:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000af2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000af6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000afa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b20:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b22:	f001 fcd9 	bl	80024d8 <HAL_CAN_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 ffae 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b32:	f001 fead 	bl	8002890 <HAL_CAN_Start>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_CAN2_Init+0x70>
  {
	Error_Handler();
 8000b3c:	f000 ffa6 	bl	8001a8c <Error_Handler>
  }
  CAN_Set_Filter(17, &canfilter); // ALL messages sent to the DFMM must have channel id starting with 5
 8000b40:	4909      	ldr	r1, [pc, #36]	@ (8000b68 <MX_CAN2_Init+0x98>)
 8000b42:	2011      	movs	r0, #17
 8000b44:	f000 f942 	bl	8000dcc <CAN_Set_Filter>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) // Activates interrupt for received messages.
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_CAN2_Init+0x90>)
 8000b4c:	f002 f8d6 	bl	8002cfc <HAL_CAN_ActivateNotification>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_CAN2_Init+0x8a>
  {
	Error_Handler();
 8000b56:	f000 ff99 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000340 	.word	0x20000340
 8000b64:	40006800 	.word	0x40006800
 8000b68:	200002f0 	.word	0x200002f0

08000b6c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb4 <HAL_CAN_MspInit+0x148>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d13e      	bne.n	8000c0c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a48      	ldr	r2, [pc, #288]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000b96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b98:	4b47      	ldr	r3, [pc, #284]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10d      	bne.n	8000bbc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	4b45      	ldr	r3, [pc, #276]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	4a44      	ldr	r2, [pc, #272]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb0:	4b42      	ldr	r3, [pc, #264]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bd8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bea:	2309      	movs	r3, #9
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4832      	ldr	r0, [pc, #200]	@ (8000cc0 <HAL_CAN_MspInit+0x154>)
 8000bf6:	f002 ff05 	bl	8003a04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f002 fbd1 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c04:	2014      	movs	r0, #20
 8000c06:	f002 fbea 	bl	80033de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000c0a:	e04f      	b.n	8000cac <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc4 <HAL_CAN_MspInit+0x158>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d14a      	bne.n	8000cac <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a27      	ldr	r2, [pc, #156]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000c3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_CAN_MspInit+0x14c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10d      	bne.n	8000c60 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_CAN_MspInit+0x150>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c7c:	2360      	movs	r3, #96	@ 0x60
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <HAL_CAN_MspInit+0x15c>)
 8000c98:	f002 feb4 	bl	8003a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2041      	movs	r0, #65	@ 0x41
 8000ca2:	f002 fb80 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ca6:	2041      	movs	r0, #65	@ 0x41
 8000ca8:	f002 fb99 	bl	80033de <HAL_NVIC_EnableIRQ>
}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	@ 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40006400 	.word	0x40006400
 8000cb8:	20000368 	.word	0x20000368
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40006800 	.word	0x40006800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <CAN_Send_Message>:
}

/* USER CODE BEGIN 1 */

void CAN_Send_Message(uint8_t* Transmission_Data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	memset(TxData, 0, sizeof(TxData)); // Clear TxData array
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <CAN_Send_Message+0x6c>)
 8000cda:	f004 fc11 	bl	8005500 <memset>
	length = (sizeof(Transmission_Data))/8; // Find length of message being sent
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <CAN_Send_Message+0x70>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length; // Set TxHeader register to have this message length
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <CAN_Send_Message+0x70>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <CAN_Send_Message+0x74>)
 8000cee:	611a      	str	r2, [r3, #16]
	int i;
	for(i=0; i<(length-1); i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e00a      	b.n	8000d0c <CAN_Send_Message+0x40>
		*(TxData + i) = *(Transmission_Data + i); // iterate over length of message to copy into TxData array
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	441a      	add	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	490e      	ldr	r1, [pc, #56]	@ (8000d38 <CAN_Send_Message+0x6c>)
 8000d00:	440b      	add	r3, r1
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <CAN_Send_Message+0x70>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dbed      	blt.n	8000cf6 <CAN_Send_Message+0x2a>
	}

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <CAN_Send_Message+0x78>)
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <CAN_Send_Message+0x6c>)
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <CAN_Send_Message+0x74>)
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <CAN_Send_Message+0x7c>)
 8000d22:	f001 fdf9 	bl	8002918 <HAL_CAN_AddTxMessage>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <CAN_Send_Message+0x64>
	{
	   Error_Handler();
 8000d2c:	f000 feae 	bl	8001a8c <Error_Handler>
	}
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200002bc 	.word	0x200002bc
 8000d3c:	2000038a 	.word	0x2000038a
 8000d40:	200002a4 	.word	0x200002a4
 8000d44:	200002ec 	.word	0x200002ec
 8000d48:	20000318 	.word	0x20000318

08000d4c <CAN_Send_Message_String>:

void CAN_Send_Message_String(char* Transmission_Data)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	memset(TxData, 0, sizeof(TxData)); // Clear TxData array
 8000d54:	2208      	movs	r2, #8
 8000d56:	2100      	movs	r1, #0
 8000d58:	4817      	ldr	r0, [pc, #92]	@ (8000db8 <CAN_Send_Message_String+0x6c>)
 8000d5a:	f004 fbd1 	bl	8005500 <memset>
	length = (sizeof(Transmission_Data))/8; // Find length of message being sent
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <CAN_Send_Message_String+0x70>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length; // Set TxHeader register to have this message length
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <CAN_Send_Message_String+0x70>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <CAN_Send_Message_String+0x74>)
 8000d6e:	611a      	str	r2, [r3, #16]
	int i;
	for(i=0; i<(length-1); i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e00a      	b.n	8000d8c <CAN_Send_Message_String+0x40>
		*(TxData + i) = (unsigned int)((unsigned char)*(Transmission_Data + i)); // iterate over length of message to copy into TxData array
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	441a      	add	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	490e      	ldr	r1, [pc, #56]	@ (8000db8 <CAN_Send_Message_String+0x6c>)
 8000d80:	440b      	add	r3, r1
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <CAN_Send_Message_String+0x70>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dbed      	blt.n	8000d76 <CAN_Send_Message_String+0x2a>
	}

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <CAN_Send_Message_String+0x78>)
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <CAN_Send_Message_String+0x6c>)
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <CAN_Send_Message_String+0x74>)
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <CAN_Send_Message_String+0x7c>)
 8000da2:	f001 fdb9 	bl	8002918 <HAL_CAN_AddTxMessage>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <CAN_Send_Message_String+0x64>
	{
	   Error_Handler();
 8000dac:	f000 fe6e 	bl	8001a8c <Error_Handler>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200002bc 	.word	0x200002bc
 8000dbc:	2000038a 	.word	0x2000038a
 8000dc0:	200002a4 	.word	0x200002a4
 8000dc4:	200002ec 	.word	0x200002ec
 8000dc8:	20000318 	.word	0x20000318

08000dcc <CAN_Set_Filter>:


void CAN_Set_Filter(uint8_t FilterBank, CAN_FilterTypeDef *canhandler) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
    canhandler->FilterActivation = CAN_FILTER_ENABLE;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	621a      	str	r2, [r3, #32]
	canhandler->FilterBank = FilterBank;  // which filter bank to use from the assigned ones
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	615a      	str	r2, [r3, #20]
	canhandler->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
	canhandler->FilterIdHigh = 0x500<<5;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000df0:	601a      	str	r2, [r3, #0]
	canhandler->FilterIdLow = 0;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
	canhandler->FilterMaskIdHigh = 0xF00<<5;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 32f0 	mov.w	r2, #122880	@ 0x1e000
 8000dfe:	609a      	str	r2, [r3, #8]
	canhandler->FilterMaskIdLow = 0;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
	canhandler->FilterMode = CAN_FILTERMODE_IDMASK;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
	canhandler->FilterScale = CAN_FILTERSCALE_32BIT;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	61da      	str	r2, [r3, #28]
	canhandler->SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	220e      	movs	r2, #14
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan2, canhandler);
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <CAN_Set_Filter+0x5c>)
 8000e1c:	f001 fc58 	bl	80026d0 <HAL_CAN_ConfigFilter>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000340 	.word	0x20000340

08000e2c <ReceiveMessage>:

void ReceiveMessage(CAN_RxHeaderTypeDef *ReceptionHeader, uint8_t *Receive_Data) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	 * The sub if-else statement (if there is one) matches the received byte of the message at the 7th position to a set of static bytes corresponding to the flag
	 * being switched. The static byte (0x01, 0x02, 0x03, etc) must be changed in accordance with car
	 * messages AND the byte offset must be changed depending on the length of the message and where the byte
	 * is located (7th to 4th, etc).
	 */
	if (ReceptionHeader->StdId == PC_ID_FRAME1) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d104      	bne.n	8000e4c <ReceiveMessage+0x20>
		DataLogger[0] = *(Receive_Data); // First data logger byte stored in array DataLogger
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	4b6d      	ldr	r3, [pc, #436]	@ (8000ffc <ReceiveMessage+0x1d0>)
 8000e48:	701a      	strb	r2, [r3, #0]
		}
		else if (0x03 == *(Receive_Data + 7)) {
			EBS_Test_Accel_Stop = 1;
		}
	}
}
 8000e4a:	e0d3      	b.n	8000ff4 <ReceiveMessage+0x1c8>
	else if (ReceptionHeader->StdId == PC_ID_FRAME2) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f240 5291 	movw	r2, #1425	@ 0x591
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d104      	bne.n	8000e62 <ReceiveMessage+0x36>
			DataLogger[1] = *(Receive_Data); // Second data logger byte stored in array DataLogger
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	4b67      	ldr	r3, [pc, #412]	@ (8000ffc <ReceiveMessage+0x1d0>)
 8000e5e:	705a      	strb	r2, [r3, #1]
}
 8000e60:	e0c8      	b.n	8000ff4 <ReceiveMessage+0x1c8>
	else if (ReceptionHeader->StdId == PC_ID_FRAME2) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f240 5291 	movw	r2, #1425	@ 0x591
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d107      	bne.n	8000e7e <ReceiveMessage+0x52>
				DataLogger[2] = *(Receive_Data); // Third data logger byte stored in array DataLogger
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	4b62      	ldr	r3, [pc, #392]	@ (8000ffc <ReceiveMessage+0x1d0>)
 8000e74:	709a      	strb	r2, [r3, #2]
				CAN_Send_Message(DataLogger); // Message is sent
 8000e76:	4861      	ldr	r0, [pc, #388]	@ (8000ffc <ReceiveMessage+0x1d0>)
 8000e78:	f7ff ff28 	bl	8000ccc <CAN_Send_Message>
}
 8000e7c:	e0ba      	b.n	8000ff4 <ReceiveMessage+0x1c8>
	else if (ReceptionHeader->StdId == M150_ID) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d168      	bne.n	8000f5c <ReceiveMessage+0x130>
		HeartbeatCheck[0] = __HAL_TIM_GET_COUNTER(&htim7); // Sets Heartbeat for M150
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <ReceiveMessage+0x1d4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b5c      	ldr	r3, [pc, #368]	@ (8001004 <ReceiveMessage+0x1d8>)
 8000e94:	701a      	strb	r2, [r3, #0]
		if (0x01 == *(Receive_Data + 7)) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3307      	adds	r3, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d103      	bne.n	8000ea8 <ReceiveMessage+0x7c>
			EBS_Brake_Line = 1;
 8000ea0:	4b59      	ldr	r3, [pc, #356]	@ (8001008 <ReceiveMessage+0x1dc>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	e0a5      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x03 ==*(Receive_Data + 7)) {
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3307      	adds	r3, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d103      	bne.n	8000eba <ReceiveMessage+0x8e>
			Service_Brake_Check = 1;
 8000eb2:	4b56      	ldr	r3, [pc, #344]	@ (800100c <ReceiveMessage+0x1e0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
}
 8000eb8:	e09c      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x04 == *(Receive_Data + 7)) {
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d103      	bne.n	8000ecc <ReceiveMessage+0xa0>
			EBS_Sound = 1;
 8000ec4:	4b52      	ldr	r3, [pc, #328]	@ (8001010 <ReceiveMessage+0x1e4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	e093      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x05 == *(Receive_Data + 7)) {
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d103      	bne.n	8000ede <ReceiveMessage+0xb2>
			EBS_Sound = 2;
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8001010 <ReceiveMessage+0x1e4>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	e08a      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x06 ==*(Receive_Data + 7)) {
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d103      	bne.n	8000ef0 <ReceiveMessage+0xc4>
			Service_Brake_Check = 2;
 8000ee8:	4b48      	ldr	r3, [pc, #288]	@ (800100c <ReceiveMessage+0x1e0>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	e081      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x07 == *(Receive_Data + 7)) {
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	3307      	adds	r3, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d103      	bne.n	8000f02 <ReceiveMessage+0xd6>
			EBS_Brake_Line = 0;
 8000efa:	4b43      	ldr	r3, [pc, #268]	@ (8001008 <ReceiveMessage+0x1dc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
}
 8000f00:	e078      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x09 == *(Receive_Data + 7)) {
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3307      	adds	r3, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d103      	bne.n	8000f14 <ReceiveMessage+0xe8>
			EBS_Sound = 0;
 8000f0c:	4b40      	ldr	r3, [pc, #256]	@ (8001010 <ReceiveMessage+0x1e4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	e06f      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x0A ==*(Receive_Data + 7)) {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3307      	adds	r3, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d103      	bne.n	8000f26 <ReceiveMessage+0xfa>
			Service_Brake_Check = 0;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <ReceiveMessage+0x1e0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
}
 8000f24:	e066      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x0B == *(Receive_Data + 7)) {
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	3307      	adds	r3, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b0b      	cmp	r3, #11
 8000f2e:	d103      	bne.n	8000f38 <ReceiveMessage+0x10c>
			Mission_Finished = 1;
 8000f30:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <ReceiveMessage+0x1e8>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	e05d      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x0E == *(Receive_Data + 7)) {
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3307      	adds	r3, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b0e      	cmp	r3, #14
 8000f40:	d103      	bne.n	8000f4a <ReceiveMessage+0x11e>
			StrainGauge = 1;
 8000f42:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <ReceiveMessage+0x1ec>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
}
 8000f48:	e054      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x0F == *(Receive_Data + 7)) {
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d14f      	bne.n	8000ff4 <ReceiveMessage+0x1c8>
			StrainGauge = 0;
 8000f54:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <ReceiveMessage+0x1ec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	e04b      	b.n	8000ff4 <ReceiveMessage+0x1c8>
	else if (ReceptionHeader->StdId == RES_ID) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d11a      	bne.n	8000f9e <ReceiveMessage+0x172>
			if (0x0B == *(Receive_Data + 7)) {
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b0b      	cmp	r3, #11
 8000f70:	d103      	bne.n	8000f7a <ReceiveMessage+0x14e>
				RES = 1;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <ReceiveMessage+0x1f0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	e03c      	b.n	8000ff4 <ReceiveMessage+0x1c8>
			else if (0x0C == *(Receive_Data + 7)) {
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d103      	bne.n	8000f8c <ReceiveMessage+0x160>
				R2D = 1;
 8000f84:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <ReceiveMessage+0x1f4>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	e033      	b.n	8000ff4 <ReceiveMessage+0x1c8>
			else if (0x0D == *(Receive_Data + 7)) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3307      	adds	r3, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b0d      	cmp	r3, #13
 8000f94:	d12e      	bne.n	8000ff4 <ReceiveMessage+0x1c8>
				R2D = 0;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <ReceiveMessage+0x1f4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	e02a      	b.n	8000ff4 <ReceiveMessage+0x1c8>
	else if (ReceptionHeader->StdId == PC_ID) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d124      	bne.n	8000ff4 <ReceiveMessage+0x1c8>
		HeartbeatCheck[1] = __HAL_TIM_GET_COUNTER(&htim7);
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <ReceiveMessage+0x1d4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <ReceiveMessage+0x1d8>)
 8000fb4:	705a      	strb	r2, [r3, #1]
		if (0x11 == *(Receive_Data + 7)) {}
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3307      	adds	r3, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b11      	cmp	r3, #17
 8000fbe:	d019      	beq.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x01 == *(Receive_Data + 7)) {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3307      	adds	r3, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d103      	bne.n	8000fd2 <ReceiveMessage+0x1a6>
			EBS_Energy_Check = 1;
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <ReceiveMessage+0x1f8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	e010      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x02 == *(Receive_Data + 7)) {
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3307      	adds	r3, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d103      	bne.n	8000fe4 <ReceiveMessage+0x1b8>
			EBS_Energy_Check = 0;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <ReceiveMessage+0x1f8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	e007      	b.n	8000ff4 <ReceiveMessage+0x1c8>
		else if (0x03 == *(Receive_Data + 7)) {
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3307      	adds	r3, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d102      	bne.n	8000ff4 <ReceiveMessage+0x1c8>
			EBS_Test_Accel_Stop = 1;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <ReceiveMessage+0x1fc>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200002c4 	.word	0x200002c4
 8001000:	200003dc 	.word	0x200003dc
 8001004:	20000390 	.word	0x20000390
 8001008:	2000038c 	.word	0x2000038c
 800100c:	20000385 	.word	0x20000385
 8001010:	20000388 	.word	0x20000388
 8001014:	20000387 	.word	0x20000387
 8001018:	2000038d 	.word	0x2000038d
 800101c:	20000389 	.word	0x20000389
 8001020:	2000038b 	.word	0x2000038b
 8001024:	20000383 	.word	0x20000383
 8001028:	2000038e 	.word	0x2000038e

0800102c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001038:	2100      	movs	r1, #0
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800103c:	f001 fd3c 	bl	8002ab8 <HAL_CAN_GetRxMessage>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
		Error_Handler();
 8001046:	f000 fd21 	bl	8001a8c <Error_Handler>
  }
  ReceiveMessage(&RxHeader, RxData);
 800104a:	4904      	ldr	r1, [pc, #16]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800104e:	f7ff feed 	bl	8000e2c <ReceiveMessage>
 }
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002e4 	.word	0x200002e4
 8001060:	200002c8 	.word	0x200002c8
 8001064:	20000340 	.word	0x20000340

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_DMA_Init+0x3c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2046      	movs	r0, #70	@ 0x46
 8001090:	f002 f989 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001094:	2046      	movs	r0, #70	@ 0x46
 8001096:	f002 f9a2 	bl	80033de <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b56      	ldr	r3, [pc, #344]	@ (800121c <MX_GPIO_Init+0x174>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a55      	ldr	r2, [pc, #340]	@ (800121c <MX_GPIO_Init+0x174>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b53      	ldr	r3, [pc, #332]	@ (800121c <MX_GPIO_Init+0x174>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b4f      	ldr	r3, [pc, #316]	@ (800121c <MX_GPIO_Init+0x174>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <MX_GPIO_Init+0x174>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b4c      	ldr	r3, [pc, #304]	@ (800121c <MX_GPIO_Init+0x174>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b48      	ldr	r3, [pc, #288]	@ (800121c <MX_GPIO_Init+0x174>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a47      	ldr	r2, [pc, #284]	@ (800121c <MX_GPIO_Init+0x174>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b45      	ldr	r3, [pc, #276]	@ (800121c <MX_GPIO_Init+0x174>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ASSI_BLUE_Pin|AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2112      	movs	r1, #18
 8001116:	4842      	ldr	r0, [pc, #264]	@ (8001220 <MX_GPIO_Init+0x178>)
 8001118:	f002 fe28 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AS_SDC_Pin|WDI_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001122:	4840      	ldr	r0, [pc, #256]	@ (8001224 <MX_GPIO_Init+0x17c>)
 8001124:	f002 fe22 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ASSI_BLUE_Pin|AS_CLOSE_SDC_Pin;
 8001128:	2312      	movs	r3, #18
 800112a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4838      	ldr	r0, [pc, #224]	@ (8001220 <MX_GPIO_Init+0x178>)
 8001140:	f002 fc60 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BMS_FAULT_Pin|BSPD_FLT_Pin|WDG_STATUS_Pin;
 8001144:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <MX_GPIO_Init+0x180>)
 800115a:	f002 fc53 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_FAULT_Pin|ASMS_SIG_Pin;
 800115e:	23c0      	movs	r3, #192	@ 0xc0
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <MX_GPIO_Init+0x180>)
 8001172:	f002 fc47 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _3V3_TS_SWITCH_Pin;
 8001176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(_3V3_TS_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4826      	ldr	r0, [pc, #152]	@ (8001224 <MX_GPIO_Init+0x17c>)
 800118c:	f002 fc3a 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDC_CHECK_Pin;
 8001190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119a:	2302      	movs	r3, #2
 800119c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDC_CHECK_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	481f      	ldr	r0, [pc, #124]	@ (8001224 <MX_GPIO_Init+0x17c>)
 80011a6:	f002 fc2d 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AS_SDC_Pin|WDI_Pin;
 80011aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <MX_GPIO_Init+0x17c>)
 80011c4:	f002 fc1e 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDO_Pin;
 80011c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WDO_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <MX_GPIO_Init+0x17c>)
 80011de:	f002 fc11 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_1_SIG_Pin|ROT_2_SIG_Pin;
 80011e2:	23c0      	movs	r3, #192	@ 0xc0
 80011e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	480a      	ldr	r0, [pc, #40]	@ (8001220 <MX_GPIO_Init+0x178>)
 80011f6:	f002 fc05 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_3_SIG_Pin|ROT_4_SIG_Pin;
 80011fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_GPIO_Init+0x178>)
 8001210:	f002 fbf8 	bl	8003a04 <HAL_GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020800 	.word	0x40020800
 8001224:	40020400 	.word	0x40020400
 8001228:	40020000 	.word	0x40020000

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f000 fe5a 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f974 	bl	8001520 <SystemClock_Config>
  // Peripheral initialisation starts -------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f7ff ff36 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800123c:	f7ff ff14 	bl	8001068 <MX_DMA_Init>
  MX_ADC1_Init();
 8001240:	f7ff fae4 	bl	800080c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001244:	f7ff fb34 	bl	80008b0 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8001248:	f000 fd76 	bl	8001d38 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800124c:	f000 fcc2 	bl	8001bd4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001250:	f000 fcf6 	bl	8001c40 <MX_TIM7_Init>
  MX_CAN2_Init();
 8001254:	f7ff fc3c 	bl	8000ad0 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001258:	f7ff fbf0 	bl	8000a3c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Initialise timer
 800125c:	489b      	ldr	r0, [pc, #620]	@ (80014cc <main+0x2a0>)
 800125e:	f003 fa61 	bl	8004724 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Initialise timer
 8001262:	489b      	ldr	r0, [pc, #620]	@ (80014d0 <main+0x2a4>)
 8001264:	f003 fa5e 	bl	8004724 <HAL_TIM_Base_Start_IT>

  // Peripheral initialisation complete -------------------------------------------------------

  Read_Rotary(&(State_Variables.R_S)); // Reads the current mission of the AV
 8001268:	489a      	ldr	r0, [pc, #616]	@ (80014d4 <main+0x2a8>)
 800126a:	f000 fab9 	bl	80017e0 <Read_Rotary>
  ASSI_Off(); // Ensures ASSI output is off
 800126e:	f7ff f9c3 	bl	80005f8 <ASSI_Off>
  while (1)
  {
	/* This is an implementation of a FSM in C. State outputs are executed at the start of every loop, along with the state attribute checks.
	 * A switch block is used for the state transitions for ever possible state.
	 */
	ReadInputs(indicators); // Updates all AV inputs
 8001272:	4b99      	ldr	r3, [pc, #612]	@ (80014d8 <main+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f9f2 	bl	8001660 <ReadInputs>
	ReadForFaults(&FAILURE_MODE, indicators); // Checks all fault readings from AV
 800127c:	4b96      	ldr	r3, [pc, #600]	@ (80014d8 <main+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4896      	ldr	r0, [pc, #600]	@ (80014dc <main+0x2b0>)
 8001284:	f000 fae4 	bl	8001850 <ReadForFaults>
	AV_State_Outputs(indicators, av_status, FAILURE_MODE); // Implements ASSI and EBS changes depending on current State
 8001288:	4b93      	ldr	r3, [pc, #588]	@ (80014d8 <main+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a94      	ldr	r2, [pc, #592]	@ (80014e0 <main+0x2b4>)
 800128e:	7811      	ldrb	r1, [r2, #0]
 8001290:	4a92      	ldr	r2, [pc, #584]	@ (80014dc <main+0x2b0>)
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fa7b 	bl	8001790 <AV_State_Outputs>

	switch(av_status) {
 800129a:	4b91      	ldr	r3, [pc, #580]	@ (80014e0 <main+0x2b4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d8e7      	bhi.n	8001272 <main+0x46>
 80012a2:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <main+0x7c>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012ff 	.word	0x080012ff
 80012ac:	080013bb 	.word	0x080013bb
 80012b0:	080012bd 	.word	0x080012bd
 80012b4:	08001431 	.word	0x08001431
 80012b8:	0800147d 	.word	0x0800147d
			case OFF:
				if(indicators->R_S != INSPECTION && indicators->TS == 1
 80012bc:	4b86      	ldr	r3, [pc, #536]	@ (80014d8 <main+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	f000 80f7 	beq.w	80014b6 <main+0x28a>
 80012c8:	4b83      	ldr	r3, [pc, #524]	@ (80014d8 <main+0x2ac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f040 80f1 	bne.w	80014b6 <main+0x28a>
						&& indicators->ASMS_Status == 1) {
 80012d4:	4b80      	ldr	r3, [pc, #512]	@ (80014d8 <main+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	7c5b      	ldrb	r3, [r3, #17]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f040 80eb 	bne.w	80014b6 <main+0x28a>
					CAN_Send_Message_String("READY \n");
 80012e0:	4880      	ldr	r0, [pc, #512]	@ (80014e4 <main+0x2b8>)
 80012e2:	f7ff fd33 	bl	8000d4c <CAN_Send_Message_String>
					Initial_Checkup();
 80012e6:	f000 fb49 	bl	800197c <Initial_Checkup>
					av_status = READY;
 80012ea:	4b7d      	ldr	r3, [pc, #500]	@ (80014e0 <main+0x2b4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 80012f0:	4b77      	ldr	r3, [pc, #476]	@ (80014d0 <main+0x2a4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b7b      	ldr	r3, [pc, #492]	@ (80014e8 <main+0x2bc>)
 80012fa:	801a      	strh	r2, [r3, #0]
				}
				break;
 80012fc:	e0db      	b.n	80014b6 <main+0x28a>

			case READY:
				if(FAILURE_MODE != NONE || RES == 1) {
 80012fe:	4b77      	ldr	r3, [pc, #476]	@ (80014dc <main+0x2b0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b08      	cmp	r3, #8
 8001304:	d104      	bne.n	8001310 <main+0xe4>
 8001306:	4b79      	ldr	r3, [pc, #484]	@ (80014ec <main+0x2c0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d109      	bne.n	8001324 <main+0xf8>
					CAN_Send_Message_String("EMGNCY\n");
 8001310:	4877      	ldr	r0, [pc, #476]	@ (80014f0 <main+0x2c4>)
 8001312:	f7ff fd1b 	bl	8000d4c <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 8001316:	4877      	ldr	r0, [pc, #476]	@ (80014f4 <main+0x2c8>)
 8001318:	f7ff fd18 	bl	8000d4c <CAN_Send_Message_String>
					av_status = EMERGENCY;
 800131c:	4b70      	ldr	r3, [pc, #448]	@ (80014e0 <main+0x2b4>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e049      	b.n	80013b8 <main+0x18c>
				}
				else if(indicators->ASMS_Status == 0 && indicators->TS == 0 && indicators->EBS == 0) {
 8001324:	4b6c      	ldr	r3, [pc, #432]	@ (80014d8 <main+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	7c5b      	ldrb	r3, [r3, #17]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d110      	bne.n	8001350 <main+0x124>
 800132e:	4b6a      	ldr	r3, [pc, #424]	@ (80014d8 <main+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <main+0x124>
 8001338:	4b67      	ldr	r3, [pc, #412]	@ (80014d8 <main+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	7c1b      	ldrb	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <main+0x124>
					CAN_Send_Message_String("OFF   \n");
 8001342:	486d      	ldr	r0, [pc, #436]	@ (80014f8 <main+0x2cc>)
 8001344:	f7ff fd02 	bl	8000d4c <CAN_Send_Message_String>
					av_status = OFF;
 8001348:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <main+0x2b4>)
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e033      	b.n	80013b8 <main+0x18c>
				}
				else if((__HAL_TIM_GET_COUNTER(&htim7) - timecheck) > 500 && indicators->R_S != MANUAL && R2D == 1) {
 8001350:	4b5f      	ldr	r3, [pc, #380]	@ (80014d0 <main+0x2a4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	4a64      	ldr	r2, [pc, #400]	@ (80014e8 <main+0x2bc>)
 8001358:	8812      	ldrh	r2, [r2, #0]
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001360:	f240 80ab 	bls.w	80014ba <main+0x28e>
 8001364:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <main+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80a5 	beq.w	80014ba <main+0x28e>
 8001370:	4b62      	ldr	r3, [pc, #392]	@ (80014fc <main+0x2d0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 809f 	bne.w	80014ba <main+0x28e>
					if (indicators->R_S == TRACK) {
 800137c:	4b56      	ldr	r3, [pc, #344]	@ (80014d8 <main+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d103      	bne.n	800138e <main+0x162>
						CAN_Send_Message_String("EBSTEST");
 8001386:	485e      	ldr	r0, [pc, #376]	@ (8001500 <main+0x2d4>)
 8001388:	f7ff fce0 	bl	8000d4c <CAN_Send_Message_String>
 800138c:	e010      	b.n	80013b0 <main+0x184>
					}
					else if (indicators->R_S == EBS_TEST) {
 800138e:	4b52      	ldr	r3, [pc, #328]	@ (80014d8 <main+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	791b      	ldrb	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d103      	bne.n	80013a0 <main+0x174>
						CAN_Send_Message_String("INSPECT");
 8001398:	485a      	ldr	r0, [pc, #360]	@ (8001504 <main+0x2d8>)
 800139a:	f7ff fcd7 	bl	8000d4c <CAN_Send_Message_String>
 800139e:	e007      	b.n	80013b0 <main+0x184>
					}
					else if (indicators->R_S == INSPECTION) {
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <main+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d102      	bne.n	80013b0 <main+0x184>
						CAN_Send_Message_String("DRIVING");
 80013aa:	4857      	ldr	r0, [pc, #348]	@ (8001508 <main+0x2dc>)
 80013ac:	f7ff fcce 	bl	8000d4c <CAN_Send_Message_String>
					}
					av_status = DRIVING;
 80013b0:	4b4b      	ldr	r3, [pc, #300]	@ (80014e0 <main+0x2b4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80013b6:	e080      	b.n	80014ba <main+0x28e>
 80013b8:	e07f      	b.n	80014ba <main+0x28e>

			case DRIVING:
				if(FAILURE_MODE != NONE || RES == 1) {
 80013ba:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <main+0x2b0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d104      	bne.n	80013cc <main+0x1a0>
 80013c2:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <main+0x2c0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10c      	bne.n	80013e6 <main+0x1ba>
					CAN_Send_Message_String("EMGNCY\n");
 80013cc:	4848      	ldr	r0, [pc, #288]	@ (80014f0 <main+0x2c4>)
 80013ce:	f7ff fcbd 	bl	8000d4c <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 80013d2:	4848      	ldr	r0, [pc, #288]	@ (80014f4 <main+0x2c8>)
 80013d4:	f7ff fcba 	bl	8000d4c <CAN_Send_Message_String>
					CAN_Send_Message_String("DS OFF\n");
 80013d8:	484c      	ldr	r0, [pc, #304]	@ (800150c <main+0x2e0>)
 80013da:	f7ff fcb7 	bl	8000d4c <CAN_Send_Message_String>
					av_status = EMERGENCY;
 80013de:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <main+0x2b4>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	701a      	strb	r2, [r3, #0]
					CAN_Send_Message_String("FINISH\n");
					CAN_Send_Message_String("TS OFF\n");
					CAN_Send_Message_String("DS OFF\n");
					av_status = FINISHED;
				}
				break;
 80013e4:	e06b      	b.n	80014be <main+0x292>
				else if(indicators->R_S == TRACK) {
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <main+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	791b      	ldrb	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <main+0x1d6>
					if(EBS_Test_Accel_Stop == 1) {
 80013f0:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <main+0x2e4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d161      	bne.n	80014be <main+0x292>
						av_status = EMERGENCY;
 80013fa:	4b39      	ldr	r3, [pc, #228]	@ (80014e0 <main+0x2b4>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	701a      	strb	r2, [r3, #0]
				break;
 8001400:	e05d      	b.n	80014be <main+0x292>
				else if(Mission_Finished == 1) {
 8001402:	4b44      	ldr	r3, [pc, #272]	@ (8001514 <main+0x2e8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d158      	bne.n	80014be <main+0x292>
					EBSActivate(indicators);
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <main+0x2ac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fa69 	bl	80018e8 <EBSActivate>
					CAN_Send_Message_String("FINISH\n");
 8001416:	4840      	ldr	r0, [pc, #256]	@ (8001518 <main+0x2ec>)
 8001418:	f7ff fc98 	bl	8000d4c <CAN_Send_Message_String>
					CAN_Send_Message_String("TS OFF\n");
 800141c:	4835      	ldr	r0, [pc, #212]	@ (80014f4 <main+0x2c8>)
 800141e:	f7ff fc95 	bl	8000d4c <CAN_Send_Message_String>
					CAN_Send_Message_String("DS OFF\n");
 8001422:	483a      	ldr	r0, [pc, #232]	@ (800150c <main+0x2e0>)
 8001424:	f7ff fc92 	bl	8000d4c <CAN_Send_Message_String>
					av_status = FINISHED;
 8001428:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <main+0x2b4>)
 800142a:	2204      	movs	r2, #4
 800142c:	701a      	strb	r2, [r3, #0]
				break;
 800142e:	e046      	b.n	80014be <main+0x292>

			case EMERGENCY:
				if(EBS_Sound == 0 && indicators->ASMS_Status == 0 && indicators->SB == 0 && indicators->TS == 0 && indicators->R_S == TRACK) {
 8001430:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <main+0x2f0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d143      	bne.n	80014c2 <main+0x296>
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <main+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	7c5b      	ldrb	r3, [r3, #17]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d13e      	bne.n	80014c2 <main+0x296>
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <main+0x2ac>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d139      	bne.n	80014c2 <main+0x296>
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <main+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d134      	bne.n	80014c2 <main+0x296>
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <main+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d12f      	bne.n	80014c2 <main+0x296>
					av_status = OFF;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <main+0x2b4>)
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
					RES = 0;
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <main+0x2c0>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
					CAN_Send_Message_String("OFF   \n");
 800146e:	4822      	ldr	r0, [pc, #136]	@ (80014f8 <main+0x2cc>)
 8001470:	f7ff fc6c 	bl	8000d4c <CAN_Send_Message_String>
					FAILURE_MODE = NONE;
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <main+0x2b0>)
 8001476:	2208      	movs	r2, #8
 8001478:	701a      	strb	r2, [r3, #0]
				}
				break;
 800147a:	e022      	b.n	80014c2 <main+0x296>

			case FINISHED:
				if(RES == 1) {
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <main+0x2c0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d106      	bne.n	8001494 <main+0x268>
					CAN_Send_Message_String("EMGNCY\n");
 8001486:	481a      	ldr	r0, [pc, #104]	@ (80014f0 <main+0x2c4>)
 8001488:	f7ff fc60 	bl	8000d4c <CAN_Send_Message_String>
					av_status = EMERGENCY;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <main+0x2b4>)
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
				}
				else if(indicators->ASMS_Status == 0 && indicators->SB == 0) {
					CAN_Send_Message_String("OFF   \n");
					av_status = OFF;
				}
				break;
 8001492:	e018      	b.n	80014c6 <main+0x29a>
				else if(indicators->ASMS_Status == 0 && indicators->SB == 0) {
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <main+0x2ac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	7c5b      	ldrb	r3, [r3, #17]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d113      	bne.n	80014c6 <main+0x29a>
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <main+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10e      	bne.n	80014c6 <main+0x29a>
					CAN_Send_Message_String("OFF   \n");
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <main+0x2cc>)
 80014aa:	f7ff fc4f 	bl	8000d4c <CAN_Send_Message_String>
					av_status = OFF;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <main+0x2b4>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	701a      	strb	r2, [r3, #0]
				break;
 80014b4:	e007      	b.n	80014c6 <main+0x29a>
				break;
 80014b6:	bf00      	nop
 80014b8:	e6db      	b.n	8001272 <main+0x46>
				break;
 80014ba:	bf00      	nop
 80014bc:	e6d9      	b.n	8001272 <main+0x46>
				break;
 80014be:	bf00      	nop
 80014c0:	e6d7      	b.n	8001272 <main+0x46>
				break;
 80014c2:	bf00      	nop
 80014c4:	e6d5      	b.n	8001272 <main+0x46>
				break;
 80014c6:	bf00      	nop
 80014c8:	e6d3      	b.n	8001272 <main+0x46>
 80014ca:	bf00      	nop
 80014cc:	20000394 	.word	0x20000394
 80014d0:	200003dc 	.word	0x200003dc
 80014d4:	20000370 	.word	0x20000370
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000001 	.word	0x20000001
 80014e0:	20000000 	.word	0x20000000
 80014e4:	08005570 	.word	0x08005570
 80014e8:	20000380 	.word	0x20000380
 80014ec:	20000389 	.word	0x20000389
 80014f0:	08005578 	.word	0x08005578
 80014f4:	08005580 	.word	0x08005580
 80014f8:	08005588 	.word	0x08005588
 80014fc:	2000038b 	.word	0x2000038b
 8001500:	08005590 	.word	0x08005590
 8001504:	08005598 	.word	0x08005598
 8001508:	080055a0 	.word	0x080055a0
 800150c:	080055a8 	.word	0x080055a8
 8001510:	2000038e 	.word	0x2000038e
 8001514:	20000387 	.word	0x20000387
 8001518:	080055b0 	.word	0x080055b0
 800151c:	20000388 	.word	0x20000388

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	@ 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	2230      	movs	r2, #48	@ 0x30
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f003 ffe6 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <SystemClock_Config+0xc8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <SystemClock_Config+0xc8>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <SystemClock_Config+0xc8>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <SystemClock_Config+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <SystemClock_Config+0xcc>)
 800156a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <SystemClock_Config+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800157c:	2302      	movs	r3, #2
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001584:	2310      	movs	r3, #16
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001588:	2302      	movs	r3, #2
 800158a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001590:	2310      	movs	r3, #16
 8001592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001594:	2378      	movs	r3, #120	@ 0x78
 8001596:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fc15 	bl	8003dd4 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b0:	f000 fa6c 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fe77 	bl	80042c4 <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015dc:	f000 fa56 	bl	8001a8c <Error_Handler>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3750      	adds	r7, #80	@ 0x50
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle Watchdog
  if (htim == &htim7) // Heartbeat check may be faulty if nodes cannot meet timeout of 2s but still work. Scrap Heartbeat check in this case. Also refer to CAN source file to change Node ids (channel Ids) for respective nodes.
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a14      	ldr	r2, [pc, #80]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d117      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
	  int i;
	  	for (i = 0; i < 1; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e011      	b.n	800162a <HAL_TIM_PeriodElapsedCallback+0x3a>
	  		if ((__HAL_TIM_GET_COUNTER(&htim6) - HeartbeatCheck[i]) > 2000) {
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160c:	4911      	ldr	r1, [pc, #68]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	440a      	add	r2, r1
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800161c:	d902      	bls.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x34>
	  			FAILURE_MODE = HEARTBEAT_FAULT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001620:	2206      	movs	r2, #6
 8001622:	701a      	strb	r2, [r3, #0]
	  	for (i = 0; i < 1; i++) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	ddea      	ble.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x16>
	  			}
	  	}
  }

  if (htim == &htim7)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a06      	ldr	r2, [pc, #24]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d104      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x52>
    {
  	  HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin); // Toggle watchdog control pin
 8001638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800163c:	4807      	ldr	r0, [pc, #28]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800163e:	f002 fbae 	bl	8003d9e <HAL_GPIO_TogglePin>
    }
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003dc 	.word	0x200003dc
 8001650:	20000394 	.word	0x20000394
 8001654:	20000390 	.word	0x20000390
 8001658:	20000001 	.word	0x20000001
 800165c:	40020400 	.word	0x40020400

08001660 <ReadInputs>:

void ReadInputs(AS__INDICATOR_STATES *indicators) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	Read_Rotary(&(indicators->R_S));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f8b7 	bl	80017e0 <Read_Rotary>
	indicators->TS = HAL_GPIO_ReadPin(_3V3_TS_SWITCH_GPIO_Port, _3V3_TS_SWITCH_Pin);
 8001672:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001676:	4811      	ldr	r0, [pc, #68]	@ (80016bc <ReadInputs+0x5c>)
 8001678:	f002 fb60 	bl	8003d3c <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
	indicators->SB = Service_Brake_Check; // Redundant
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <ReadInputs+0x60>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
	indicators->SA = Steering_Actuator_Check; // Redundant
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <ReadInputs+0x64>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
	indicators->ASMS_Status = HAL_GPIO_ReadPin(ASMS_SIG_GPIO_Port, ASMS_SIG_Pin);
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <ReadInputs+0x68>)
 80016a0:	f002 fb4c 	bl	8003d3c <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	745a      	strb	r2, [r3, #17]
	EBSCheck(indicators);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f93b 	bl	8001928 <EBSCheck>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020400 	.word	0x40020400
 80016c0:	20000385 	.word	0x20000385
 80016c4:	20000386 	.word	0x20000386
 80016c8:	40020000 	.word	0x40020000

080016cc <SystemFailureHandler>:
  * @brief  This function is used to handle the failure-specific information transmitted over CAN.
  * 		Depending on the Failure Mode, the response over CAN will be different.
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  * @retval void
  */
void SystemFailureHandler(FAILURE_MODE_READING fm) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	switch (fm) {
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d839      	bhi.n	8001750 <SystemFailureHandler+0x84>
 80016dc:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <SystemFailureHandler+0x18>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	08001711 	.word	0x08001711
 80016e8:	08001719 	.word	0x08001719
 80016ec:	08001721 	.word	0x08001721
 80016f0:	08001729 	.word	0x08001729
 80016f4:	08001739 	.word	0x08001739
 80016f8:	08001731 	.word	0x08001731
 80016fc:	08001741 	.word	0x08001741
 8001700:	08001749 	.word	0x08001749
 8001704:	08001709 	.word	0x08001709
		case NONE:
			CAN_Send_Message_String("No Err\n");
 8001708:	4817      	ldr	r0, [pc, #92]	@ (8001768 <SystemFailureHandler+0x9c>)
 800170a:	f7ff fb1f 	bl	8000d4c <CAN_Send_Message_String>
			break;
 800170e:	e01f      	b.n	8001750 <SystemFailureHandler+0x84>
		case SDC_FAILURE:
			CAN_Send_Message_String("SDCFlt\n");
 8001710:	4816      	ldr	r0, [pc, #88]	@ (800176c <SystemFailureHandler+0xa0>)
 8001712:	f7ff fb1b 	bl	8000d4c <CAN_Send_Message_String>
			break;
 8001716:	e01b      	b.n	8001750 <SystemFailureHandler+0x84>
		case NON_PROG_FAILURE:
			CAN_Send_Message_String("NonPrg\n");
 8001718:	4815      	ldr	r0, [pc, #84]	@ (8001770 <SystemFailureHandler+0xa4>)
 800171a:	f7ff fb17 	bl	8000d4c <CAN_Send_Message_String>
			break;
 800171e:	e017      	b.n	8001750 <SystemFailureHandler+0x84>
		case EBS_FAILURE:
			CAN_Send_Message_String("EBS   \n");
 8001720:	4814      	ldr	r0, [pc, #80]	@ (8001774 <SystemFailureHandler+0xa8>)
 8001722:	f7ff fb13 	bl	8000d4c <CAN_Send_Message_String>
			break;
 8001726:	e013      	b.n	8001750 <SystemFailureHandler+0x84>
		case IMD_FAULT:
			CAN_Send_Message_String("IMD   \n");
 8001728:	4813      	ldr	r0, [pc, #76]	@ (8001778 <SystemFailureHandler+0xac>)
 800172a:	f7ff fb0f 	bl	8000d4c <CAN_Send_Message_String>
			break;
 800172e:	e00f      	b.n	8001750 <SystemFailureHandler+0x84>
		case BMS_FAULT:
			CAN_Send_Message_String("BMS   \n");
 8001730:	4812      	ldr	r0, [pc, #72]	@ (800177c <SystemFailureHandler+0xb0>)
 8001732:	f7ff fb0b 	bl	8000d4c <CAN_Send_Message_String>
			break;
 8001736:	e00b      	b.n	8001750 <SystemFailureHandler+0x84>
		case BSPD_FAULT:
			CAN_Send_Message_String("BSPD  \n");
 8001738:	4811      	ldr	r0, [pc, #68]	@ (8001780 <SystemFailureHandler+0xb4>)
 800173a:	f7ff fb07 	bl	8000d4c <CAN_Send_Message_String>
			break;
 800173e:	e007      	b.n	8001750 <SystemFailureHandler+0x84>
		case HEARTBEAT_FAULT:
			CAN_Send_Message_String("NodeFLT");
 8001740:	4810      	ldr	r0, [pc, #64]	@ (8001784 <SystemFailureHandler+0xb8>)
 8001742:	f7ff fb03 	bl	8000d4c <CAN_Send_Message_String>
			break;
 8001746:	e003      	b.n	8001750 <SystemFailureHandler+0x84>
		case SPRING_BROKE:
			CAN_Send_Message_String("SprgFLT");
 8001748:	480f      	ldr	r0, [pc, #60]	@ (8001788 <SystemFailureHandler+0xbc>)
 800174a:	f7ff faff 	bl	8000d4c <CAN_Send_Message_String>
			break;
 800174e:	bf00      	nop
	}
	EBSActivate(indicators);
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <SystemFailureHandler+0xc0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f8c7 	bl	80018e8 <EBSActivate>
	Error_Handler();
 800175a:	f000 f997 	bl	8001a8c <Error_Handler>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	080055b8 	.word	0x080055b8
 800176c:	080055c0 	.word	0x080055c0
 8001770:	080055c8 	.word	0x080055c8
 8001774:	080055d0 	.word	0x080055d0
 8001778:	080055d8 	.word	0x080055d8
 800177c:	080055e0 	.word	0x080055e0
 8001780:	080055e8 	.word	0x080055e8
 8001784:	080055f0 	.word	0x080055f0
 8001788:	080055f8 	.word	0x080055f8
 800178c:	20000004 	.word	0x20000004

08001790 <AV_State_Outputs>:
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  * 		indicators is a pointer to the struct containing all state information.
  * 		status is an enum that corresponds to the current state of the AV, according to the FSM in the .README documentation.
  * @retval void
  */
void AV_State_Outputs(AS__INDICATOR_STATES *indicators, AV_STATE status, FAILURE_MODE_READING FM) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
 800179c:	4613      	mov	r3, r2
 800179e:	70bb      	strb	r3, [r7, #2]
	switch(status) {
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d818      	bhi.n	80017d8 <AV_State_Outputs+0x48>
 80017a6:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <AV_State_Outputs+0x1c>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017c1 	.word	0x080017c1
 80017b0:	080017c5 	.word	0x080017c5
 80017b4:	080017d5 	.word	0x080017d5
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017d1 	.word	0x080017d1
		case (READY):
				ASSI_Ready();
 80017c0:	f7fe ff32 	bl	8000628 <ASSI_Ready>
		case (DRIVING):
				ASSI_Driving();
 80017c4:	f7fe ff48 	bl	8000658 <ASSI_Driving>
		case (EMERGENCY):
				SystemFailureHandler(FM);
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff7e 	bl	80016cc <SystemFailureHandler>
		case (FINISHED):
				ASSI_Finished();
 80017d0:	f7fe fff8 	bl	80007c4 <ASSI_Finished>
		case (OFF):
				ASSI_Off();
 80017d4:	f7fe ff10 	bl	80005f8 <ASSI_Off>
	}
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <Read_Rotary>:
/**
  * @brief  This function is used to check what state the Rotary Switch is currently in.
  * @param  RS is a pointer to the Rotary Switch enum that corresponds to all the different states.
  * @retval void
  */
void Read_Rotary(ROT_SWITCH* RS) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	// Rotary switch is active high
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_1_SIG_GPIO_Port, ROT_1_SIG_Pin)) {
 80017e8:	2140      	movs	r1, #64	@ 0x40
 80017ea:	4818      	ldr	r0, [pc, #96]	@ (800184c <Read_Rotary+0x6c>)
 80017ec:	f002 faa6 	bl	8003d3c <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <Read_Rotary+0x1e>
		*RS = MANUAL;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
		*RS = EBS_TEST;
	}
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
		*RS = INSPECTION;
	}
}
 80017fc:	e021      	b.n	8001842 <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_2_SIG_GPIO_Port, ROT_2_SIG_Pin)) {
 80017fe:	2180      	movs	r1, #128	@ 0x80
 8001800:	4812      	ldr	r0, [pc, #72]	@ (800184c <Read_Rotary+0x6c>)
 8001802:	f002 fa9b 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <Read_Rotary+0x34>
		*RS = TRACK;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	e016      	b.n	8001842 <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_3_SIG_GPIO_Port, ROT_3_SIG_Pin)) {
 8001814:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <Read_Rotary+0x6c>)
 800181a:	f002 fa8f 	bl	8003d3c <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <Read_Rotary+0x4c>
		*RS = EBS_TEST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
}
 800182a:	e00a      	b.n	8001842 <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
 800182c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001830:	4806      	ldr	r0, [pc, #24]	@ (800184c <Read_Rotary+0x6c>)
 8001832:	f002 fa83 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <Read_Rotary+0x62>
		*RS = INSPECTION;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	701a      	strb	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020800 	.word	0x40020800

08001850 <ReadForFaults>:
  * @brief  This function reads the status of IMD, BSPD and BMS failure pins and changes the corresponding flags.
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  *			indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void ReadForFaults(FAILURE_MODE_READING *Fm, AS__INDICATOR_STATES *indicators) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	if(HAL_GPIO_ReadPin(BMS_FAULT_GPIO_Port, BMS_FAULT_Pin) == 1) {
 800185a:	2110      	movs	r1, #16
 800185c:	481f      	ldr	r0, [pc, #124]	@ (80018dc <ReadForFaults+0x8c>)
 800185e:	f002 fa6d 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d103      	bne.n	8001870 <ReadForFaults+0x20>
		*Fm = BMS_FAULT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	701a      	strb	r2, [r3, #0]
		*Fm = SDC_FAILURE;
	}
	else if(StrainGauge == 1) {
		*Fm = SPRING_BROKE;
	}
}
 800186e:	e031      	b.n	80018d4 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(BSPD_FLT_GPIO_Port, BSPD_FLT_Pin) == 1) {
 8001870:	2120      	movs	r1, #32
 8001872:	481a      	ldr	r0, [pc, #104]	@ (80018dc <ReadForFaults+0x8c>)
 8001874:	f002 fa62 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d103      	bne.n	8001886 <ReadForFaults+0x36>
		*Fm = BSPD_FAULT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2204      	movs	r2, #4
 8001882:	701a      	strb	r2, [r3, #0]
}
 8001884:	e026      	b.n	80018d4 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(IMD_FAULT_GPIO_Port, IMD_FAULT_Pin) == 1) {
 8001886:	2140      	movs	r1, #64	@ 0x40
 8001888:	4814      	ldr	r0, [pc, #80]	@ (80018dc <ReadForFaults+0x8c>)
 800188a:	f002 fa57 	bl	8003d3c <HAL_GPIO_ReadPin>
 800188e:	4603      	mov	r3, r0
 8001890:	2b01      	cmp	r3, #1
 8001892:	d103      	bne.n	800189c <ReadForFaults+0x4c>
		*Fm = IMD_FAULT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	e01b      	b.n	80018d4 <ReadForFaults+0x84>
	else if(indicators->EBS == 0) {
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	7c1b      	ldrb	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d103      	bne.n	80018ac <ReadForFaults+0x5c>
		*Fm = EBS_FAILURE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	e013      	b.n	80018d4 <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 0) {
 80018ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <ReadForFaults+0x90>)
 80018b2:	f002 fa43 	bl	8003d3c <HAL_GPIO_ReadPin>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <ReadForFaults+0x74>
		*Fm = SDC_FAILURE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	e007      	b.n	80018d4 <ReadForFaults+0x84>
	else if(StrainGauge == 1) {
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <ReadForFaults+0x94>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <ReadForFaults+0x84>
		*Fm = SPRING_BROKE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2207      	movs	r2, #7
 80018d2:	701a      	strb	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	2000038d 	.word	0x2000038d

080018e8 <EBSActivate>:
/**
  * @brief  This function is used to activate the EBS by setting the EBS actuator pin high. Also activates the redundant system if EBS not available.
  * @param  indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void EBSActivate(AS__INDICATOR_STATES *indicators) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	EBSCheck(indicators);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f819 	bl	8001928 <EBSCheck>
	if (indicators->EBS == ACTIVATED) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7c1b      	ldrb	r3, [r3, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d103      	bne.n	8001906 <EBSActivate+0x1e>
		/* Send a message over CAN to activate redundant system*/
		CAN_Send_Message_String("RDNDNT\n");
 80018fe:	4808      	ldr	r0, [pc, #32]	@ (8001920 <EBSActivate+0x38>)
 8001900:	f7ff fa24 	bl	8000d4c <CAN_Send_Message_String>
	}
	else if (indicators->EBS == DEACTIVATED) {
		HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
	}
}
 8001904:	e008      	b.n	8001918 <EBSActivate+0x30>
	else if (indicators->EBS == DEACTIVATED) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d104      	bne.n	8001918 <EBSActivate+0x30>
		HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2110      	movs	r1, #16
 8001912:	4804      	ldr	r0, [pc, #16]	@ (8001924 <EBSActivate+0x3c>)
 8001914:	f002 fa2a 	bl	8003d6c <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08005600 	.word	0x08005600
 8001924:	40020800 	.word	0x40020800

08001928 <EBSCheck>:
/**
  * @brief  Performs initial checkup before going into Ready State from Idle.
  * @param  void
  * @retval void
  */
void EBSCheck(AS__INDICATOR_STATES *indicators) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if (EBS_Pressure_Check == 1 && EBS_Brake_Line == 1) {
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <EBSCheck+0x4c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <EBSCheck+0x24>
 800193a:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <EBSCheck+0x50>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d103      	bne.n	800194c <EBSCheck+0x24>
		indicators->EBS = ACTIVATED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	741a      	strb	r2, [r3, #16]
	}
	else if (EBS_Brake_Line == 0 || EBS_Pressure_Check == 0) {
		indicators->EBS = DEACTIVATED;
	}
}
 800194a:	e00c      	b.n	8001966 <EBSCheck+0x3e>
	else if (EBS_Brake_Line == 0 || EBS_Pressure_Check == 0) {
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <EBSCheck+0x50>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <EBSCheck+0x38>
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <EBSCheck+0x4c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <EBSCheck+0x3e>
		indicators->EBS = DEACTIVATED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	741a      	strb	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000384 	.word	0x20000384
 8001978:	2000038c 	.word	0x2000038c

0800197c <Initial_Checkup>:
/**
  * @brief  This function is used to deactivate the EBS by enabling the SDC, which will happen if failures have been resolved.
  * @param  indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void Initial_Checkup(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7); // You will see this often. This is me setting the current count of the timer to the timecheck variable for future comparison.
 8001980:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <Initial_Checkup+0xf0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <Initial_Checkup+0xf4>)
 800198a:	801a      	strh	r2, [r3, #0]
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == GPIO_PIN_RESET) {
 800198c:	e00f      	b.n	80019ae <Initial_Checkup+0x32>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <Initial_Checkup+0xf0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	4a36      	ldr	r2, [pc, #216]	@ (8001a70 <Initial_Checkup+0xf4>)
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	2b96      	cmp	r3, #150	@ 0x96
 800199c:	d907      	bls.n	80019ae <Initial_Checkup+0x32>
			  // Timeout Condition for if the SDC does not go to high.
			  FAILURE_MODE = SDC_FAILURE;
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <Initial_Checkup+0xf8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <Initial_Checkup+0xf8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe8f 	bl	80016cc <SystemFailureHandler>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == GPIO_PIN_RESET) {
 80019ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b2:	4831      	ldr	r0, [pc, #196]	@ (8001a78 <Initial_Checkup+0xfc>)
 80019b4:	f002 f9c2 	bl	8003d3c <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0e7      	beq.n	800198e <Initial_Checkup+0x12>
		  }
	  }

	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 80019be:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <Initial_Checkup+0xf0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <Initial_Checkup+0xf4>)
 80019c8:	801a      	strh	r2, [r3, #0]
	  CAN_Bus_Limiter = 0; // reset the CAN Bus Error Limiter
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <Initial_Checkup+0x100>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(TIM7_IRQn); // Disable Watchdog interrupts
 80019d0:	2037      	movs	r0, #55	@ 0x37
 80019d2:	f001 fd12 	bl	80033fa <HAL_NVIC_DisableIRQ>
	  HAL_Delay(200);
 80019d6:	20c8      	movs	r0, #200	@ 0xc8
 80019d8:	f000 faf8 	bl	8001fcc <HAL_Delay>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 1) {
 80019dc:	e00f      	b.n	80019fe <Initial_Checkup+0x82>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 80019de:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <Initial_Checkup+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <Initial_Checkup+0xf4>)
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	2b96      	cmp	r3, #150	@ 0x96
 80019ec:	d907      	bls.n	80019fe <Initial_Checkup+0x82>
			  FAILURE_MODE = NON_PROG_FAILURE;
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <Initial_Checkup+0xf8>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <Initial_Checkup+0xf8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe67 	bl	80016cc <SystemFailureHandler>
	  while (HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 1) {
 80019fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a02:	481d      	ldr	r0, [pc, #116]	@ (8001a78 <Initial_Checkup+0xfc>)
 8001a04:	f002 f99a 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d0e7      	beq.n	80019de <Initial_Checkup+0x62>
		  }
	  }

	  HAL_NVIC_EnableIRQ(TIM7_IRQn); // Enable Watchdog interrupts
 8001a0e:	2037      	movs	r0, #55	@ 0x37
 8001a10:	f001 fce5 	bl	80033de <HAL_NVIC_EnableIRQ>
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <Initial_Checkup+0xf0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <Initial_Checkup+0xf4>)
 8001a1e:	801a      	strh	r2, [r3, #0]
	  while (EBS_Energy_Check == 0) {
 8001a20:	e00f      	b.n	8001a42 <Initial_Checkup+0xc6>
		  if (__HAL_TIM_GET_COUNTER(&htim7) - timecheck > 150) {
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <Initial_Checkup+0xf0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <Initial_Checkup+0xf4>)
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	2b96      	cmp	r3, #150	@ 0x96
 8001a30:	d907      	bls.n	8001a42 <Initial_Checkup+0xc6>
			  // Timeout Condition if EBS Cannister and line Pressure are not built up.
			  FAILURE_MODE = EBS_FAILURE;
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <Initial_Checkup+0xf8>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
			  SystemFailureHandler(FAILURE_MODE);
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <Initial_Checkup+0xf8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe45 	bl	80016cc <SystemFailureHandler>
	  while (EBS_Energy_Check == 0) {
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <Initial_Checkup+0x104>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ea      	beq.n	8001a22 <Initial_Checkup+0xa6>
		  }
	  }

	  HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_SET); // Close SDC Relay once checks have been performed.
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2110      	movs	r1, #16
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <Initial_Checkup+0x108>)
 8001a52:	f002 f98b 	bl	8003d6c <HAL_GPIO_WritePin>

	  av_status = READY; // Transition into READY state
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <Initial_Checkup+0x10c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <Initial_Checkup+0xf0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b02      	ldr	r3, [pc, #8]	@ (8001a70 <Initial_Checkup+0xf4>)
 8001a66:	801a      	strh	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200003dc 	.word	0x200003dc
 8001a70:	20000380 	.word	0x20000380
 8001a74:	20000001 	.word	0x20000001
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	20000382 	.word	0x20000382
 8001a80:	20000383 	.word	0x20000383
 8001a84:	40020800 	.word	0x40020800
 8001a88:	20000000 	.word	0x20000000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ASSI_Emergency();
 8001a94:	f7fe fe3a 	bl	800070c <ASSI_Emergency>
 8001a98:	e7fc      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <NMI_Handler+0x4>

08001af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <MemManage_Handler+0x4>

08001b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b42:	f000 fa23 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <CAN1_RX0_IRQHandler+0x10>)
 8001b52:	f001 f8f9 	bl	8002d48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000318 	.word	0x20000318

08001b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <TIM6_DAC_IRQHandler+0x10>)
 8001b66:	f002 fe4d 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000394 	.word	0x20000394

08001b74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <TIM7_IRQHandler+0x10>)
 8001b7a:	f002 fe43 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003dc 	.word	0x200003dc

08001b88 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <CAN2_RX1_IRQHandler+0x10>)
 8001b8e:	f001 f8db 	bl	8002d48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000340 	.word	0x20000340

08001b9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <DMA2_Stream7_IRQHandler+0x10>)
 8001ba2:	f001 fcf3 	bl	800358c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000046c 	.word	0x2000046c

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001be4:	4a15      	ldr	r2, [pc, #84]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bea:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001bee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24999;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bf8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c04:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001c06:	f002 fd3d 	bl	8004684 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c10:	f7ff ff3c 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001c22:	f002 ffb3 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f7ff ff2e 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000394 	.word	0x20000394
 8001c3c:	40001000 	.word	0x40001000

08001c40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <MX_TIM7_Init+0x68>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59999;
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c56:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001c5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 89;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c64:	2259      	movs	r2, #89	@ 0x59
 8001c66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c6e:	480d      	ldr	r0, [pc, #52]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c70:	f002 fd08 	bl	8004684 <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c7a:	f7ff ff07 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c8c:	f002 ff7e 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c96:	f7ff fef9 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200003dc 	.word	0x200003dc
 8001ca8:	40001400 	.word	0x40001400

08001cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <HAL_TIM_Base_MspInit+0x80>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d116      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2036      	movs	r0, #54	@ 0x36
 8001ce0:	f001 fb61 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ce4:	2036      	movs	r0, #54	@ 0x36
 8001ce6:	f001 fb7a 	bl	80033de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001cea:	e01a      	b.n	8001d22 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_TIM_Base_MspInit+0x88>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d115      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_TIM_Base_MspInit+0x84>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2037      	movs	r0, #55	@ 0x37
 8001d18:	f001 fb45 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d1c:	2037      	movs	r0, #55	@ 0x37
 8001d1e:	f001 fb5e 	bl	80033de <HAL_NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40001000 	.word	0x40001000
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40001400 	.word	0x40001400

08001d38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d3e:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2500000;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d44:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <MX_USART1_UART_Init+0x50>)
 8001d46:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	@ (8001d80 <MX_USART1_UART_Init+0x48>)
 8001d6e:	f002 ff9d 	bl	8004cac <HAL_UART_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001d78:	f7ff fe88 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000424 	.word	0x20000424
 8001d84:	40011000 	.word	0x40011000
 8001d88:	002625a0 	.word	0x002625a0

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a35      	ldr	r2, [pc, #212]	@ (8001e80 <HAL_UART_MspInit+0xf4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d163      	bne.n	8001e76 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a33      	ldr	r2, [pc, #204]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_UART_MspInit+0xf8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4821      	ldr	r0, [pc, #132]	@ (8001e88 <HAL_UART_MspInit+0xfc>)
 8001e04:	f001 fdfe 	bl	8003a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e0a:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <HAL_UART_MspInit+0x104>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e44:	2204      	movs	r2, #4
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e48:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e5a:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e5c:	f001 fae8 	bl	8003430 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001e66:	f7ff fe11 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_UART_MspInit+0x100>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	2000046c 	.word	0x2000046c
 8001e90:	400264b8 	.word	0x400264b8

08001e94 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e98:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e9a:	490e      	ldr	r1, [pc, #56]	@ (8001ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ebe:	f7ff fe77 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f003 fb25 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec6:	f7ff f9b1 	bl	800122c <main>
  bx  lr    
 8001eca:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8001ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ed8:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8001edc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ee0:	200004d0 	.word	0x200004d0

08001ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f001 fa3d 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	200f      	movs	r0, #15
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fdbe 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fa63 	bl	8003416 <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f001 fa1d 	bl	80033a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000010 	.word	0x20000010
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	200004cc 	.word	0x200004cc

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200004cc 	.word	0x200004cc

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000010 	.word	0x20000010

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e033      	b.n	8002092 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fc8e 	bl	8000954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f93a 	bl	80022e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
 8002082:	e001      	b.n	8002088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e105      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x228>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d925      	bls.n	8002114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b1e      	subs	r3, #30
 80020de:	2207      	movs	r2, #7
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43da      	mvns	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	400a      	ands	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68d9      	ldr	r1, [r3, #12]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	4603      	mov	r3, r0
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4403      	add	r3, r0
 8002106:	3b1e      	subs	r3, #30
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	e022      	b.n	800215a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	2207      	movs	r2, #7
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	4603      	mov	r3, r0
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4403      	add	r3, r0
 8002150:	409a      	lsls	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d824      	bhi.n	80021ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b05      	subs	r3, #5
 8002174:	221f      	movs	r2, #31
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b05      	subs	r3, #5
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021aa:	e04c      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d824      	bhi.n	80021fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b23      	subs	r3, #35	@ 0x23
 80021c6:	221f      	movs	r2, #31
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43da      	mvns	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	400a      	ands	r2, r1
 80021d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	@ 0x23
 80021f0:	fa00 f203 	lsl.w	r2, r0, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80021fc:	e023      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b41      	subs	r3, #65	@ 0x41
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b41      	subs	r3, #65	@ 0x41
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_ADC_ConfigChannel+0x234>)
 8002248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	@ (80022d4 <HAL_ADC_ConfigChannel+0x238>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d109      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1cc>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b12      	cmp	r3, #18
 800225a:	d105      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_ADC_ConfigChannel+0x238>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d123      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x21e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d003      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x1e6>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b11      	cmp	r3, #17
 8002280:	d11b      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b10      	cmp	r3, #16
 8002294:	d111      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_ADC_ConfigChannel+0x23c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_ADC_ConfigChannel+0x240>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9a      	lsrs	r2, r3, #18
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	40012000 	.word	0x40012000
 80022d8:	20000008 	.word	0x20000008
 80022dc:	431bde83 	.word	0x431bde83

080022e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e8:	4b79      	ldr	r3, [pc, #484]	@ (80024d0 <ADC_Init+0x1f0>)
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	021a      	lsls	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <ADC_Init+0x1f4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	e00f      	b.n	80023de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0202 	bic.w	r2, r2, #2
 80023ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e1b      	ldrb	r3, [r3, #24]
 80023f8:	005a      	lsls	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800241a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800242a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	3b01      	subs	r3, #1
 8002438:	035a      	lsls	r2, r3, #13
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	e007      	b.n	8002454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002452:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	3b01      	subs	r3, #1
 8002470:	051a      	lsls	r2, r3, #20
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002496:	025a      	lsls	r2, r3, #9
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	029a      	lsls	r2, r3, #10
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40012300 	.word	0x40012300
 80024d4:	0f000001 	.word	0x0f000001

080024d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0ed      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fb38 	bl	8000b6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250c:	f7ff fd52 	bl	8001fb4 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002512:	e012      	b.n	800253a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002514:	f7ff fd4e 	bl	8001fb4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d90b      	bls.n	800253a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2205      	movs	r2, #5
 8002532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0c5      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0e5      	beq.n	8002514 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0202 	bic.w	r2, r2, #2
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff fd2c 	bl	8001fb4 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800255e:	e012      	b.n	8002586 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002560:	f7ff fd28 	bl	8001fb4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d90b      	bls.n	8002586 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e09f      	b.n	80026c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7e5b      	ldrb	r3, [r3, #25]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e9b      	ldrb	r3, [r3, #26]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0220 	bic.w	r2, r2, #32
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7edb      	ldrb	r3, [r3, #27]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0210 	bic.w	r2, r2, #16
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0210 	orr.w	r2, r2, #16
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7f1b      	ldrb	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e007      	b.n	8002666 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0208 	bic.w	r2, r2, #8
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f5b      	ldrb	r3, [r3, #29]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0204 	orr.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	ea42 0103 	orr.w	r1, r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d003      	beq.n	80026f6 <HAL_CAN_ConfigFilter+0x26>
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f040 80be 	bne.w	8002872 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026f6:	4b65      	ldr	r3, [pc, #404]	@ (800288c <HAL_CAN_ConfigFilter+0x1bc>)
 80026f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002710:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	431a      	orrs	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2201      	movs	r2, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	401a      	ands	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d123      	bne.n	80027a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800277a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3248      	adds	r2, #72	@ 0x48
 8002780:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002794:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002796:	6979      	ldr	r1, [r7, #20]
 8002798:	3348      	adds	r3, #72	@ 0x48
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d122      	bne.n	80027ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3248      	adds	r2, #72	@ 0x48
 80027ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027e4:	6979      	ldr	r1, [r7, #20]
 80027e6:	3348      	adds	r3, #72	@ 0x48
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	401a      	ands	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002808:	e007      	b.n	800281a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	431a      	orrs	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	401a      	ands	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002834:	e007      	b.n	8002846 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	431a      	orrs	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002864:	f023 0201 	bic.w	r2, r3, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e006      	b.n	8002880 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40006400 	.word	0x40006400

08002890 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d12e      	bne.n	8002902 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028bc:	f7ff fb7a 	bl	8001fb4 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028c2:	e012      	b.n	80028ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c4:	f7ff fb76 	bl	8001fb4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b0a      	cmp	r3, #10
 80028d0:	d90b      	bls.n	80028ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e012      	b.n	8002910 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e5      	bne.n	80028c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e006      	b.n	8002910 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d003      	beq.n	8002944 <HAL_CAN_AddTxMessage+0x2c>
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	2b02      	cmp	r3, #2
 8002940:	f040 80ad 	bne.w	8002a9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8095 	beq.w	8002a8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	0e1b      	lsrs	r3, r3, #24
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800296e:	2201      	movs	r2, #1
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	6809      	ldr	r1, [r1, #0]
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3318      	adds	r3, #24
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	440b      	add	r3, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e00f      	b.n	80029bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3318      	adds	r3, #24
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	440b      	add	r3, r1
 80029ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3318      	adds	r3, #24
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	440b      	add	r3, r1
 80029cc:	3304      	adds	r3, #4
 80029ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	7d1b      	ldrb	r3, [r3, #20]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d111      	bne.n	80029fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3318      	adds	r3, #24
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6811      	ldr	r1, [r2, #0]
 80029ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3318      	adds	r3, #24
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	440b      	add	r3, r1
 80029f8:	3304      	adds	r3, #4
 80029fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3307      	adds	r3, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	061a      	lsls	r2, r3, #24
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3306      	adds	r3, #6
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3305      	adds	r3, #5
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	3204      	adds	r2, #4
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	4610      	mov	r0, r2
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	ea43 0200 	orr.w	r2, r3, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3303      	adds	r3, #3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	061a      	lsls	r2, r3, #24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	4610      	mov	r0, r2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	6811      	ldr	r1, [r2, #0]
 8002a5a:	ea43 0200 	orr.w	r2, r3, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3318      	adds	r3, #24
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6811      	ldr	r1, [r2, #0]
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3318      	adds	r3, #24
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	440b      	add	r3, r1
 8002a88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e00e      	b.n	8002aac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e006      	b.n	8002aac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3724      	adds	r7, #36	@ 0x24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002acc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d003      	beq.n	8002adc <HAL_CAN_GetRxMessage+0x24>
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 8103 	bne.w	8002ce2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0f7      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0e8      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	331b      	adds	r3, #27
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0204 	and.w	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	331b      	adds	r3, #27
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0d5b      	lsrs	r3, r3, #21
 8002b4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e00b      	b.n	8002b6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	331b      	adds	r3, #27
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0202 	and.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	611a      	str	r2, [r3, #16]
 8002ba2:	e00b      	b.n	8002bbc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	331b      	adds	r3, #27
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	4413      	add	r3, r2
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0a1a      	lsrs	r2, r3, #8
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0c1a      	lsrs	r2, r3, #16
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3302      	adds	r3, #2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0e1a      	lsrs	r2, r3, #24
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3303      	adds	r3, #3
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3304      	adds	r3, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0a1a      	lsrs	r2, r3, #8
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3305      	adds	r3, #5
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0c1a      	lsrs	r2, r3, #16
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3306      	adds	r3, #6
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e1a      	lsrs	r2, r3, #24
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3307      	adds	r3, #7
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e007      	b.n	8002cde <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e006      	b.n	8002cf0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d002      	beq.n	8002d1a <HAL_CAN_ActivateNotification+0x1e>
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d109      	bne.n	8002d2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6959      	ldr	r1, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e006      	b.n	8002d3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	@ 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d07c      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d023      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f983 	bl	80030b6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002db0:	e016      	b.n	8002de0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc4:	e00c      	b.n	8002de0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd8:	e002      	b.n	8002de0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f989 	bl	80030f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002df2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f963 	bl	80030ca <HAL_CAN_TxMailbox1CompleteCallback>
 8002e04:	e016      	b.n	8002e34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e18:	e00c      	b.n	8002e34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2c:	e002      	b.n	8002e34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f969 	bl	8003106 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d024      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f943 	bl	80030de <HAL_CAN_TxMailbox2CompleteCallback>
 8002e58:	e016      	b.n	8002e88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	e00c      	b.n	8002e88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e80:	e002      	b.n	8002e88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f949 	bl	800311a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f930 	bl	800312e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe f8a0 	bl	800102c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00c      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f912 	bl	8003156 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8f9 	bl	8003142 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8fc 	bl	800316a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8f5 	bl	800317e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d07b      	beq.n	8003096 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d072      	beq.n	800308e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003002:	2b00      	cmp	r3, #0
 8003004:	d043      	beq.n	800308e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800300c:	2b00      	cmp	r3, #0
 800300e:	d03e      	beq.n	800308e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003016:	2b60      	cmp	r3, #96	@ 0x60
 8003018:	d02b      	beq.n	8003072 <HAL_CAN_IRQHandler+0x32a>
 800301a:	2b60      	cmp	r3, #96	@ 0x60
 800301c:	d82e      	bhi.n	800307c <HAL_CAN_IRQHandler+0x334>
 800301e:	2b50      	cmp	r3, #80	@ 0x50
 8003020:	d022      	beq.n	8003068 <HAL_CAN_IRQHandler+0x320>
 8003022:	2b50      	cmp	r3, #80	@ 0x50
 8003024:	d82a      	bhi.n	800307c <HAL_CAN_IRQHandler+0x334>
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d019      	beq.n	800305e <HAL_CAN_IRQHandler+0x316>
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d826      	bhi.n	800307c <HAL_CAN_IRQHandler+0x334>
 800302e:	2b30      	cmp	r3, #48	@ 0x30
 8003030:	d010      	beq.n	8003054 <HAL_CAN_IRQHandler+0x30c>
 8003032:	2b30      	cmp	r3, #48	@ 0x30
 8003034:	d822      	bhi.n	800307c <HAL_CAN_IRQHandler+0x334>
 8003036:	2b10      	cmp	r3, #16
 8003038:	d002      	beq.n	8003040 <HAL_CAN_IRQHandler+0x2f8>
 800303a:	2b20      	cmp	r3, #32
 800303c:	d005      	beq.n	800304a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800303e:	e01d      	b.n	800307c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003048:	e019      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	f043 0310 	orr.w	r3, r3, #16
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003052:	e014      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800305c:	e00f      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003066:	e00a      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003070:	e005      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800307a:	e000      	b.n	800307e <HAL_CAN_IRQHandler+0x336>
            break;
 800307c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800308c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2204      	movs	r2, #4
 8003094:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f872 	bl	8003192 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030ae:	bf00      	nop
 80030b0:	3728      	adds	r7, #40	@ 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4907      	ldr	r1, [pc, #28]	@ (8003244 <__NVIC_EnableIRQ+0x38>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000e100 	.word	0xe000e100

08003248 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db12      	blt.n	8003280 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	490a      	ldr	r1, [pc, #40]	@ (800328c <__NVIC_DisableIRQ+0x44>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	3320      	adds	r3, #32
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003274:	f3bf 8f4f 	dsb	sy
}
 8003278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800327a:	f3bf 8f6f 	isb	sy
}
 800327e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	@ (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff05 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b8:	f7ff ff1a 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 80033bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff8e 	bl	80032e4 <NVIC_EncodePriority>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff5d 	bl	8003290 <__NVIC_SetPriority>
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff0d 	bl	800320c <__NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff1d 	bl	8003248 <__NVIC_DisableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff94 	bl	800334c <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7fe fdba 	bl	8001fb4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e099      	b.n	8003580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	e00f      	b.n	800348e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346e:	f7fe fda1 	bl	8001fb4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b05      	cmp	r3, #5
 800347a:	d908      	bls.n	800348e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e078      	b.n	8003580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e8      	bne.n	800346e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_DMA_Init+0x158>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	4313      	orrs	r3, r2
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b04      	cmp	r3, #4
 8003520:	d117      	bne.n	8003552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9e9 	bl	800390c <DMA_CheckFifoParam>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	@ 0x40
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800354e:	2301      	movs	r3, #1
 8003550:	e016      	b.n	8003580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9a0 	bl	80038a0 <DMA_CalcBaseAndBitshift>
 8003560:	4603      	mov	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	223f      	movs	r2, #63	@ 0x3f
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	f010803f 	.word	0xf010803f

0800358c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003598:	4b8e      	ldr	r3, [pc, #568]	@ (80037d4 <HAL_DMA_IRQHandler+0x248>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a8e      	ldr	r2, [pc, #568]	@ (80037d8 <HAL_DMA_IRQHandler+0x24c>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	2208      	movs	r2, #8
 80035b8:	409a      	lsls	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01a      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	2208      	movs	r2, #8
 80035e6:	409a      	lsls	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d012      	beq.n	800362e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	2201      	movs	r2, #1
 800361c:	409a      	lsls	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003626:	f043 0202 	orr.w	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	2204      	movs	r2, #4
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003650:	2204      	movs	r2, #4
 8003652:	409a      	lsls	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2210      	movs	r2, #16
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d043      	beq.n	80036fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d03c      	beq.n	80036fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2210      	movs	r2, #16
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d018      	beq.n	80036ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d024      	beq.n	80036fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
 80036ba:	e01f      	b.n	80036fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e016      	b.n	80036fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0208 	bic.w	r2, r2, #8
 80036ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	2220      	movs	r2, #32
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 808f 	beq.w	800382c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8087 	beq.w	800382c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	2220      	movs	r2, #32
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b05      	cmp	r3, #5
 8003734:	d136      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0216 	bic.w	r2, r2, #22
 8003744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_DMA_IRQHandler+0x1da>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0208 	bic.w	r2, r2, #8
 8003774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	223f      	movs	r2, #63	@ 0x3f
 800377c:	409a      	lsls	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	2b00      	cmp	r3, #0
 8003798:	d07e      	beq.n	8003898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
        }
        return;
 80037a2:	e079      	b.n	8003898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01d      	beq.n	80037ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d031      	beq.n	800382c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e02c      	b.n	800382c <HAL_DMA_IRQHandler+0x2a0>
 80037d2:	bf00      	nop
 80037d4:	20000008 	.word	0x20000008
 80037d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d023      	beq.n	800382c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e01e      	b.n	800382c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10f      	bne.n	800381c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0210 	bic.w	r2, r2, #16
 800380a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d032      	beq.n	800389a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2205      	movs	r2, #5
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3301      	adds	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d307      	bcc.n	8003874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f2      	bne.n	8003858 <HAL_DMA_IRQHandler+0x2cc>
 8003872:	e000      	b.n	8003876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e000      	b.n	800389a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003898:	bf00      	nop
    }
  }
}
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3b10      	subs	r3, #16
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <DMA_CalcBaseAndBitshift+0x64>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ba:	4a13      	ldr	r2, [pc, #76]	@ (8003908 <DMA_CalcBaseAndBitshift+0x68>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d909      	bls.n	80038e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58
 80038e0:	e007      	b.n	80038f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	aaaaaaab 	.word	0xaaaaaaab
 8003908:	08005620 	.word	0x08005620

0800390c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d856      	bhi.n	80039da <DMA_CheckFifoParam+0xce>
 800392c:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <DMA_CheckFifoParam+0x28>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003945 	.word	0x08003945
 8003938:	08003957 	.word	0x08003957
 800393c:	08003945 	.word	0x08003945
 8003940:	080039db 	.word	0x080039db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d046      	beq.n	80039de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e043      	b.n	80039de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800395e:	d140      	bne.n	80039e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e03d      	b.n	80039e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396e:	d121      	bne.n	80039b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d837      	bhi.n	80039e6 <DMA_CheckFifoParam+0xda>
 8003976:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <DMA_CheckFifoParam+0x70>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003993 	.word	0x08003993
 8003984:	0800398d 	.word	0x0800398d
 8003988:	080039a5 	.word	0x080039a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e030      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d025      	beq.n	80039ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e022      	b.n	80039ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039ac:	d11f      	bne.n	80039ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039b2:	e01c      	b.n	80039ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d903      	bls.n	80039c2 <DMA_CheckFifoParam+0xb6>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d003      	beq.n	80039c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039c0:	e018      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      break;
 80039c6:	e015      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e00b      	b.n	80039f2 <DMA_CheckFifoParam+0xe6>
      break;
 80039da:	bf00      	nop
 80039dc:	e00a      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e008      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e2:	bf00      	nop
 80039e4:	e006      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
    }
  } 
  
  return status; 
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e16b      	b.n	8003cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 815a 	bne.w	8003cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80b4 	beq.w	8003cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b60      	ldr	r3, [pc, #384]	@ (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	4a5f      	ldr	r2, [pc, #380]	@ (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d14 <HAL_GPIO_Init+0x310>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_GPIO_Init+0x314>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d02b      	beq.n	8003c2a <HAL_GPIO_Init+0x226>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a51      	ldr	r2, [pc, #324]	@ (8003d1c <HAL_GPIO_Init+0x318>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d025      	beq.n	8003c26 <HAL_GPIO_Init+0x222>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a50      	ldr	r2, [pc, #320]	@ (8003d20 <HAL_GPIO_Init+0x31c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01f      	beq.n	8003c22 <HAL_GPIO_Init+0x21e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d24 <HAL_GPIO_Init+0x320>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d019      	beq.n	8003c1e <HAL_GPIO_Init+0x21a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4e      	ldr	r2, [pc, #312]	@ (8003d28 <HAL_GPIO_Init+0x324>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_GPIO_Init+0x216>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8003d2c <HAL_GPIO_Init+0x328>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00d      	beq.n	8003c16 <HAL_GPIO_Init+0x212>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8003d30 <HAL_GPIO_Init+0x32c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <HAL_GPIO_Init+0x20e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	@ (8003d34 <HAL_GPIO_Init+0x330>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_GPIO_Init+0x20a>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00e      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	e00c      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c12:	2306      	movs	r3, #6
 8003c14:	e00a      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c16:	2305      	movs	r3, #5
 8003c18:	e008      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	e006      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e004      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e002      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f002 0203 	and.w	r2, r2, #3
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	4093      	lsls	r3, r2
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c3c:	4935      	ldr	r1, [pc, #212]	@ (8003d14 <HAL_GPIO_Init+0x310>)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	3302      	adds	r3, #2
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6e:	4a32      	ldr	r2, [pc, #200]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c74:	4b30      	ldr	r3, [pc, #192]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c98:	4a27      	ldr	r2, [pc, #156]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9e:	4b26      	ldr	r3, [pc, #152]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cec:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <HAL_GPIO_Init+0x334>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	f67f ae90 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3724      	adds	r7, #36	@ 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40013800 	.word	0x40013800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40020c00 	.word	0x40020c00
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40021400 	.word	0x40021400
 8003d30:	40021800 	.word	0x40021800
 8003d34:	40021c00 	.word	0x40021c00
 8003d38:	40013c00 	.word	0x40013c00

08003d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e001      	b.n	8003d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d7c:	787b      	ldrb	r3, [r7, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d88:	e003      	b.n	8003d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	041a      	lsls	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	041a      	lsls	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e267      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003df2:	4b88      	ldr	r3, [pc, #544]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4b85      	ldr	r3, [pc, #532]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d112      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b82      	ldr	r3, [pc, #520]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4b7e      	ldr	r3, [pc, #504]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05b      	beq.n	8003edc <HAL_RCC_OscConfig+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d157      	bne.n	8003edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e242      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x74>
 8003e3a:	4b76      	ldr	r3, [pc, #472]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a75      	ldr	r2, [pc, #468]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x98>
 8003e52:	4b70      	ldr	r3, [pc, #448]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6f      	ldr	r2, [pc, #444]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6c      	ldr	r2, [pc, #432]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	4b69      	ldr	r3, [pc, #420]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a68      	ldr	r2, [pc, #416]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b66      	ldr	r3, [pc, #408]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f892 	bl	8001fb4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe f88e 	bl	8001fb4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e207      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xc0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f87e 	bl	8001fb4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f87a 	bl	8001fb4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	@ 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1f3      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b51      	ldr	r3, [pc, #324]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe8>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d063      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eea:	4b4a      	ldr	r3, [pc, #296]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b41      	ldr	r3, [pc, #260]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1c7      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4937      	ldr	r1, [pc, #220]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e03a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b34      	ldr	r3, [pc, #208]	@ (8004018 <HAL_RCC_OscConfig+0x244>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f833 	bl	8001fb4 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe f82f 	bl	8001fb4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1a8      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4925      	ldr	r1, [pc, #148]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b24      	ldr	r3, [pc, #144]	@ (8004018 <HAL_RCC_OscConfig+0x244>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe f812 	bl	8001fb4 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fe f80e 	bl	8001fb4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e187      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d036      	beq.n	800402c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc6:	4b15      	ldr	r3, [pc, #84]	@ (800401c <HAL_RCC_OscConfig+0x248>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fff2 	bl	8001fb4 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7fd ffee 	bl	8001fb4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e167      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x200>
 8003ff2:	e01b      	b.n	800402c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff4:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_OscConfig+0x248>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd ffdb 	bl	8001fb4 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	e00e      	b.n	8004020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004002:	f7fd ffd7 	bl	8001fb4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d907      	bls.n	8004020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e150      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
 8004014:	40023800 	.word	0x40023800
 8004018:	42470000 	.word	0x42470000
 800401c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ea      	bne.n	8004002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8097 	beq.w	8004168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403e:	4b81      	ldr	r3, [pc, #516]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	4b7d      	ldr	r3, [pc, #500]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	4a7c      	ldr	r2, [pc, #496]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	@ 0x40
 800405a:	4b7a      	ldr	r3, [pc, #488]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b77      	ldr	r3, [pc, #476]	@ (8004248 <HAL_RCC_OscConfig+0x474>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d118      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b74      	ldr	r3, [pc, #464]	@ (8004248 <HAL_RCC_OscConfig+0x474>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a73      	ldr	r2, [pc, #460]	@ (8004248 <HAL_RCC_OscConfig+0x474>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fd ff97 	bl	8001fb4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd ff93 	bl	8001fb4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e10c      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4b6a      	ldr	r3, [pc, #424]	@ (8004248 <HAL_RCC_OscConfig+0x474>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x2ea>
 80040b0:	4b64      	ldr	r3, [pc, #400]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b4:	4a63      	ldr	r2, [pc, #396]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80040bc:	e01c      	b.n	80040f8 <HAL_RCC_OscConfig+0x324>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x30c>
 80040c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 0304 	orr.w	r3, r3, #4
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0x324>
 80040e0:	4b58      	ldr	r3, [pc, #352]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	4a57      	ldr	r2, [pc, #348]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ec:	4b55      	ldr	r3, [pc, #340]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	4a54      	ldr	r2, [pc, #336]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 0304 	bic.w	r3, r3, #4
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d015      	beq.n	800412c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd ff58 	bl	8001fb4 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd ff54 	bl	8001fb4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0cb      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0ee      	beq.n	8004108 <HAL_RCC_OscConfig+0x334>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412c:	f7fd ff42 	bl	8001fb4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd ff3e 	bl	8001fb4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0b5      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414a:	4b3e      	ldr	r3, [pc, #248]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1ee      	bne.n	8004134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415c:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	4a38      	ldr	r2, [pc, #224]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004166:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a1 	beq.w	80042b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004172:	4b34      	ldr	r3, [pc, #208]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b08      	cmp	r3, #8
 800417c:	d05c      	beq.n	8004238 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d141      	bne.n	800420a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004186:	4b31      	ldr	r3, [pc, #196]	@ (800424c <HAL_RCC_OscConfig+0x478>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd ff12 	bl	8001fb4 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd ff0e 	bl	8001fb4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e087      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	491b      	ldr	r1, [pc, #108]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_RCC_OscConfig+0x478>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fd fee7 	bl	8001fb4 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ea:	f7fd fee3 	bl	8001fb4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e05c      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fc:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x416>
 8004208:	e054      	b.n	80042b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420a:	4b10      	ldr	r3, [pc, #64]	@ (800424c <HAL_RCC_OscConfig+0x478>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fd fed0 	bl	8001fb4 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd fecc 	bl	8001fb4 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e045      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_RCC_OscConfig+0x470>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x444>
 8004236:	e03d      	b.n	80042b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d107      	bne.n	8004250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e038      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
 8004244:	40023800 	.word	0x40023800
 8004248:	40007000 	.word	0x40007000
 800424c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d028      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d121      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d11a      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004288:	4293      	cmp	r3, r2
 800428a:	d111      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800

080042c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cc      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d8:	4b68      	ldr	r3, [pc, #416]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d90c      	bls.n	8004300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b65      	ldr	r3, [pc, #404]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b63      	ldr	r3, [pc, #396]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b8      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004318:	4b59      	ldr	r3, [pc, #356]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a58      	ldr	r2, [pc, #352]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004330:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a52      	ldr	r2, [pc, #328]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800433a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b50      	ldr	r3, [pc, #320]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	494d      	ldr	r1, [pc, #308]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d044      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b47      	ldr	r3, [pc, #284]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d119      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e07f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	2b03      	cmp	r3, #3
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e067      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4934      	ldr	r1, [pc, #208]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fd fdfe 	bl	8001fb4 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fd fdfa 	bl	8001fb4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 020c 	and.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1eb      	bne.n	80043bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b25      	ldr	r3, [pc, #148]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20c      	bcs.n	800440c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b22      	ldr	r3, [pc, #136]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e032      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4916      	ldr	r1, [pc, #88]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490e      	ldr	r1, [pc, #56]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444a:	f000 f821 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490a      	ldr	r1, [pc, #40]	@ (8004484 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a09      	ldr	r2, [pc, #36]	@ (8004488 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004466:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fd5e 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00
 8004480:	40023800 	.word	0x40023800
 8004484:	08005608 	.word	0x08005608
 8004488:	20000008 	.word	0x20000008
 800448c:	2000000c 	.word	0x2000000c

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004494:	b090      	sub	sp, #64	@ 0x40
 8004496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a8:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d00d      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x40>
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	f200 80a1 	bhi.w	80045fc <HAL_RCC_GetSysClockFreq+0x16c>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x34>
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x3a>
 80044c2:	e09b      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b53      	ldr	r3, [pc, #332]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x184>)
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c8:	e09b      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ca:	4b53      	ldr	r3, [pc, #332]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x188>)
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ce:	e098      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044da:	4b4d      	ldr	r3, [pc, #308]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	2200      	movs	r2, #0
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044f8:	2100      	movs	r1, #0
 80044fa:	4b47      	ldr	r3, [pc, #284]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x188>)
 80044fc:	fb03 f201 	mul.w	r2, r3, r1
 8004500:	2300      	movs	r3, #0
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	4413      	add	r3, r2
 8004508:	4a43      	ldr	r2, [pc, #268]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x188>)
 800450a:	fba0 1202 	umull	r1, r2, r0, r2
 800450e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004510:	460a      	mov	r2, r1
 8004512:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004516:	4413      	add	r3, r2
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	2200      	movs	r2, #0
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	61fa      	str	r2, [r7, #28]
 8004522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004526:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800452a:	f7fb fe4d 	bl	80001c8 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4613      	mov	r3, r2
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004536:	e053      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004538:	4b35      	ldr	r3, [pc, #212]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	2200      	movs	r2, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	617a      	str	r2, [r7, #20]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800454a:	f04f 0b00 	mov.w	fp, #0
 800454e:	4652      	mov	r2, sl
 8004550:	465b      	mov	r3, fp
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	0159      	lsls	r1, r3, #5
 800455c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004560:	0150      	lsls	r0, r2, #5
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	ebb2 080a 	subs.w	r8, r2, sl
 800456a:	eb63 090b 	sbc.w	r9, r3, fp
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800457a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800457e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004582:	ebb2 0408 	subs.w	r4, r2, r8
 8004586:	eb63 0509 	sbc.w	r5, r3, r9
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	00eb      	lsls	r3, r5, #3
 8004594:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004598:	00e2      	lsls	r2, r4, #3
 800459a:	4614      	mov	r4, r2
 800459c:	461d      	mov	r5, r3
 800459e:	eb14 030a 	adds.w	r3, r4, sl
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	eb45 030b 	adc.w	r3, r5, fp
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045b6:	4629      	mov	r1, r5
 80045b8:	028b      	lsls	r3, r1, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c0:	4621      	mov	r1, r4
 80045c2:	028a      	lsls	r2, r1, #10
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ca:	2200      	movs	r2, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	60fa      	str	r2, [r7, #12]
 80045d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d4:	f7fb fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004604:	4618      	mov	r0, r3
 8004606:	3740      	adds	r7, #64	@ 0x40
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	017d7840 	.word	0x017d7840

0800461c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000008 	.word	0x20000008

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a9b      	lsrs	r3, r3, #10
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	@ (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	08005618 	.word	0x08005618

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffdc 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	@ (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	08005618 	.word	0x08005618

08004684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e041      	b.n	800471a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fafe 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f000 f9b6 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04e      	b.n	80047da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d01d      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <HAL_TIM_Base_Start_IT+0xc8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40001800 	.word	0x40001800

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0202 	mvn.w	r2, #2
 8004838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8d2 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8c4 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8d5 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8ac 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f89e 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8af 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0208 	mvn.w	r2, #8
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f886 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f878 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f889 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2208      	movs	r2, #8
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f860 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f852 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f863 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fe40 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f982 	bl	8004c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f834 	bl	8004a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0220 	mvn.w	r2, #32
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f954 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a46      	ldr	r2, [pc, #280]	@ (8004b60 <TIM_Base_SetConfig+0x12c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d00f      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a43      	ldr	r2, [pc, #268]	@ (8004b64 <TIM_Base_SetConfig+0x130>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a42      	ldr	r2, [pc, #264]	@ (8004b68 <TIM_Base_SetConfig+0x134>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a41      	ldr	r2, [pc, #260]	@ (8004b6c <TIM_Base_SetConfig+0x138>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	@ (8004b70 <TIM_Base_SetConfig+0x13c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d108      	bne.n	8004a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a35      	ldr	r2, [pc, #212]	@ (8004b60 <TIM_Base_SetConfig+0x12c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a94:	d027      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a32      	ldr	r2, [pc, #200]	@ (8004b64 <TIM_Base_SetConfig+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d023      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a31      	ldr	r2, [pc, #196]	@ (8004b68 <TIM_Base_SetConfig+0x134>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01f      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a30      	ldr	r2, [pc, #192]	@ (8004b6c <TIM_Base_SetConfig+0x138>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8004b70 <TIM_Base_SetConfig+0x13c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d017      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b74 <TIM_Base_SetConfig+0x140>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b78 <TIM_Base_SetConfig+0x144>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00f      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b7c <TIM_Base_SetConfig+0x148>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b80 <TIM_Base_SetConfig+0x14c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b84 <TIM_Base_SetConfig+0x150>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <TIM_Base_SetConfig+0x154>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	@ (8004b60 <TIM_Base_SetConfig+0x12c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_Base_SetConfig+0xf8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <TIM_Base_SetConfig+0x13c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d105      	bne.n	8004b52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]
  }
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800
 8004b6c:	40000c00 	.word	0x40000c00
 8004b70:	40010400 	.word	0x40010400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800
 8004b80:	40001800 	.word	0x40001800
 8004b84:	40001c00 	.word	0x40001c00
 8004b88:	40002000 	.word	0x40002000

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e05a      	b.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf0:	d01d      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d10c      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40001800 	.word	0x40001800

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e042      	b.n	8004d44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd f85a 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	@ 0x24
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f991 	bl	8005018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	@ 0x28
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d175      	bne.n	8004e58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_UART_Transmit+0x2c>
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e06e      	b.n	8004e5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2221      	movs	r2, #33	@ 0x21
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d8a:	f7fd f913 	bl	8001fb4 <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da4:	d108      	bne.n	8004db8 <HAL_UART_Transmit+0x6c>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e003      	b.n	8004dc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dc0:	e02e      	b.n	8004e20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	@ 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f866 	bl	8004e9e <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e03a      	b.n	8004e5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e007      	b.n	8004e12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1cb      	bne.n	8004dc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2140      	movs	r1, #64	@ 0x40
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f832 	bl	8004e9e <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b2db      	uxtb	r3, r3
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eae:	e03b      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d037      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fd f87c 	bl	8001fb4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e03a      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d023      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b80      	cmp	r3, #128	@ 0x80
 8004ee4:	d020      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	d01d      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d116      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f81d 	bl	8004f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e00f      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d0b4      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b095      	sub	sp, #84	@ 0x54
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f78:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d119      	bne.n	8004ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe8:	61ba      	str	r2, [r7, #24]
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800500a:	bf00      	nop
 800500c:	3754      	adds	r7, #84	@ 0x54
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b0c0      	sub	sp, #256	@ 0x100
 800501e:	af00      	add	r7, sp, #0
 8005020:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	ea40 0301 	orr.w	r3, r0, r1
 8005040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005070:	f021 010c 	bic.w	r1, r1, #12
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800507e:	430b      	orrs	r3, r1
 8005080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	6999      	ldr	r1, [r3, #24]
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	ea40 0301 	orr.w	r3, r0, r1
 800509e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b8f      	ldr	r3, [pc, #572]	@ (80052e4 <UART_SetConfig+0x2cc>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <UART_SetConfig+0xa0>
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b8d      	ldr	r3, [pc, #564]	@ (80052e8 <UART_SetConfig+0x2d0>)
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d104      	bne.n	80050c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7ff fad0 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80050bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c0:	e003      	b.n	80050ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050c2:	f7ff fab7 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80050c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d4:	f040 810c 	bne.w	80052f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050f2:	415b      	adcs	r3, r3
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050fa:	4621      	mov	r1, r4
 80050fc:	eb12 0801 	adds.w	r8, r2, r1
 8005100:	4629      	mov	r1, r5
 8005102:	eb43 0901 	adc.w	r9, r3, r1
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511a:	4690      	mov	r8, r2
 800511c:	4699      	mov	r9, r3
 800511e:	4623      	mov	r3, r4
 8005120:	eb18 0303 	adds.w	r3, r8, r3
 8005124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005128:	462b      	mov	r3, r5
 800512a:	eb49 0303 	adc.w	r3, r9, r3
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800513e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005146:	460b      	mov	r3, r1
 8005148:	18db      	adds	r3, r3, r3
 800514a:	653b      	str	r3, [r7, #80]	@ 0x50
 800514c:	4613      	mov	r3, r2
 800514e:	eb42 0303 	adc.w	r3, r2, r3
 8005152:	657b      	str	r3, [r7, #84]	@ 0x54
 8005154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800515c:	f7fb f834 	bl	80001c8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4b61      	ldr	r3, [pc, #388]	@ (80052ec <UART_SetConfig+0x2d4>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011c      	lsls	r4, r3, #4
 800516e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005172:	2200      	movs	r2, #0
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005178:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800517c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	1891      	adds	r1, r2, r2
 8005186:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005188:	415b      	adcs	r3, r3
 800518a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800518c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005190:	4641      	mov	r1, r8
 8005192:	eb12 0a01 	adds.w	sl, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb43 0b01 	adc.w	fp, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	4692      	mov	sl, r2
 80051b2:	469b      	mov	fp, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051be:	464b      	mov	r3, r9
 80051c0:	eb4b 0303 	adc.w	r3, fp, r3
 80051c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051dc:	460b      	mov	r3, r1
 80051de:	18db      	adds	r3, r3, r3
 80051e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e2:	4613      	mov	r3, r2
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051f2:	f7fa ffe9 	bl	80001c8 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ec <UART_SetConfig+0x2d4>)
 80051fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2264      	movs	r2, #100	@ 0x64
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	1acb      	subs	r3, r1, r3
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005212:	4b36      	ldr	r3, [pc, #216]	@ (80052ec <UART_SetConfig+0x2d4>)
 8005214:	fba3 2302 	umull	r2, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005220:	441c      	add	r4, r3
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800522c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800523c:	415b      	adcs	r3, r3
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005244:	4641      	mov	r1, r8
 8005246:	1851      	adds	r1, r2, r1
 8005248:	6339      	str	r1, [r7, #48]	@ 0x30
 800524a:	4649      	mov	r1, r9
 800524c:	414b      	adcs	r3, r1
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800525c:	4659      	mov	r1, fp
 800525e:	00cb      	lsls	r3, r1, #3
 8005260:	4651      	mov	r1, sl
 8005262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005266:	4651      	mov	r1, sl
 8005268:	00ca      	lsls	r2, r1, #3
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	4603      	mov	r3, r0
 8005270:	4642      	mov	r2, r8
 8005272:	189b      	adds	r3, r3, r2
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005278:	464b      	mov	r3, r9
 800527a:	460a      	mov	r2, r1
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005290:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005298:	460b      	mov	r3, r1
 800529a:	18db      	adds	r3, r3, r3
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529e:	4613      	mov	r3, r2
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052ae:	f7fa ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <UART_SetConfig+0x2d4>)
 80052b8:	fba3 1302 	umull	r1, r3, r3, r2
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	2164      	movs	r1, #100	@ 0x64
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3332      	adds	r3, #50	@ 0x32
 80052ca:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <UART_SetConfig+0x2d4>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	f003 0207 	and.w	r2, r3, #7
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4422      	add	r2, r4
 80052de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e0:	e106      	b.n	80054f0 <UART_SetConfig+0x4d8>
 80052e2:	bf00      	nop
 80052e4:	40011000 	.word	0x40011000
 80052e8:	40011400 	.word	0x40011400
 80052ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005302:	4642      	mov	r2, r8
 8005304:	464b      	mov	r3, r9
 8005306:	1891      	adds	r1, r2, r2
 8005308:	6239      	str	r1, [r7, #32]
 800530a:	415b      	adcs	r3, r3
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
 800530e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005312:	4641      	mov	r1, r8
 8005314:	1854      	adds	r4, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb43 0501 	adc.w	r5, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	00eb      	lsls	r3, r5, #3
 8005326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532a:	00e2      	lsls	r2, r4, #3
 800532c:	4614      	mov	r4, r2
 800532e:	461d      	mov	r5, r3
 8005330:	4643      	mov	r3, r8
 8005332:	18e3      	adds	r3, r4, r3
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005338:	464b      	mov	r3, r9
 800533a:	eb45 0303 	adc.w	r3, r5, r3
 800533e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800534e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800535e:	4629      	mov	r1, r5
 8005360:	008b      	lsls	r3, r1, #2
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005368:	4621      	mov	r1, r4
 800536a:	008a      	lsls	r2, r1, #2
 800536c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005370:	f7fa ff2a 	bl	80001c8 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b60      	ldr	r3, [pc, #384]	@ (80054fc <UART_SetConfig+0x4e4>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011c      	lsls	r4, r3, #4
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800538c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	61b9      	str	r1, [r7, #24]
 800539c:	415b      	adcs	r3, r3
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6139      	str	r1, [r7, #16]
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053fc:	4649      	mov	r1, r9
 80053fe:	008b      	lsls	r3, r1, #2
 8005400:	4641      	mov	r1, r8
 8005402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005406:	4641      	mov	r1, r8
 8005408:	008a      	lsls	r2, r1, #2
 800540a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800540e:	f7fa fedb 	bl	80001c8 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4611      	mov	r1, r2
 8005418:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <UART_SetConfig+0x4e4>)
 800541a:	fba3 2301 	umull	r2, r3, r3, r1
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2264      	movs	r2, #100	@ 0x64
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	1acb      	subs	r3, r1, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	@ 0x32
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <UART_SetConfig+0x4e4>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005438:	441c      	add	r4, r3
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	673b      	str	r3, [r7, #112]	@ 0x70
 8005442:	677a      	str	r2, [r7, #116]	@ 0x74
 8005444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	415b      	adcs	r3, r3
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548a:	464b      	mov	r3, r9
 800548c:	460a      	mov	r2, r1
 800548e:	eb42 0303 	adc.w	r3, r2, r3
 8005492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	663b      	str	r3, [r7, #96]	@ 0x60
 800549e:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054ac:	4649      	mov	r1, r9
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	4641      	mov	r1, r8
 80054b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b6:	4641      	mov	r1, r8
 80054b8:	008a      	lsls	r2, r1, #2
 80054ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054be:	f7fa fe83 	bl	80001c8 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <UART_SetConfig+0x4e4>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	@ 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	@ 0x32
 80054da:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <UART_SetConfig+0x4e4>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4422      	add	r2, r4
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fc:	51eb851f 	.word	0x51eb851f

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	@ (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	@ (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	@ (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	@ (8005554 <__libc_init_array+0x44>)
 8005524:	f000 f818 	bl	8005558 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	08005630 	.word	0x08005630
 800554c:	08005630 	.word	0x08005630
 8005550:	08005630 	.word	0x08005630
 8005554:	08005634 	.word	0x08005634

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
