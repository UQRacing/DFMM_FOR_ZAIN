
DFMM_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005038  08005038  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005040  08005040  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005048  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          000004bc  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012958  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2c  00000000  00000000  0001999c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  0001c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  0001d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225db  00000000  00000000  0001e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b3a  00000000  00000000  00040939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2dfc  00000000  00000000  00055473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012826f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004290  00000000  00000000  001282b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012c544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fa4 	.word	0x08004fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004fa4 	.word	0x08004fa4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <setLED>:
uint16_t ASSI_Timecheck = 0;

int toggle = 0;

void setLED (int led, int RED, int GREEN, int BLUE)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	603b      	str	r3, [r7, #0]
    LED_Data[led][0] = led;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	b2d9      	uxtb	r1, r3
 80004ca:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <setLED+0x58>)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[led][1] = GREEN;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b2d9      	uxtb	r1, r3
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <setLED+0x58>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	460a      	mov	r2, r1
 80004e0:	705a      	strb	r2, [r3, #1]
    LED_Data[led][2] = RED;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <setLED+0x58>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	460a      	mov	r2, r1
 80004f0:	709a      	strb	r2, [r3, #2]
    LED_Data[led][3] = BLUE;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <setLED+0x58>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	460a      	mov	r2, r1
 8000500:	70da      	strb	r2, [r3, #3]
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000030 	.word	0x20000030

08000514 <ws2812_synchronous>:

void ws2812_synchronous (int GREEN, int RED, int BLUE)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	//Here I'm bit shifting the values from SetLED as the LED strip reads GRB values not RGB values
    uint32_t color = (GREEN << 8) | (RED<<4) | BLUE;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	61fb      	str	r3, [r7, #28]
    //Twice as many LED's lit up (i.e. if NUM_LED was 5, then sending 24 bytes for each LED (72 bits)
    //Would light up 10 LED's instead of 5 and these would be the wrong colour
    //Hence, I changed the sendData buffer to be a 12 byte array and this made the right number of LED's light up
    //But the colours being delivered are slightly off and the first LED turns green, (I'm not sure how to resolve this)
    uint8_t sendData[12];
    int indx = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 12; i >=0; i--)
 8000534:	230c      	movs	r3, #12
 8000536:	623b      	str	r3, [r7, #32]
 8000538:	e01b      	b.n	8000572 <ws2812_synchronous+0x5e>
    {
    	//The if statement below shifts the bit present to the least significant bit and checks if this is a 1 or 0
        if (((color >> i) & 0x01) == 1)
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	6a3b      	ldr	r3, [r7, #32]
 800053e:	fa22 f303 	lsr.w	r3, r2, r3
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <ws2812_synchronous+0x48>
            sendData[indx++] = 0b110;  // store 1
 800054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000550:	3328      	adds	r3, #40	@ 0x28
 8000552:	443b      	add	r3, r7
 8000554:	2206      	movs	r2, #6
 8000556:	f803 2c18 	strb.w	r2, [r3, #-24]
 800055a:	e007      	b.n	800056c <ws2812_synchronous+0x58>
        else
            sendData[indx++] = 0b100;  // store 0
 800055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	627a      	str	r2, [r7, #36]	@ 0x24
 8000562:	3328      	adds	r3, #40	@ 0x28
 8000564:	443b      	add	r3, r7
 8000566:	2204      	movs	r2, #4
 8000568:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 12; i >=0; i--)
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	3b01      	subs	r3, #1
 8000570:	623b      	str	r3, [r7, #32]
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dae0      	bge.n	800053a <ws2812_synchronous+0x26>
    }

    //Calling the DMA transmit function so that data can be sent
    //I'm using DMA as it results in the fastest data transfer and less lag
    HAL_UART_Transmit(&huart1, sendData, 12, HAL_MAX_DELAY);
 8000578:	f107 0110 	add.w	r1, r7, #16
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	220c      	movs	r2, #12
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <ws2812_synchronous+0x8c>)
 8000584:	f004 f908 	bl	8004798 <HAL_UART_Transmit>
    //The line below only allows data to be transmitted again after the data beforehand has been transmitted
    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY); // Wait for DMA transfer to complete
 8000588:	bf00      	nop
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <ws2812_synchronous+0x8c>)
 800058c:	f004 f98f 	bl	80048ae <HAL_UART_GetState>
 8000590:	4603      	mov	r3, r0
 8000592:	2b20      	cmp	r3, #32
 8000594:	d1f9      	bne.n	800058a <ws2812_synchronous+0x76>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000424 	.word	0x20000424

080005a4 <WS2812_Send>:

void WS2812_Send (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LED; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e016      	b.n	80005de <WS2812_Send+0x3a>
    {
        ws2812_synchronous(LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <WS2812_Send+0x50>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	4618      	mov	r0, r3
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <WS2812_Send+0x50>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <WS2812_Send+0x50>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	461a      	mov	r2, r3
 80005d4:	f7ff ff9e 	bl	8000514 <ws2812_synchronous>
    for (int i = 0; i < NUM_LED; i++)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b76      	cmp	r3, #118	@ 0x76
 80005e2:	dde5      	ble.n	80005b0 <WS2812_Send+0xc>
    }
    HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fa49 	bl	8001a7c <HAL_Delay>
 // Wait for all data to be latched
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030

080005f8 <ASSI_Off>:
//The functions above are essential to driving the LED's.
//The functions below are specifically for the ASSI status


void ASSI_Off(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

		for (int i=0; i< NUM_LED; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e008      	b.n	8000616 <ASSI_Off+0x1e>
		{
			setLED(i, 0,0,0);
 8000604:	2300      	movs	r3, #0
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff54 	bl	80004b8 <setLED>
		for (int i=0; i< NUM_LED; i++)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b76      	cmp	r3, #118	@ 0x76
 800061a:	ddf3      	ble.n	8000604 <ASSI_Off+0xc>
		}
		WS2812_Send();
 800061c:	f7ff ffc2 	bl	80005a4 <WS2812_Send>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ASSI_Emergency>:
		toggle = 0;
	}
}

void ASSI_Emergency(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
		//This is blue flashing lights
		//This is the colour data for a dark blue, light blue can be achieved by setLED(i,0,50,255);
		if (__HAL_TIM_GET_COUNTER(&htim7) - ASSI_Timecheck > 200 && toggle == 0) {
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <ASSI_Emergency+0xa8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <ASSI_Emergency+0xac>)
 8000636:	8812      	ldrh	r2, [r2, #0]
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2bc8      	cmp	r3, #200	@ 0xc8
 800063c:	d91e      	bls.n	800067c <ASSI_Emergency+0x54>
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <ASSI_Emergency+0xb0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d11a      	bne.n	800067c <ASSI_Emergency+0x54>
			//Setting the LED's blue initially
			for (int i =0; i<NUM_LED; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e008      	b.n	800065e <ASSI_Emergency+0x36>
			{
				setLED(i, 0, 200, 255);
 800064c:	23ff      	movs	r3, #255	@ 0xff
 800064e:	22c8      	movs	r2, #200	@ 0xc8
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff30 	bl	80004b8 <setLED>
			for (int i =0; i<NUM_LED; i++)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b76      	cmp	r3, #118	@ 0x76
 8000662:	ddf3      	ble.n	800064c <ASSI_Emergency+0x24>
				//The timings are slightly off hence why the G value is 100
			}
			//Sending this data to the strip
			WS2812_Send();
 8000664:	f7ff ff9e 	bl	80005a4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <ASSI_Emergency+0xb4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <ASSI_Emergency+0xac>)
 8000672:	801a      	strh	r2, [r3, #0]
			toggle = 1;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <ASSI_Emergency+0xb0>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
			}
			WS2812_Send();
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
			toggle = 0;
		}
}
 800067a:	e025      	b.n	80006c8 <ASSI_Emergency+0xa0>
		else if (__HAL_TIM_GET_COUNTER(&htim6) - ASSI_Timecheck > 80 && toggle == 1) {
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <ASSI_Emergency+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <ASSI_Emergency+0xac>)
 8000684:	8812      	ldrh	r2, [r2, #0]
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	2b50      	cmp	r3, #80	@ 0x50
 800068a:	d91d      	bls.n	80006c8 <ASSI_Emergency+0xa0>
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <ASSI_Emergency+0xb0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d119      	bne.n	80006c8 <ASSI_Emergency+0xa0>
			for (int i=0; i<NUM_LED; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	e008      	b.n	80006ac <ASSI_Emergency+0x84>
				setLED(i, 0,0,0);
 800069a:	2300      	movs	r3, #0
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	6838      	ldr	r0, [r7, #0]
 80006a2:	f7ff ff09 	bl	80004b8 <setLED>
			for (int i=0; i<NUM_LED; i++)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2b76      	cmp	r3, #118	@ 0x76
 80006b0:	ddf3      	ble.n	800069a <ASSI_Emergency+0x72>
			WS2812_Send();
 80006b2:	f7ff ff77 	bl	80005a4 <WS2812_Send>
			ASSI_Timecheck = __HAL_TIM_GET_COUNTER(&htim6);
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <ASSI_Emergency+0xb4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <ASSI_Emergency+0xac>)
 80006c0:	801a      	strh	r2, [r3, #0]
			toggle = 0;
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <ASSI_Emergency+0xb0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200003dc 	.word	0x200003dc
 80006d4:	2000020c 	.word	0x2000020c
 80006d8:	20000210 	.word	0x20000210
 80006dc:	20000394 	.word	0x20000394

080006e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_ADC1_Init+0x98>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <MX_ADC1_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ADC1_Init+0x98>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000722:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <MX_ADC1_Init+0xa0>)
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_ADC1_Init+0x98>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000742:	f001 f9bf 	bl	8001ac4 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 fef6 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000750:	2301      	movs	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_ADC1_Init+0x98>)
 8000762:	f001 f9f3 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 fee6 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000214 	.word	0x20000214
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_ADC2_Init+0x98>)
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <MX_ADC2_Init+0x9c>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_ADC2_Init+0x98>)
 800079e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_ADC2_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_ADC2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_ADC2_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_ADC2_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_ADC2_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_ADC2_Init+0x98>)
 80007c6:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <MX_ADC2_Init+0xa0>)
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_ADC2_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_ADC2_Init+0x98>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_ADC2_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_ADC2_Init+0x98>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e4:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_ADC2_Init+0x98>)
 80007e6:	f001 f96d 	bl	8001ac4 <HAL_ADC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 fea4 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_ADC2_Init+0x98>)
 8000806:	f001 f9a1 	bl	8001b4c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 fe94 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000025c 	.word	0x2000025c
 8000820:	40012100 	.word	0x40012100
 8000824:	0f000001 	.word	0x0f000001

08000828 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a2e      	ldr	r2, [pc, #184]	@ (8000900 <HAL_ADC_MspInit+0xd8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d128      	bne.n	800089c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a2c      	ldr	r2, [pc, #176]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANL1_Pin;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL1_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481c      	ldr	r0, [pc, #112]	@ (8000908 <HAL_ADC_MspInit+0xe0>)
 8000896:	f002 fddb 	bl	8003450 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800089a:	e02c      	b.n	80008f6 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	@ (800090c <HAL_ADC_MspInit+0xe4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d127      	bne.n	80008f6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_ADC_MspInit+0xdc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANL2_Pin;
 80008de:	2304      	movs	r3, #4
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL2_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <HAL_ADC_MspInit+0xe0>)
 80008f2:	f002 fdad 	bl	8003450 <HAL_GPIO_Init>
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40012000 	.word	0x40012000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000
 800090c:	40012100 	.word	0x40012100

08000910 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000914:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <MX_CAN1_Init+0x8c>)
 8000918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_CAN1_Init+0x88>)
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_CAN1_Init+0x88>)
 800092e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800093a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_CAN1_Init+0x88>)
 800093e:	2200      	movs	r2, #0
 8000940:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000944:	2200      	movs	r2, #0
 8000946:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_CAN1_Init+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_CAN1_Init+0x88>)
 800095c:	2200      	movs	r2, #0
 800095e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000962:	f001 fb11 	bl	8001f88 <HAL_CAN_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fde6 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_CAN1_Init+0x88>)
 8000972:	f001 fce5 	bl	8002340 <HAL_CAN_Start>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_CAN1_Init+0x70>
  {
	Error_Handler();
 800097c:	f000 fdde 	bl	800153c <Error_Handler>
  }
  TxHeader.IDE = CAN_ID_STD;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_CAN1_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = DFMM_ID;
 8000986:	f240 4246 	movw	r2, #1094	@ 0x446
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <MX_CAN1_Init+0x90>)
 800098c:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800098e:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <MX_CAN1_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000031c 	.word	0x2000031c
 800099c:	40006400 	.word	0x40006400
 80009a0:	200002a8 	.word	0x200002a8

080009a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009a8:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <MX_CAN2_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009c2:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80009c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009f4:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <MX_CAN2_Init+0x90>)
 80009f6:	f001 fac7 	bl	8001f88 <HAL_CAN_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000a00:	f000 fd9c 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000a04:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <MX_CAN2_Init+0x90>)
 8000a06:	f001 fc9b 	bl	8002340 <HAL_CAN_Start>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_CAN2_Init+0x70>
  {
	Error_Handler();
 8000a10:	f000 fd94 	bl	800153c <Error_Handler>
  }
  CAN_Set_Filter(17, &canfilter); // ALL messages sent to the DFMM must have channel id starting with 5
 8000a14:	4909      	ldr	r1, [pc, #36]	@ (8000a3c <MX_CAN2_Init+0x98>)
 8000a16:	2011      	movs	r0, #17
 8000a18:	f000 f990 	bl	8000d3c <CAN_Set_Filter>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) // Activates interrupt for received messages.
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_CAN2_Init+0x90>)
 8000a20:	f001 fec4 	bl	80027ac <HAL_CAN_ActivateNotification>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_CAN2_Init+0x8a>
  {
	Error_Handler();
 8000a2a:	f000 fd87 	bl	800153c <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000344 	.word	0x20000344
 8000a38:	40006800 	.word	0x40006800
 8000a3c:	200002f4 	.word	0x200002f4

08000a40 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b88 <HAL_CAN_MspInit+0x148>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d13e      	bne.n	8000ae0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a62:	4b4a      	ldr	r3, [pc, #296]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000a6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a6c:	4b47      	ldr	r3, [pc, #284]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d10d      	bne.n	8000a90 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000a7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	4b3e      	ldr	r3, [pc, #248]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a3d      	ldr	r2, [pc, #244]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000abe:	2309      	movs	r3, #9
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4832      	ldr	r0, [pc, #200]	@ (8000b94 <HAL_CAN_MspInit+0x154>)
 8000aca:	f002 fcc1 	bl	8003450 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2014      	movs	r0, #20
 8000ad4:	f002 f99b 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ad8:	2014      	movs	r0, #20
 8000ada:	f002 f9b4 	bl	8002e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000ade:	e04f      	b.n	8000b80 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <HAL_CAN_MspInit+0x158>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d14a      	bne.n	8000b80 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a27      	ldr	r2, [pc, #156]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000af4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000b0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_CAN_MspInit+0x14c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10d      	bne.n	8000b34 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_CAN_MspInit+0x150>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b50:	2360      	movs	r3, #96	@ 0x60
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b60:	2309      	movs	r3, #9
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <HAL_CAN_MspInit+0x15c>)
 8000b6c:	f002 fc70 	bl	8003450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2041      	movs	r0, #65	@ 0x41
 8000b76:	f002 f94a 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000b7a:	2041      	movs	r0, #65	@ 0x41
 8000b7c:	f002 f963 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	@ 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40006400 	.word	0x40006400
 8000b8c:	2000036c 	.word	0x2000036c
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40006800 	.word	0x40006800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <CAN_Send_Message>:
  * @brief  This function is used to transmit an array of 8 bytes over the CAN bus.
  * @param  Transmission_Data is a pointer to an array of 8 bytes, with each byte being one 2 digit hex code.
  * @retval void
  */
void CAN_Send_Message(uint8_t* Transmission_Data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	memset(TxData, 0, sizeof(TxData)); // Clear TxData array
 8000ba8:	2208      	movs	r2, #8
 8000baa:	2100      	movs	r1, #0
 8000bac:	4819      	ldr	r0, [pc, #100]	@ (8000c14 <CAN_Send_Message+0x74>)
 8000bae:	f004 f9cd 	bl	8004f4c <memset>
	length = (sizeof(Transmission_Data))/8; // Find length of message being sent
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <CAN_Send_Message+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length; // Set TxHeader register to have this message length
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <CAN_Send_Message+0x78>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <CAN_Send_Message+0x7c>)
 8000bc2:	611a      	str	r2, [r3, #16]
	TxHeader.StdId = DFMM_ID; // Set the standard ID of normal messages to be default DFMM ID
 8000bc4:	f240 4246 	movw	r2, #1094	@ 0x446
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <CAN_Send_Message+0x7c>)
 8000bca:	601a      	str	r2, [r3, #0]
	int i;
	for(i=0; i<(length-1); i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e00a      	b.n	8000be8 <CAN_Send_Message+0x48>
		*(TxData + i) = *(Transmission_Data + i); // iterate over length of message to copy into TxData array
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	490e      	ldr	r1, [pc, #56]	@ (8000c14 <CAN_Send_Message+0x74>)
 8000bdc:	440b      	add	r3, r1
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <CAN_Send_Message+0x78>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbed      	blt.n	8000bd2 <CAN_Send_Message+0x32>
	}
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <CAN_Send_Message+0x80>)
 8000bf8:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <CAN_Send_Message+0x74>)
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <CAN_Send_Message+0x7c>)
 8000bfc:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <CAN_Send_Message+0x84>)
 8000bfe:	f001 fbe3 	bl	80023c8 <HAL_CAN_AddTxMessage>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <CAN_Send_Message+0x6c>
	{
	   Error_Handler();
 8000c08:	f000 fc98 	bl	800153c <Error_Handler>
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200002c0 	.word	0x200002c0
 8000c18:	200002a4 	.word	0x200002a4
 8000c1c:	200002a8 	.word	0x200002a8
 8000c20:	200002f0 	.word	0x200002f0
 8000c24:	20000344 	.word	0x20000344

08000c28 <CAN_Send_Message_String>:
  * @brief  This function is used to transmit an array of an 8 byte string over the CAN bus.
  * @param  Transmission_Data is a string with maximum 8 bytes, which is transmitted over the CAN Bus.
  * @retval void
  */
void CAN_Send_Message_String(char* Transmission_Data)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	memset(TxData, 0, sizeof(TxData)); // Clear TxData array
 8000c30:	2208      	movs	r2, #8
 8000c32:	2100      	movs	r1, #0
 8000c34:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <CAN_Send_Message_String+0x74>)
 8000c36:	f004 f989 	bl	8004f4c <memset>
	length = (sizeof(Transmission_Data))/8; // Find length of message being sent
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <CAN_Send_Message_String+0x78>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length; // Set TxHeader register to have this message length
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <CAN_Send_Message_String+0x78>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <CAN_Send_Message_String+0x7c>)
 8000c4a:	611a      	str	r2, [r3, #16]
	TxHeader.StdId = DFMM_ID; // Set the standard ID of normal messages to be default DFMM ID
 8000c4c:	f240 4246 	movw	r2, #1094	@ 0x446
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <CAN_Send_Message_String+0x7c>)
 8000c52:	601a      	str	r2, [r3, #0]
	int i;
	for(i=0; i<(length-1); i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e00a      	b.n	8000c70 <CAN_Send_Message_String+0x48>
		*(TxData + i) = (unsigned int)((unsigned char)*(Transmission_Data + i)); // iterate over length of message to copy into TxData array
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	441a      	add	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	490e      	ldr	r1, [pc, #56]	@ (8000c9c <CAN_Send_Message_String+0x74>)
 8000c64:	440b      	add	r3, r1
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <CAN_Send_Message_String+0x78>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3b01      	subs	r3, #1
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbed      	blt.n	8000c5a <CAN_Send_Message_String+0x32>
	}
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <CAN_Send_Message_String+0x80>)
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <CAN_Send_Message_String+0x74>)
 8000c82:	4908      	ldr	r1, [pc, #32]	@ (8000ca4 <CAN_Send_Message_String+0x7c>)
 8000c84:	4809      	ldr	r0, [pc, #36]	@ (8000cac <CAN_Send_Message_String+0x84>)
 8000c86:	f001 fb9f 	bl	80023c8 <HAL_CAN_AddTxMessage>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <CAN_Send_Message_String+0x6c>
	{
	   Error_Handler();
 8000c90:	f000 fc54 	bl	800153c <Error_Handler>
	}
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200002c0 	.word	0x200002c0
 8000ca0:	200002a4 	.word	0x200002a4
 8000ca4:	200002a8 	.word	0x200002a8
 8000ca8:	200002f0 	.word	0x200002f0
 8000cac:	20000344 	.word	0x20000344

08000cb0 <CAN_Send_Datalogger>:
  * @brief  This function is used to transmit to the DataLogger once PC sends all three CAN Frames
  * @param  void
  * @retval void
  */
void CAN_Send_Datalogger(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	memset(TxData, 0, sizeof(TxData)); // Clear TxData array
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	2100      	movs	r1, #0
 8000cba:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <CAN_Send_Datalogger+0x74>)
 8000cbc:	f004 f946 	bl	8004f4c <memset>
	length = (sizeof(DataLogger))/8; // Find length of message being sent
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <CAN_Send_Datalogger+0x78>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	TxHeader.DLC = length; // Set TxHeader register to have this message length
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <CAN_Send_Datalogger+0x78>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <CAN_Send_Datalogger+0x7c>)
 8000cd0:	611a      	str	r2, [r3, #16]
	TxHeader.StdId = DFMM_ID; // CHANGE this line to the ID that the data logger wants
 8000cd2:	f240 4246 	movw	r2, #1094	@ 0x446
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <CAN_Send_Datalogger+0x7c>)
 8000cd8:	601a      	str	r2, [r3, #0]
	int i;
	for(i=0; i<(length-1); i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e00a      	b.n	8000cf6 <CAN_Send_Datalogger+0x46>
		*(TxData + i) = *(DataLogger + i); // iterate over length of message to copy into TxData array
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <CAN_Send_Datalogger+0x80>)
 8000ce4:	441a      	add	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	490e      	ldr	r1, [pc, #56]	@ (8000d24 <CAN_Send_Datalogger+0x74>)
 8000cea:	440b      	add	r3, r1
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	701a      	strb	r2, [r3, #0]
	for(i=0; i<(length-1); i++) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <CAN_Send_Datalogger+0x78>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbed      	blt.n	8000ce0 <CAN_Send_Datalogger+0x30>
	}

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <CAN_Send_Datalogger+0x84>)
 8000d06:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <CAN_Send_Datalogger+0x74>)
 8000d08:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <CAN_Send_Datalogger+0x7c>)
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <CAN_Send_Datalogger+0x88>)
 8000d0c:	f001 fb5c 	bl	80023c8 <HAL_CAN_AddTxMessage>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <CAN_Send_Datalogger+0x6a>
	{
	   Error_Handler();
 8000d16:	f000 fc11 	bl	800153c <Error_Handler>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200002c0 	.word	0x200002c0
 8000d28:	200002a4 	.word	0x200002a4
 8000d2c:	200002a8 	.word	0x200002a8
 8000d30:	200002c8 	.word	0x200002c8
 8000d34:	200002f0 	.word	0x200002f0
 8000d38:	2000031c 	.word	0x2000031c

08000d3c <CAN_Set_Filter>:


void CAN_Set_Filter(uint8_t FilterBank, CAN_FilterTypeDef *canhandler) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
    canhandler->FilterActivation = CAN_FILTER_ENABLE;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	621a      	str	r2, [r3, #32]
	canhandler->FilterBank = FilterBank;  // which filter bank to use from the assigned ones
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	615a      	str	r2, [r3, #20]
	canhandler->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
	canhandler->FilterIdHigh = 0x500<<5;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000d60:	601a      	str	r2, [r3, #0]
	canhandler->FilterIdLow = 0;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
	canhandler->FilterMaskIdHigh = 0xF00<<5;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f44f 32f0 	mov.w	r2, #122880	@ 0x1e000
 8000d6e:	609a      	str	r2, [r3, #8]
	canhandler->FilterMaskIdLow = 0;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
	canhandler->FilterMode = CAN_FILTERMODE_IDMASK;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
	canhandler->FilterScale = CAN_FILTERSCALE_32BIT;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	61da      	str	r2, [r3, #28]
	canhandler->SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	220e      	movs	r2, #14
 8000d86:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan2, canhandler);
 8000d88:	6839      	ldr	r1, [r7, #0]
 8000d8a:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <CAN_Set_Filter+0x5c>)
 8000d8c:	f001 f9f8 	bl	8002180 <HAL_CAN_ConfigFilter>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000344 	.word	0x20000344

08000d9c <ReceiveMessage>:

void ReceiveMessage(CAN_RxHeaderTypeDef *ReceptionHeader, uint8_t *Receive_Data) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	 * The sub if-else statement (if there is one) matches the received byte of the message at the 7th position to a set of static bytes corresponding to the flag
	 * being switched. The static byte (0x01, 0x02, 0x03, etc) must be changed in accordance with car
	 * messages AND the byte offset must be changed depending on the length of the message and where the byte
	 * is located (7th to 4th, etc).
	 */
	HAL_GPIO_TogglePin(ASSI_YELW_GPIO_Port, ASSI_YELW_Pin);
 8000da6:	2104      	movs	r1, #4
 8000da8:	4874      	ldr	r0, [pc, #464]	@ (8000f7c <ReceiveMessage+0x1e0>)
 8000daa:	f002 fd1e 	bl	80037ea <HAL_GPIO_TogglePin>
	if (ReceptionHeader->StdId == PC_ID_FRAME1) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d104      	bne.n	8000dc4 <ReceiveMessage+0x28>
		DataLogger[0] = *(Receive_Data); // First data logger byte stored in array DataLogger
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	4b70      	ldr	r3, [pc, #448]	@ (8000f80 <ReceiveMessage+0x1e4>)
 8000dc0:	701a      	strb	r2, [r3, #0]
		}
		else if (0x03 == *(Receive_Data + 7)) {
			EBS_Test_Accel_Stop = 1;
		}
	}
}
 8000dc2:	e0d7      	b.n	8000f74 <ReceiveMessage+0x1d8>
	else if (ReceptionHeader->StdId == PC_ID_FRAME2) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f240 5291 	movw	r2, #1425	@ 0x591
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d104      	bne.n	8000dda <ReceiveMessage+0x3e>
			DataLogger[1] = *(Receive_Data); // Second data logger byte stored in array DataLogger
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f80 <ReceiveMessage+0x1e4>)
 8000dd6:	705a      	strb	r2, [r3, #1]
}
 8000dd8:	e0cc      	b.n	8000f74 <ReceiveMessage+0x1d8>
	else if (ReceptionHeader->StdId == PC_ID_FRAME2) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f240 5291 	movw	r2, #1425	@ 0x591
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10b      	bne.n	8000dfe <ReceiveMessage+0x62>
				DataLogger[2] = *(Receive_Data); // Third data logger byte stored in array DataLogger
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	4b65      	ldr	r3, [pc, #404]	@ (8000f80 <ReceiveMessage+0x1e4>)
 8000dec:	709a      	strb	r2, [r3, #2]
				DataLogger[3] = av_status_hex;
 8000dee:	4b65      	ldr	r3, [pc, #404]	@ (8000f84 <ReceiveMessage+0x1e8>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	4b63      	ldr	r3, [pc, #396]	@ (8000f80 <ReceiveMessage+0x1e4>)
 8000df4:	70da      	strb	r2, [r3, #3]
				CAN_Send_Message(DataLogger); // Message is sent
 8000df6:	4862      	ldr	r0, [pc, #392]	@ (8000f80 <ReceiveMessage+0x1e4>)
 8000df8:	f7ff fed2 	bl	8000ba0 <CAN_Send_Message>
}
 8000dfc:	e0ba      	b.n	8000f74 <ReceiveMessage+0x1d8>
	else if (ReceptionHeader->StdId == M150_ID) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d168      	bne.n	8000edc <ReceiveMessage+0x140>
		HeartbeatCheck[0] = __HAL_TIM_GET_COUNTER(&htim7); // Sets Heartbeat for M150
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f88 <ReceiveMessage+0x1ec>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b5e      	ldr	r3, [pc, #376]	@ (8000f8c <ReceiveMessage+0x1f0>)
 8000e14:	701a      	strb	r2, [r3, #0]
		if (0x01 == *(Receive_Data + 7)) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3307      	adds	r3, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d103      	bne.n	8000e28 <ReceiveMessage+0x8c>
			EBS_Brake_Line = 1;
 8000e20:	4b5b      	ldr	r3, [pc, #364]	@ (8000f90 <ReceiveMessage+0x1f4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	e0a5      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x03 ==*(Receive_Data + 7)) {
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d103      	bne.n	8000e3a <ReceiveMessage+0x9e>
			Service_Brake_Check = 1;
 8000e32:	4b58      	ldr	r3, [pc, #352]	@ (8000f94 <ReceiveMessage+0x1f8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	e09c      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x04 == *(Receive_Data + 7)) {
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3307      	adds	r3, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d103      	bne.n	8000e4c <ReceiveMessage+0xb0>
			EBS_Sound = 1;
 8000e44:	4b54      	ldr	r3, [pc, #336]	@ (8000f98 <ReceiveMessage+0x1fc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	e093      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x05 == *(Receive_Data + 7)) {
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3307      	adds	r3, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d103      	bne.n	8000e5e <ReceiveMessage+0xc2>
			EBS_Sound = 2;
 8000e56:	4b50      	ldr	r3, [pc, #320]	@ (8000f98 <ReceiveMessage+0x1fc>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	701a      	strb	r2, [r3, #0]
}
 8000e5c:	e08a      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x06 ==*(Receive_Data + 7)) {
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3307      	adds	r3, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d103      	bne.n	8000e70 <ReceiveMessage+0xd4>
			Service_Brake_Check = 2;
 8000e68:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <ReceiveMessage+0x1f8>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	e081      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x07 == *(Receive_Data + 7)) {
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3307      	adds	r3, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	d103      	bne.n	8000e82 <ReceiveMessage+0xe6>
			EBS_Brake_Line = 0;
 8000e7a:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <ReceiveMessage+0x1f4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
}
 8000e80:	e078      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x09 == *(Receive_Data + 7)) {
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3307      	adds	r3, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	d103      	bne.n	8000e94 <ReceiveMessage+0xf8>
			EBS_Sound = 0;
 8000e8c:	4b42      	ldr	r3, [pc, #264]	@ (8000f98 <ReceiveMessage+0x1fc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	e06f      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x0A ==*(Receive_Data + 7)) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3307      	adds	r3, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b0a      	cmp	r3, #10
 8000e9c:	d103      	bne.n	8000ea6 <ReceiveMessage+0x10a>
			Service_Brake_Check = 0;
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <ReceiveMessage+0x1f8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
}
 8000ea4:	e066      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x0B == *(Receive_Data + 7)) {
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3307      	adds	r3, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b0b      	cmp	r3, #11
 8000eae:	d103      	bne.n	8000eb8 <ReceiveMessage+0x11c>
			Mission_Finished = 1;
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f9c <ReceiveMessage+0x200>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	e05d      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x0E == *(Receive_Data + 7)) {
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3307      	adds	r3, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b0e      	cmp	r3, #14
 8000ec0:	d103      	bne.n	8000eca <ReceiveMessage+0x12e>
			StrainGauge = 1;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	@ (8000fa0 <ReceiveMessage+0x204>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
}
 8000ec8:	e054      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x0F == *(Receive_Data + 7)) {
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3307      	adds	r3, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d14f      	bne.n	8000f74 <ReceiveMessage+0x1d8>
			StrainGauge = 0;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	@ (8000fa0 <ReceiveMessage+0x204>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	e04b      	b.n	8000f74 <ReceiveMessage+0x1d8>
	else if (ReceptionHeader->StdId == RES_ID) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d11a      	bne.n	8000f1e <ReceiveMessage+0x182>
			if (0x0B == *(Receive_Data + 7)) {
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3307      	adds	r3, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b0b      	cmp	r3, #11
 8000ef0:	d103      	bne.n	8000efa <ReceiveMessage+0x15e>
				RES = 1;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <ReceiveMessage+0x208>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
}
 8000ef8:	e03c      	b.n	8000f74 <ReceiveMessage+0x1d8>
			else if (0x0C == *(Receive_Data + 7)) {
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3307      	adds	r3, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0c      	cmp	r3, #12
 8000f02:	d103      	bne.n	8000f0c <ReceiveMessage+0x170>
				R2D = 1;
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <ReceiveMessage+0x20c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	e033      	b.n	8000f74 <ReceiveMessage+0x1d8>
			else if (0x0D == *(Receive_Data + 7)) {
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	3307      	adds	r3, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b0d      	cmp	r3, #13
 8000f14:	d12e      	bne.n	8000f74 <ReceiveMessage+0x1d8>
				R2D = 0;
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <ReceiveMessage+0x20c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	e02a      	b.n	8000f74 <ReceiveMessage+0x1d8>
	else if (ReceptionHeader->StdId == PC_ID) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d124      	bne.n	8000f74 <ReceiveMessage+0x1d8>
		HeartbeatCheck[1] = __HAL_TIM_GET_COUNTER(&htim7);
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <ReceiveMessage+0x1ec>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <ReceiveMessage+0x1f0>)
 8000f34:	705a      	strb	r2, [r3, #1]
		if (0x11 == *(Receive_Data + 7)) {}
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3307      	adds	r3, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b11      	cmp	r3, #17
 8000f3e:	d019      	beq.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x01 == *(Receive_Data + 7)) {
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	3307      	adds	r3, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d103      	bne.n	8000f52 <ReceiveMessage+0x1b6>
			EBS_Energy_Check = 1;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <ReceiveMessage+0x210>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	e010      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x02 == *(Receive_Data + 7)) {
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3307      	adds	r3, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d103      	bne.n	8000f64 <ReceiveMessage+0x1c8>
			EBS_Energy_Check = 0;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <ReceiveMessage+0x210>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	e007      	b.n	8000f74 <ReceiveMessage+0x1d8>
		else if (0x03 == *(Receive_Data + 7)) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3307      	adds	r3, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d102      	bne.n	8000f74 <ReceiveMessage+0x1d8>
			EBS_Test_Accel_Stop = 1;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <ReceiveMessage+0x214>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	200002c8 	.word	0x200002c8
 8000f84:	20000384 	.word	0x20000384
 8000f88:	200003dc 	.word	0x200003dc
 8000f8c:	20000390 	.word	0x20000390
 8000f90:	20000386 	.word	0x20000386
 8000f94:	20000387 	.word	0x20000387
 8000f98:	2000038a 	.word	0x2000038a
 8000f9c:	20000389 	.word	0x20000389
 8000fa0:	2000038d 	.word	0x2000038d
 8000fa4:	2000038b 	.word	0x2000038b
 8000fa8:	2000038c 	.word	0x2000038c
 8000fac:	20000385 	.word	0x20000385
 8000fb0:	2000038e 	.word	0x2000038e

08000fb4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	480a      	ldr	r0, [pc, #40]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000fc4:	f001 fad0 	bl	8002568 <HAL_CAN_GetRxMessage>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
		Error_Handler();
 8000fce:	f000 fab5 	bl	800153c <Error_Handler>
  }
  ReceiveMessage(&RxHeader, RxData);
 8000fd2:	4904      	ldr	r1, [pc, #16]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fd6:	f7ff fee1 	bl	8000d9c <ReceiveMessage>
 }
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002e8 	.word	0x200002e8
 8000fe8:	200002cc 	.word	0x200002cc
 8000fec:	20000344 	.word	0x20000344

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_DMA_Init+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <MX_DMA_Init+0x3c>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_DMA_Init+0x3c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2046      	movs	r0, #70	@ 0x46
 8001018:	f001 fef9 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800101c:	2046      	movs	r0, #70	@ 0x46
 800101e:	f001 ff12 	bl	8002e46 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b56      	ldr	r3, [pc, #344]	@ (80011a4 <MX_GPIO_Init+0x174>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b4f      	ldr	r3, [pc, #316]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <MX_GPIO_Init+0x174>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b4c      	ldr	r3, [pc, #304]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b48      	ldr	r3, [pc, #288]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a47      	ldr	r2, [pc, #284]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b45      	ldr	r3, [pc, #276]	@ (80011a4 <MX_GPIO_Init+0x174>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ASSI_BLUE_Pin|ASSI_YELW_Pin|AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2116      	movs	r1, #22
 800109e:	4842      	ldr	r0, [pc, #264]	@ (80011a8 <MX_GPIO_Init+0x178>)
 80010a0:	f002 fb8a 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AS_SDC_Pin|WDI_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80010aa:	4840      	ldr	r0, [pc, #256]	@ (80011ac <MX_GPIO_Init+0x17c>)
 80010ac:	f002 fb84 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ASSI_BLUE_Pin|ASSI_YELW_Pin|AS_CLOSE_SDC_Pin;
 80010b0:	2316      	movs	r3, #22
 80010b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	4838      	ldr	r0, [pc, #224]	@ (80011a8 <MX_GPIO_Init+0x178>)
 80010c8:	f002 f9c2 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BMS_FAULT_Pin|BSPD_FLT_Pin|WDG_STATUS_Pin;
 80010cc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80010d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	4833      	ldr	r0, [pc, #204]	@ (80011b0 <MX_GPIO_Init+0x180>)
 80010e2:	f002 f9b5 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_FAULT_Pin|ASMS_SIG_Pin;
 80010e6:	23c0      	movs	r3, #192	@ 0xc0
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	482d      	ldr	r0, [pc, #180]	@ (80011b0 <MX_GPIO_Init+0x180>)
 80010fa:	f002 f9a9 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _3V3_TS_SWITCH_Pin;
 80010fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(_3V3_TS_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4826      	ldr	r0, [pc, #152]	@ (80011ac <MX_GPIO_Init+0x17c>)
 8001114:	f002 f99c 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDC_CHECK_Pin;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001122:	2302      	movs	r3, #2
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDC_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	481f      	ldr	r0, [pc, #124]	@ (80011ac <MX_GPIO_Init+0x17c>)
 800112e:	f002 f98f 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AS_SDC_Pin|WDI_Pin;
 8001132:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4818      	ldr	r0, [pc, #96]	@ (80011ac <MX_GPIO_Init+0x17c>)
 800114c:	f002 f980 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDO_Pin;
 8001150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WDO_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4811      	ldr	r0, [pc, #68]	@ (80011ac <MX_GPIO_Init+0x17c>)
 8001166:	f002 f973 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_1_SIG_Pin|ROT_2_SIG_Pin;
 800116a:	23c0      	movs	r3, #192	@ 0xc0
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <MX_GPIO_Init+0x178>)
 800117e:	f002 f967 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_3_SIG_Pin|ROT_4_SIG_Pin;
 8001182:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_GPIO_Init+0x178>)
 8001198:	f002 f95a 	bl	8003450 <HAL_GPIO_Init>

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020000 	.word	0x40020000

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fbee 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f83e 	bl	800123c <SystemClock_Config>
  // Peripheral initialisation starts -------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f7ff ff36 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c4:	f7ff ff14 	bl	8000ff0 <MX_DMA_Init>
  MX_ADC1_Init();
 80011c8:	f7ff fa8a 	bl	80006e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80011cc:	f7ff fada 	bl	8000784 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80011d0:	f000 fb0a 	bl	80017e8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80011d4:	f000 fa56 	bl	8001684 <MX_TIM6_Init>
  MX_TIM7_Init();
 80011d8:	f000 fa8a 	bl	80016f0 <MX_TIM7_Init>
  MX_CAN2_Init();
 80011dc:	f7ff fbe2 	bl	80009a4 <MX_CAN2_Init>
  MX_CAN1_Init();
 80011e0:	f7ff fb96 	bl	8000910 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Initialise timer
 80011e4:	480f      	ldr	r0, [pc, #60]	@ (8001224 <main+0x70>)
 80011e6:	f002 ffc3 	bl	8004170 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Initialise timer
 80011ea:	480f      	ldr	r0, [pc, #60]	@ (8001228 <main+0x74>)
 80011ec:	f002 ffc0 	bl	8004170 <HAL_TIM_Base_Start_IT>

  // Peripheral initialisation complete -------------------------------------------------------

  Read_Rotary(&(State_Variables.R_S)); // Reads the current mission of the AV
 80011f0:	480e      	ldr	r0, [pc, #56]	@ (800122c <main+0x78>)
 80011f2:	f000 f901 	bl	80013f8 <Read_Rotary>
  ASSI_Off(); // Ensures ASSI output is off
 80011f6:	f7ff f9ff 	bl	80005f8 <ASSI_Off>
   * it will give a list of inputs (TS, SDC, ASMS). It will be 0 if low, 1 if high. The FAILURE_MODE struct will do
   * the same thing but for failure mode pins. Rotary Switch status is stored in indicators struct as well BUT
   * it is active high, so whichever mode is being used will need to be connected to ground.
   */
  while(1) {
	  CAN_Send_Message_String("OOGABOOG");
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <main+0x7c>)
 80011fc:	f7ff fd14 	bl	8000c28 <CAN_Send_Message_String>
	  CAN_Send_Datalogger();
 8001200:	f7ff fd56 	bl	8000cb0 <CAN_Send_Datalogger>
	  ReadInputs(indicators);
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <main+0x80>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8b7 	bl	800137c <ReadInputs>
	  ReadForFaults(&FAILURE_MODE, indicators);
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <main+0x80>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	@ (8001238 <main+0x84>)
 8001216:	f000 f927 	bl	8001468 <ReadForFaults>
	  HAL_Delay(200);
 800121a:	20c8      	movs	r0, #200	@ 0xc8
 800121c:	f000 fc2e 	bl	8001a7c <HAL_Delay>
	  CAN_Send_Message_String("OOGABOOG");
 8001220:	bf00      	nop
 8001222:	e7ea      	b.n	80011fa <main+0x46>
 8001224:	20000394 	.word	0x20000394
 8001228:	200003dc 	.word	0x200003dc
 800122c:	20000374 	.word	0x20000374
 8001230:	08004fbc 	.word	0x08004fbc
 8001234:	20000004 	.word	0x20000004
 8001238:	20000000 	.word	0x20000000

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	@ 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fe7e 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <SystemClock_Config+0xc8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <SystemClock_Config+0xc8>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <SystemClock_Config+0xc8>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <SystemClock_Config+0xcc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a20      	ldr	r2, [pc, #128]	@ (8001308 <SystemClock_Config+0xcc>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <SystemClock_Config+0xcc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80012b0:	2378      	movs	r3, #120	@ 0x78
 80012b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 faad 	bl	8003820 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012cc:	f000 f936 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fd0f 	bl	8003d10 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012f8:	f000 f920 	bl	800153c <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	@ 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle Watchdog
  if (htim == &htim7) // Heartbeat check may be faulty if nodes cannot meet timeout of 2s but still work. Scrap Heartbeat check in this case. Also refer to CAN source file to change Node ids (channel Ids) for respective nodes.
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d117      	bne.n	800134c <HAL_TIM_PeriodElapsedCallback+0x40>
  {
	  int i;
	  	for (i = 0; i < 1; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e011      	b.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  		if ((__HAL_TIM_GET_COUNTER(&htim6) - HeartbeatCheck[i]) > 2000) {
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	4911      	ldr	r1, [pc, #68]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	440a      	add	r2, r1
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001338:	d902      	bls.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x34>
	  			FAILURE_MODE = HEARTBEAT_FAULT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]
	  	for (i = 0; i < 1; i++) {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	ddea      	ble.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
	  			}
	  	}
  }

  if (htim == &htim7)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d104      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0x52>
    {
  	  HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin); // Toggle watchdog control pin
 8001354:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001358:	4807      	ldr	r0, [pc, #28]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800135a:	f002 fa46 	bl	80037ea <HAL_GPIO_TogglePin>
    }
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003dc 	.word	0x200003dc
 800136c:	20000394 	.word	0x20000394
 8001370:	20000390 	.word	0x20000390
 8001374:	20000000 	.word	0x20000000
 8001378:	40020400 	.word	0x40020400

0800137c <ReadInputs>:
/**
  * @brief  This function is used to change all variable in the indicator struct to their current state.
  * @param  indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void ReadInputs(AS__INDICATOR_STATES *indicators) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	Read_Rotary(&(indicators->R_S));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f835 	bl	80013f8 <Read_Rotary>
	indicators->TS = HAL_GPIO_ReadPin(_3V3_TS_SWITCH_GPIO_Port, _3V3_TS_SWITCH_Pin);
 800138e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001392:	4815      	ldr	r0, [pc, #84]	@ (80013e8 <ReadInputs+0x6c>)
 8001394:	f002 f9f8 	bl	8003788 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]
	indicators->SB = Service_Brake_Check; // Redundant
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <ReadInputs+0x70>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	60da      	str	r2, [r3, #12]
	indicators->SA = Steering_Actuator_Check; // Redundant
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <ReadInputs+0x74>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
	indicators->ASMS_Status = HAL_GPIO_ReadPin(ASMS_SIG_GPIO_Port, ASMS_SIG_Pin);
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <ReadInputs+0x78>)
 80013bc:	f002 f9e4 	bl	8003788 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	745a      	strb	r2, [r3, #17]
	indicators->SDC = HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin);
 80013c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013cc:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <ReadInputs+0x6c>)
 80013ce:	f002 f9db 	bl	8003788 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	749a      	strb	r2, [r3, #18]
	EBSCheck(indicators);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f890 	bl	8001500 <EBSCheck>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020400 	.word	0x40020400
 80013ec:	20000387 	.word	0x20000387
 80013f0:	20000388 	.word	0x20000388
 80013f4:	40020000 	.word	0x40020000

080013f8 <Read_Rotary>:
/**
  * @brief  This function is used to check what state the Rotary Switch is currently in.
  * @param  RS is a pointer to the Rotary Switch enum that corresponds to all the different states.
  * @retval void
  */
void Read_Rotary(ROT_SWITCH* RS) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// Rotary switch is active high
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_1_SIG_GPIO_Port, ROT_1_SIG_Pin)) {
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	4818      	ldr	r0, [pc, #96]	@ (8001464 <Read_Rotary+0x6c>)
 8001404:	f002 f9c0 	bl	8003788 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <Read_Rotary+0x1e>
		*RS = MANUAL;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
		*RS = EBS_TEST;
	}
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
		*RS = INSPECTION;
	}
}
 8001414:	e021      	b.n	800145a <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_2_SIG_GPIO_Port, ROT_2_SIG_Pin)) {
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	4812      	ldr	r0, [pc, #72]	@ (8001464 <Read_Rotary+0x6c>)
 800141a:	f002 f9b5 	bl	8003788 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <Read_Rotary+0x34>
		*RS = TRACK;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	e016      	b.n	800145a <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_3_SIG_GPIO_Port, ROT_3_SIG_Pin)) {
 800142c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <Read_Rotary+0x6c>)
 8001432:	f002 f9a9 	bl	8003788 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d103      	bne.n	8001444 <Read_Rotary+0x4c>
		*RS = EBS_TEST;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	e00a      	b.n	800145a <Read_Rotary+0x62>
	else if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
 8001444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <Read_Rotary+0x6c>)
 800144a:	f002 f99d 	bl	8003788 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <Read_Rotary+0x62>
		*RS = INSPECTION;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	701a      	strb	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020800 	.word	0x40020800

08001468 <ReadForFaults>:
  * @brief  This function reads the status of IMD, BSPD and BMS failure pins and changes the corresponding flags.
  * @param  fm is an enum that corresponds to the different types of failures that can occur in the AV.
  *			indicators is a pointer to the struct containing all state information.
  * @retval void
  */
void ReadForFaults(FAILURE_MODE_READING *Fm, AS__INDICATOR_STATES *indicators) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	if(HAL_GPIO_ReadPin(BMS_FAULT_GPIO_Port, BMS_FAULT_Pin) == 1) {
 8001472:	2110      	movs	r1, #16
 8001474:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <ReadForFaults+0x8c>)
 8001476:	f002 f987 	bl	8003788 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d103      	bne.n	8001488 <ReadForFaults+0x20>
		*Fm = BMS_FAULT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2205      	movs	r2, #5
 8001484:	701a      	strb	r2, [r3, #0]
		*Fm = SDC_FAILURE;
	}
	else if(StrainGauge == 1) {
		*Fm = SPRING_BROKE;
	}
}
 8001486:	e031      	b.n	80014ec <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(BSPD_FLT_GPIO_Port, BSPD_FLT_Pin) == 1) {
 8001488:	2120      	movs	r1, #32
 800148a:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <ReadForFaults+0x8c>)
 800148c:	f002 f97c 	bl	8003788 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d103      	bne.n	800149e <ReadForFaults+0x36>
		*Fm = BSPD_FAULT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2204      	movs	r2, #4
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	e026      	b.n	80014ec <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(IMD_FAULT_GPIO_Port, IMD_FAULT_Pin) == 1) {
 800149e:	2140      	movs	r1, #64	@ 0x40
 80014a0:	4814      	ldr	r0, [pc, #80]	@ (80014f4 <ReadForFaults+0x8c>)
 80014a2:	f002 f971 	bl	8003788 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d103      	bne.n	80014b4 <ReadForFaults+0x4c>
		*Fm = IMD_FAULT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	e01b      	b.n	80014ec <ReadForFaults+0x84>
	else if(indicators->EBS == 0) {
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	7c1b      	ldrb	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <ReadForFaults+0x5c>
		*Fm = EBS_FAILURE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	e013      	b.n	80014ec <ReadForFaults+0x84>
	else if(HAL_GPIO_ReadPin(SDC_CHECK_GPIO_Port, SDC_CHECK_Pin) == 0) {
 80014c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <ReadForFaults+0x90>)
 80014ca:	f002 f95d 	bl	8003788 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <ReadForFaults+0x74>
		*Fm = SDC_FAILURE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	e007      	b.n	80014ec <ReadForFaults+0x84>
	else if(StrainGauge == 1) {
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <ReadForFaults+0x94>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <ReadForFaults+0x84>
		*Fm = SPRING_BROKE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2207      	movs	r2, #7
 80014ea:	701a      	strb	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	2000038d 	.word	0x2000038d

08001500 <EBSCheck>:
/**
  * @brief  Performs initial checkup before going into Ready State from Idle.
  * @param  void
  * @retval void
  */
void EBSCheck(AS__INDICATOR_STATES *indicators) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if (EBS_Brake_Line == 1) {
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <EBSCheck+0x38>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d103      	bne.n	800151a <EBSCheck+0x1a>
		indicators->EBS = ACTIVATED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	741a      	strb	r2, [r3, #16]
	}
	else if (EBS_Brake_Line == 0) {
		indicators->EBS = DEACTIVATED;
	}
}
 8001518:	e007      	b.n	800152a <EBSCheck+0x2a>
	else if (EBS_Brake_Line == 0) {
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <EBSCheck+0x38>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <EBSCheck+0x2a>
		indicators->EBS = DEACTIVATED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	741a      	strb	r2, [r3, #16]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000386 	.word	0x20000386

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ASSI_Emergency();
 8001544:	f7ff f870 	bl	8000628 <ASSI_Emergency>
 8001548:	e7fc      	b.n	8001544 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 fa23 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <CAN1_RX0_IRQHandler+0x10>)
 8001602:	f001 f8f9 	bl	80027f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000031c 	.word	0x2000031c

08001610 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <TIM6_DAC_IRQHandler+0x10>)
 8001616:	f002 fe1b 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000394 	.word	0x20000394

08001624 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <TIM7_IRQHandler+0x10>)
 800162a:	f002 fe11 	bl	8004250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200003dc 	.word	0x200003dc

08001638 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <CAN2_RX1_IRQHandler+0x10>)
 800163e:	f001 f8db 	bl	80027f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000344 	.word	0x20000344

0800164c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA2_Stream7_IRQHandler+0x10>)
 8001652:	f001 fcc1 	bl	8002fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000046c 	.word	0x2000046c

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <MX_TIM6_Init+0x64>)
 8001694:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <MX_TIM6_Init+0x68>)
 8001696:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_TIM6_Init+0x64>)
 800169a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800169e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_TIM6_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24999;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_TIM6_Init+0x64>)
 80016a8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80016ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_TIM6_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <MX_TIM6_Init+0x64>)
 80016b6:	f002 fd0b 	bl	80040d0 <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016c0:	f7ff ff3c 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_TIM6_Init+0x64>)
 80016d2:	f002 ff81 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f7ff ff2e 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000394 	.word	0x20000394
 80016ec:	40001000 	.word	0x40001000

080016f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_TIM7_Init+0x64>)
 8001700:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <MX_TIM7_Init+0x68>)
 8001702:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59999;
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <MX_TIM7_Init+0x64>)
 8001706:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800170a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_TIM7_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 89;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <MX_TIM7_Init+0x64>)
 8001714:	2259      	movs	r2, #89	@ 0x59
 8001716:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_TIM7_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <MX_TIM7_Init+0x64>)
 8001720:	f002 fcd6 	bl	80040d0 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800172a:	f7ff ff07 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_TIM7_Init+0x64>)
 800173c:	f002 ff4c 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001746:	f7ff fef9 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200003dc 	.word	0x200003dc
 8001758:	40001400 	.word	0x40001400

0800175c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <HAL_TIM_Base_MspInit+0x80>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d116      	bne.n	800179c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2036      	movs	r0, #54	@ 0x36
 8001790:	f001 fb3d 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001794:	2036      	movs	r0, #54	@ 0x36
 8001796:	f001 fb56 	bl	8002e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800179a:	e01a      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_TIM_Base_MspInit+0x88>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d115      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2037      	movs	r0, #55	@ 0x37
 80017c8:	f001 fb21 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017cc:	2037      	movs	r0, #55	@ 0x37
 80017ce:	f001 fb3a 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40001000 	.word	0x40001000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40001400 	.word	0x40001400

080017e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 80017ee:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <MX_USART1_UART_Init+0x4c>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2500000;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 80017f4:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <MX_USART1_UART_Init+0x50>)
 80017f6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 800180c:	2208      	movs	r2, #8
 800180e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_USART1_UART_Init+0x48>)
 800181e:	f002 ff6b 	bl	80046f8 <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001828:	f7ff fe88 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000424 	.word	0x20000424
 8001834:	40011000 	.word	0x40011000
 8001838:	002625a0 	.word	0x002625a0

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a35      	ldr	r2, [pc, #212]	@ (8001930 <HAL_UART_MspInit+0xf4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d163      	bne.n	8001926 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	4a33      	ldr	r2, [pc, #204]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6453      	str	r3, [r2, #68]	@ 0x44
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <HAL_UART_MspInit+0xf8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001896:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4821      	ldr	r0, [pc, #132]	@ (8001938 <HAL_UART_MspInit+0xfc>)
 80018b4:	f001 fdcc 	bl	8003450 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018b8:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <HAL_UART_MspInit+0x104>)
 80018bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018c8:	2240      	movs	r2, #64	@ 0x40
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018f4:	2204      	movs	r2, #4
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_UART_MspInit+0x100>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_UART_MspInit+0x100>)
 8001900:	2200      	movs	r2, #0
 8001902:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_UART_MspInit+0x100>)
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800190a:	480c      	ldr	r0, [pc, #48]	@ (800193c <HAL_UART_MspInit+0x100>)
 800190c:	f001 fab6 	bl	8002e7c <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001916:	f7ff fe11 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_UART_MspInit+0x100>)
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_UART_MspInit+0x100>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40011000 	.word	0x40011000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	2000046c 	.word	0x2000046c
 8001940:	400264b8 	.word	0x400264b8

08001944 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	@ (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	@ (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff fe77 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f003 faf3 	bl	8004f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fc1d 	bl	80011b4 <main>
  bx  lr    
 800197a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001988:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 800198c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001990:	200004d0 	.word	0x200004d0

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f001 fa19 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	200f      	movs	r0, #15
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fdbe 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fa31 	bl	8002e62 <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f001 f9f9 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000010 	.word	0x20000010
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	200004cc 	.word	0x200004cc

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200004cc 	.word	0x200004cc

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000010 	.word	0x20000010

08001ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e033      	b.n	8001b42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fea0 	bl	8000828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b0a:	f023 0302 	bic.w	r3, r3, #2
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f93a 	bl	8001d90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1c>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e105      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x228>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b09      	cmp	r3, #9
 8001b76:	d925      	bls.n	8001bc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68d9      	ldr	r1, [r3, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4403      	add	r3, r0
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e022      	b.n	8001c0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2207      	movs	r2, #7
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4403      	add	r3, r0
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d824      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b05      	subs	r3, #5
 8001c24:	221f      	movs	r2, #31
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b05      	subs	r3, #5
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5a:	e04c      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d824      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b23      	subs	r3, #35	@ 0x23
 8001c76:	221f      	movs	r2, #31
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	400a      	ands	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b23      	subs	r3, #35	@ 0x23
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cac:	e023      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b41      	subs	r3, #65	@ 0x41
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b41      	subs	r3, #65	@ 0x41
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_ADC_ConfigChannel+0x234>)
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d123      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d003      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x1e6>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_ADC_ConfigChannel+0x23c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	@ (8001d8c <HAL_ADC_ConfigChannel+0x240>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d98:	4b79      	ldr	r3, [pc, #484]	@ (8001f80 <ADC_Init+0x1f0>)
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	021a      	lsls	r2, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	4a58      	ldr	r2, [pc, #352]	@ (8001f84 <ADC_Init+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d022      	beq.n	8001e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e00f      	b.n	8001e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0202 	bic.w	r2, r2, #2
 8001e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
 8001ea8:	005a      	lsls	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	035a      	lsls	r2, r3, #13
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e007      	b.n	8001f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	051a      	lsls	r2, r3, #20
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f46:	025a      	lsls	r2, r3, #9
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	029a      	lsls	r2, r3, #10
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40012300 	.word	0x40012300
 8001f84:	0f000001 	.word	0x0f000001

08001f88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0ed      	b.n	8002176 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd4a 	bl	8000a40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fbc:	f7ff fd52 	bl	8001a64 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fc2:	e012      	b.n	8001fea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fc4:	f7ff fd4e 	bl	8001a64 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b0a      	cmp	r3, #10
 8001fd0:	d90b      	bls.n	8001fea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0c5      	b.n	8002176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0e5      	beq.n	8001fc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0202 	bic.w	r2, r2, #2
 8002006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff fd2c 	bl	8001a64 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800200e:	e012      	b.n	8002036 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002010:	f7ff fd28 	bl	8001a64 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d90b      	bls.n	8002036 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e09f      	b.n	8002176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e5      	bne.n	8002010 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e007      	b.n	800206e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7e5b      	ldrb	r3, [r3, #25]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e007      	b.n	8002098 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7e9b      	ldrb	r3, [r3, #26]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e007      	b.n	80020c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0220 	bic.w	r2, r2, #32
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7edb      	ldrb	r3, [r3, #27]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0210 	bic.w	r2, r2, #16
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e007      	b.n	80020ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0210 	orr.w	r2, r2, #16
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7f1b      	ldrb	r3, [r3, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e007      	b.n	8002116 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f5b      	ldrb	r3, [r3, #29]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d108      	bne.n	8002130 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0204 	orr.w	r2, r2, #4
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e007      	b.n	8002140 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	ea42 0103 	orr.w	r1, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_ConfigFilter+0x26>
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	f040 80be 	bne.w	8002322 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_CAN_ConfigFilter+0x1bc>)
 80021a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021c0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2201      	movs	r2, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	401a      	ands	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d123      	bne.n	8002250 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800222a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3248      	adds	r2, #72	@ 0x48
 8002230:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002244:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002246:	6979      	ldr	r1, [r7, #20]
 8002248:	3348      	adds	r3, #72	@ 0x48
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d122      	bne.n	800229e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	431a      	orrs	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002278:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3248      	adds	r2, #72	@ 0x48
 800227e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002292:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	3348      	adds	r3, #72	@ 0x48
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80022b8:	e007      	b.n	80022ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80022e4:	e007      	b.n	80022f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	431a      	orrs	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002314:	f023 0201 	bic.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e006      	b.n	8002330 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
  }
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40006400 	.word	0x40006400

08002340 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d12e      	bne.n	80023b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff fb7a 	bl	8001a64 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002372:	e012      	b.n	800239a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002374:	f7ff fb76 	bl	8001a64 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d90b      	bls.n	800239a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e012      	b.n	80023c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e5      	bne.n	8002374 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e006      	b.n	80023c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d003      	beq.n	80023f4 <HAL_CAN_AddTxMessage+0x2c>
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	f040 80ad 	bne.w	800254e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8095 	beq.w	800253e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	0e1b      	lsrs	r3, r3, #24
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800241e:	2201      	movs	r2, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10d      	bne.n	800244c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	6809      	ldr	r1, [r1, #0]
 800243e:	431a      	orrs	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3318      	adds	r3, #24
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	440b      	add	r3, r1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00f      	b.n	800246c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002456:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800245c:	68f9      	ldr	r1, [r7, #12]
 800245e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002460:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3318      	adds	r3, #24
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	440b      	add	r3, r1
 800246a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3318      	adds	r3, #24
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	440b      	add	r3, r1
 800247c:	3304      	adds	r3, #4
 800247e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	7d1b      	ldrb	r3, [r3, #20]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d111      	bne.n	80024ac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3318      	adds	r3, #24
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6811      	ldr	r1, [r2, #0]
 800249c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3318      	adds	r3, #24
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	440b      	add	r3, r1
 80024a8:	3304      	adds	r3, #4
 80024aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3307      	adds	r3, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	061a      	lsls	r2, r3, #24
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3306      	adds	r3, #6
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3305      	adds	r3, #5
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4313      	orrs	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	3204      	adds	r2, #4
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	4610      	mov	r0, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6811      	ldr	r1, [r2, #0]
 80024d4:	ea43 0200 	orr.w	r2, r3, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	440b      	add	r3, r1
 80024de:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80024e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3303      	adds	r3, #3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	061a      	lsls	r2, r3, #24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3302      	adds	r3, #2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3301      	adds	r3, #1
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	4313      	orrs	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	4610      	mov	r0, r2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	6811      	ldr	r1, [r2, #0]
 800250a:	ea43 0200 	orr.w	r2, r3, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	440b      	add	r3, r1
 8002514:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002518:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3318      	adds	r3, #24
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6811      	ldr	r1, [r2, #0]
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3318      	adds	r3, #24
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	440b      	add	r3, r1
 8002538:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e00e      	b.n	800255c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e006      	b.n	800255c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3724      	adds	r7, #36	@ 0x24
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d003      	beq.n	800258c <HAL_CAN_GetRxMessage+0x24>
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b02      	cmp	r3, #2
 8002588:	f040 8103 	bne.w	8002792 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d116      	bne.n	80025ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0f7      	b.n	80027a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0e8      	b.n	80027a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	331b      	adds	r3, #27
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0204 	and.w	r2, r3, #4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10c      	bne.n	8002606 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	331b      	adds	r3, #27
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0d5b      	lsrs	r3, r3, #21
 80025fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e00b      	b.n	800261e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	331b      	adds	r3, #27
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	331b      	adds	r3, #27
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0202 	and.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	331b      	adds	r3, #27
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2208      	movs	r2, #8
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	e00b      	b.n	800266c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	331b      	adds	r3, #27
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4413      	add	r3, r2
 8002660:	3304      	adds	r3, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	331b      	adds	r3, #27
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b2da      	uxtb	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	331b      	adds	r3, #27
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0a1a      	lsrs	r2, r3, #8
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0c1a      	lsrs	r2, r3, #16
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	3302      	adds	r3, #2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e1a      	lsrs	r2, r3, #24
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3303      	adds	r3, #3
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4413      	add	r3, r2
 800270a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3304      	adds	r3, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0a1a      	lsrs	r2, r3, #8
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3305      	adds	r3, #5
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0c1a      	lsrs	r2, r3, #16
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3306      	adds	r3, #6
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0e1a      	lsrs	r2, r3, #24
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3307      	adds	r3, #7
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d108      	bne.n	800277e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	e007      	b.n	800278e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e006      	b.n	80027a0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d002      	beq.n	80027ca <HAL_CAN_ActivateNotification+0x1e>
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d109      	bne.n	80027de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6959      	ldr	r1, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e006      	b.n	80027ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
  }
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07c      	beq.n	8002938 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f983 	bl	8002b66 <HAL_CAN_TxMailbox0CompleteCallback>
 8002860:	e016      	b.n	8002890 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
 8002874:	e00c      	b.n	8002890 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
 8002888:	e002      	b.n	8002890 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f989 	bl	8002ba2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f963 	bl	8002b7a <HAL_CAN_TxMailbox1CompleteCallback>
 80028b4:	e016      	b.n	80028e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c8:	e00c      	b.n	80028e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
 80028dc:	e002      	b.n	80028e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f969 	bl	8002bb6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d024      	beq.n	8002938 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f943 	bl	8002b8e <HAL_CAN_TxMailbox2CompleteCallback>
 8002908:	e016      	b.n	8002938 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
 800291c:	e00c      	b.n	8002938 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002930:	e002      	b.n	8002938 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f949 	bl	8002bca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2208      	movs	r2, #8
 8002976:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f930 	bl	8002bde <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fb0c 	bl	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f912 	bl	8002c06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8f9 	bl	8002bf2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8fc 	bl	8002c1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8f5 	bl	8002c2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07b      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d072      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d043      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03e      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ac6:	2b60      	cmp	r3, #96	@ 0x60
 8002ac8:	d02b      	beq.n	8002b22 <HAL_CAN_IRQHandler+0x32a>
 8002aca:	2b60      	cmp	r3, #96	@ 0x60
 8002acc:	d82e      	bhi.n	8002b2c <HAL_CAN_IRQHandler+0x334>
 8002ace:	2b50      	cmp	r3, #80	@ 0x50
 8002ad0:	d022      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x320>
 8002ad2:	2b50      	cmp	r3, #80	@ 0x50
 8002ad4:	d82a      	bhi.n	8002b2c <HAL_CAN_IRQHandler+0x334>
 8002ad6:	2b40      	cmp	r3, #64	@ 0x40
 8002ad8:	d019      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x316>
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d826      	bhi.n	8002b2c <HAL_CAN_IRQHandler+0x334>
 8002ade:	2b30      	cmp	r3, #48	@ 0x30
 8002ae0:	d010      	beq.n	8002b04 <HAL_CAN_IRQHandler+0x30c>
 8002ae2:	2b30      	cmp	r3, #48	@ 0x30
 8002ae4:	d822      	bhi.n	8002b2c <HAL_CAN_IRQHandler+0x334>
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d002      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x2f8>
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d005      	beq.n	8002afa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002aee:	e01d      	b.n	8002b2c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002af8:	e019      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b02:	e014      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	f043 0320 	orr.w	r3, r3, #32
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b0c:	e00f      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b16:	e00a      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b20:	e005      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b2a:	e000      	b.n	8002b2e <HAL_CAN_IRQHandler+0x336>
            break;
 8002b2c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b3c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2204      	movs	r2, #4
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f872 	bl	8002c42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	@ 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8a:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60d3      	str	r3, [r2, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	@ (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	@ (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	@ (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	@ 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff29 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff3e 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff31 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7fe fdec 	bl	8001a64 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e099      	b.n	8002fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb8:	e00f      	b.n	8002eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eba:	f7fe fdd3 	bl	8001a64 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d908      	bls.n	8002eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e078      	b.n	8002fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e8      	bne.n	8002eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <HAL_DMA_Init+0x158>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d107      	bne.n	8002f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d117      	bne.n	8002f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9e9 	bl	8003358 <DMA_CheckFifoParam>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e016      	b.n	8002fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9a0 	bl	80032ec <DMA_CalcBaseAndBitshift>
 8002fac:	4603      	mov	r3, r0
 8002fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	223f      	movs	r2, #63	@ 0x3f
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	f010803f 	.word	0xf010803f

08002fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fe4:	4b8e      	ldr	r3, [pc, #568]	@ (8003220 <HAL_DMA_IRQHandler+0x248>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a8e      	ldr	r2, [pc, #568]	@ (8003224 <HAL_DMA_IRQHandler+0x24c>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0a9b      	lsrs	r3, r3, #10
 8002ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	2208      	movs	r2, #8
 8003004:	409a      	lsls	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0204 	bic.w	r2, r2, #4
 800302a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	2208      	movs	r2, #8
 8003032:	409a      	lsls	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	2201      	movs	r2, #1
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	f043 0202 	orr.w	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	2204      	movs	r2, #4
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	2204      	movs	r2, #4
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	f043 0204 	orr.w	r2, r3, #4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	2210      	movs	r2, #16
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d043      	beq.n	8003148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d03c      	beq.n	8003148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	2210      	movs	r2, #16
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d108      	bne.n	8003108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d024      	beq.n	8003148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e01f      	b.n	8003148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
 8003118:	e016      	b.n	8003148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0208 	bic.w	r2, r2, #8
 8003136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2220      	movs	r2, #32
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 808f 	beq.w	8003278 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8087 	beq.w	8003278 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316e:	2220      	movs	r2, #32
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b05      	cmp	r3, #5
 8003180:	d136      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0216 	bic.w	r2, r2, #22
 8003190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x1da>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0208 	bic.w	r2, r2, #8
 80031c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	223f      	movs	r2, #63	@ 0x3f
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d07e      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
        }
        return;
 80031ee:	e079      	b.n	80032e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01d      	beq.n	800323a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10d      	bne.n	8003228 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003210:	2b00      	cmp	r3, #0
 8003212:	d031      	beq.n	8003278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
 800321c:	e02c      	b.n	8003278 <HAL_DMA_IRQHandler+0x2a0>
 800321e:	bf00      	nop
 8003220:	20000008 	.word	0x20000008
 8003224:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d023      	beq.n	8003278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
 8003238:	e01e      	b.n	8003278 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10f      	bne.n	8003268 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0210 	bic.w	r2, r2, #16
 8003256:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	2b00      	cmp	r3, #0
 800327e:	d032      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2205      	movs	r2, #5
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d307      	bcc.n	80032c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f2      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x2cc>
 80032be:	e000      	b.n	80032c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
 80032e2:	e000      	b.n	80032e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032e4:	bf00      	nop
    }
  }
}
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3b10      	subs	r3, #16
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <DMA_CalcBaseAndBitshift+0x64>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003306:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <DMA_CalcBaseAndBitshift+0x68>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d909      	bls.n	800332e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	659a      	str	r2, [r3, #88]	@ 0x58
 800332c:	e007      	b.n	800333e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	aaaaaaab 	.word	0xaaaaaaab
 8003354:	08005030 	.word	0x08005030

08003358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11f      	bne.n	80033b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d856      	bhi.n	8003426 <DMA_CheckFifoParam+0xce>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <DMA_CheckFifoParam+0x28>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	08003391 	.word	0x08003391
 8003384:	080033a3 	.word	0x080033a3
 8003388:	08003391 	.word	0x08003391
 800338c:	08003427 	.word	0x08003427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d046      	beq.n	800342a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a0:	e043      	b.n	800342a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033aa:	d140      	bne.n	800342e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e03d      	b.n	800342e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ba:	d121      	bne.n	8003400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d837      	bhi.n	8003432 <DMA_CheckFifoParam+0xda>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <DMA_CheckFifoParam+0x70>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033df 	.word	0x080033df
 80033d0:	080033d9 	.word	0x080033d9
 80033d4:	080033f1 	.word	0x080033f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e030      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d025      	beq.n	8003436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ee:	e022      	b.n	8003436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033f8:	d11f      	bne.n	800343a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033fe:	e01c      	b.n	800343a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d903      	bls.n	800340e <DMA_CheckFifoParam+0xb6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800340c:	e018      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      break;
 8003412:	e015      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e00b      	b.n	800343e <DMA_CheckFifoParam+0xe6>
      break;
 8003426:	bf00      	nop
 8003428:	e00a      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
 800342c:	e008      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e006      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e004      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;   
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
    }
  } 
  
  return status; 
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e16b      	b.n	8003744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 815a 	bne.w	800373e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d130      	bne.n	8003504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0201 	and.w	r2, r3, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d017      	beq.n	8003540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d123      	bne.n	8003594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80b4 	beq.w	800373e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b60      	ldr	r3, [pc, #384]	@ (800375c <HAL_GPIO_Init+0x30c>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	4a5f      	ldr	r2, [pc, #380]	@ (800375c <HAL_GPIO_Init+0x30c>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e6:	4b5d      	ldr	r3, [pc, #372]	@ (800375c <HAL_GPIO_Init+0x30c>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003760 <HAL_GPIO_Init+0x310>)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a52      	ldr	r2, [pc, #328]	@ (8003764 <HAL_GPIO_Init+0x314>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <HAL_GPIO_Init+0x226>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a51      	ldr	r2, [pc, #324]	@ (8003768 <HAL_GPIO_Init+0x318>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d025      	beq.n	8003672 <HAL_GPIO_Init+0x222>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a50      	ldr	r2, [pc, #320]	@ (800376c <HAL_GPIO_Init+0x31c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01f      	beq.n	800366e <HAL_GPIO_Init+0x21e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4f      	ldr	r2, [pc, #316]	@ (8003770 <HAL_GPIO_Init+0x320>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x21a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4e      	ldr	r2, [pc, #312]	@ (8003774 <HAL_GPIO_Init+0x324>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x216>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4d      	ldr	r2, [pc, #308]	@ (8003778 <HAL_GPIO_Init+0x328>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x212>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4c      	ldr	r2, [pc, #304]	@ (800377c <HAL_GPIO_Init+0x32c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x20e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4b      	ldr	r2, [pc, #300]	@ (8003780 <HAL_GPIO_Init+0x330>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x20a>
 8003656:	2307      	movs	r3, #7
 8003658:	e00e      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800365a:	2308      	movs	r3, #8
 800365c:	e00c      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800365e:	2306      	movs	r3, #6
 8003660:	e00a      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003662:	2305      	movs	r3, #5
 8003664:	e008      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003666:	2304      	movs	r3, #4
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800366a:	2303      	movs	r3, #3
 800366c:	e004      	b.n	8003678 <HAL_GPIO_Init+0x228>
 800366e:	2302      	movs	r3, #2
 8003670:	e002      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_GPIO_Init+0x228>
 8003676:	2300      	movs	r3, #0
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f002 0203 	and.w	r2, r2, #3
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	4093      	lsls	r3, r2
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003688:	4935      	ldr	r1, [pc, #212]	@ (8003760 <HAL_GPIO_Init+0x310>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003696:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_GPIO_Init+0x334>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ba:	4a32      	ldr	r2, [pc, #200]	@ (8003784 <HAL_GPIO_Init+0x334>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c0:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <HAL_GPIO_Init+0x334>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036e4:	4a27      	ldr	r2, [pc, #156]	@ (8003784 <HAL_GPIO_Init+0x334>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ea:	4b26      	ldr	r3, [pc, #152]	@ (8003784 <HAL_GPIO_Init+0x334>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370e:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_GPIO_Init+0x334>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003714:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <HAL_GPIO_Init+0x334>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003738:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <HAL_GPIO_Init+0x334>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3301      	adds	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	f67f ae90 	bls.w	800346c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3724      	adds	r7, #36	@ 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	40013800 	.word	0x40013800
 8003764:	40020000 	.word	0x40020000
 8003768:	40020400 	.word	0x40020400
 800376c:	40020800 	.word	0x40020800
 8003770:	40020c00 	.word	0x40020c00
 8003774:	40021000 	.word	0x40021000
 8003778:	40021400 	.word	0x40021400
 800377c:	40021800 	.word	0x40021800
 8003780:	40021c00 	.word	0x40021c00
 8003784:	40013c00 	.word	0x40013c00

08003788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e001      	b.n	80037aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
 80037c4:	4613      	mov	r3, r2
 80037c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d4:	e003      	b.n	80037de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	041a      	lsls	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037fc:	887a      	ldrh	r2, [r7, #2]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	041a      	lsls	r2, r3, #16
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43d9      	mvns	r1, r3
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	400b      	ands	r3, r1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e267      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b04      	cmp	r3, #4
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b85      	ldr	r3, [pc, #532]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003852:	2b08      	cmp	r3, #8
 8003854:	d112      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b82      	ldr	r3, [pc, #520]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003862:	d10b      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b7e      	ldr	r3, [pc, #504]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05b      	beq.n	8003928 <HAL_RCC_OscConfig+0x108>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d157      	bne.n	8003928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e242      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x74>
 8003886:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b70      	ldr	r3, [pc, #448]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 80038b8:	4b69      	ldr	r3, [pc, #420]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a68      	ldr	r2, [pc, #416]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe f8c4 	bl	8001a64 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe f8c0 	bl	8001a64 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e207      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xc0>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe f8b0 	bl	8001a64 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fe f8ac 	bl	8001a64 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1f3      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b51      	ldr	r3, [pc, #324]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0xe8>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003936:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b44      	ldr	r3, [pc, #272]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1c7      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4937      	ldr	r1, [pc, #220]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e03a      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fe f865 	bl	8001a64 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399e:	f7fe f861 	bl	8001a64 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1a8      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4925      	ldr	r1, [pc, #148]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe f844 	bl	8001a64 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fe f840 	bl	8001a64 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e187      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe f824 	bl	8001a64 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fe f820 	bl	8001a64 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e167      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x200>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fe f80d 	bl	8001a64 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fe f809 	bl	8001a64 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d907      	bls.n	8003a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e150      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	42470000 	.word	0x42470000
 8003a68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b88      	ldr	r3, [pc, #544]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8097 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b81      	ldr	r3, [pc, #516]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b77      	ldr	r3, [pc, #476]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac2:	4b74      	ldr	r3, [pc, #464]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fd ffc9 	bl	8001a64 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fd ffc5 	bl	8001a64 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e10c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2ea>
 8003afc:	4b64      	ldr	r3, [pc, #400]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	4a63      	ldr	r2, [pc, #396]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x30c>
 8003b12:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	4a5e      	ldr	r2, [pc, #376]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b2c:	4b58      	ldr	r3, [pc, #352]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	4a57      	ldr	r2, [pc, #348]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b38:	4b55      	ldr	r3, [pc, #340]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	4a54      	ldr	r2, [pc, #336]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd ff8a 	bl	8001a64 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd ff86 	bl	8001a64 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0cb      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	4b49      	ldr	r3, [pc, #292]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fd ff74 	bl	8001a64 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd ff70 	bl	8001a64 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0b5      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	4b3e      	ldr	r3, [pc, #248]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	4a38      	ldr	r2, [pc, #224]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a1 	beq.w	8003d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbe:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d05c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d141      	bne.n	8003c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd ff44 	bl	8001a64 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd ff40 	bl	8001a64 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e087      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	491b      	ldr	r1, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fd ff19 	bl	8001a64 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd ff15 	bl	8001a64 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e05c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x416>
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd ff02 	bl	8001a64 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd fefe 	bl	8001a64 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e045      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e038      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x4ec>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d121      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0cc      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b68      	ldr	r3, [pc, #416]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90c      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b63      	ldr	r3, [pc, #396]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b59      	ldr	r3, [pc, #356]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a58      	ldr	r2, [pc, #352]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a52      	ldr	r2, [pc, #328]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b50      	ldr	r3, [pc, #320]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494d      	ldr	r1, [pc, #308]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d044      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e067      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4934      	ldr	r1, [pc, #208]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd fe30 	bl	8001a64 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd fe2c 	bl	8001a64 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20c      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b22      	ldr	r3, [pc, #136]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4916      	ldr	r1, [pc, #88]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490e      	ldr	r1, [pc, #56]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f821 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	490a      	ldr	r1, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	4a09      	ldr	r2, [pc, #36]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd fd90 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023c00 	.word	0x40023c00
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08005018 	.word	0x08005018
 8003ed4:	20000008 	.word	0x20000008
 8003ed8:	2000000c 	.word	0x2000000c

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee0:	b090      	sub	sp, #64	@ 0x40
 8003ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef4:	4b59      	ldr	r3, [pc, #356]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d00d      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x40>
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	f200 80a1 	bhi.w	8004048 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0e:	e09b      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f14:	e09b      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f16:	4b53      	ldr	r3, [pc, #332]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f1a:	e098      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f26:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d028      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f32:	4b4a      	ldr	r3, [pc, #296]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2200      	movs	r2, #0
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f44:	2100      	movs	r1, #0
 8003f46:	4b47      	ldr	r3, [pc, #284]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f48:	fb03 f201 	mul.w	r2, r3, r1
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	fb00 f303 	mul.w	r3, r0, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	4a43      	ldr	r2, [pc, #268]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f56:	fba0 1202 	umull	r1, r2, r0, r2
 8003f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f5c:	460a      	mov	r2, r1
 8003f5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f62:	4413      	add	r3, r2
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f68:	2200      	movs	r2, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	61fa      	str	r2, [r7, #28]
 8003f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f76:	f7fc f927 	bl	80001c8 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4613      	mov	r3, r2
 8003f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f82:	e053      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f84:	4b35      	ldr	r3, [pc, #212]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	099b      	lsrs	r3, r3, #6
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	617a      	str	r2, [r7, #20]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f96:	f04f 0b00 	mov.w	fp, #0
 8003f9a:	4652      	mov	r2, sl
 8003f9c:	465b      	mov	r3, fp
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	0159      	lsls	r1, r3, #5
 8003fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fac:	0150      	lsls	r0, r2, #5
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	ebb2 080a 	subs.w	r8, r2, sl
 8003fb6:	eb63 090b 	sbc.w	r9, r3, fp
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fce:	ebb2 0408 	subs.w	r4, r2, r8
 8003fd2:	eb63 0509 	sbc.w	r5, r3, r9
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	00eb      	lsls	r3, r5, #3
 8003fe0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe4:	00e2      	lsls	r2, r4, #3
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	461d      	mov	r5, r3
 8003fea:	eb14 030a 	adds.w	r3, r4, sl
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	eb45 030b 	adc.w	r3, r5, fp
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004002:	4629      	mov	r1, r5
 8004004:	028b      	lsls	r3, r1, #10
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800400c:	4621      	mov	r1, r4
 800400e:	028a      	lsls	r2, r1, #10
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004016:	2200      	movs	r2, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	60fa      	str	r2, [r7, #12]
 800401c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004020:	f7fc f8d2 	bl	80001c8 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_RCC_GetSysClockFreq+0x180>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800403c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004046:	e002      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x184>)
 800404a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800404c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004050:	4618      	mov	r0, r3
 8004052:	3740      	adds	r7, #64	@ 0x40
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	017d7840 	.word	0x017d7840

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	@ (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000008 	.word	0x20000008

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a9b      	lsrs	r3, r3, #10
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	@ (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08005028 	.word	0x08005028

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffdc 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0b5b      	lsrs	r3, r3, #13
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	08005028 	.word	0x08005028

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e041      	b.n	8004166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fb30 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 f9b6 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e04e      	b.n	8004226 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a23      	ldr	r2, [pc, #140]	@ (8004234 <HAL_TIM_Base_Start_IT+0xc4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d01d      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_TIM_Base_Start_IT+0xc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <HAL_TIM_Base_Start_IT+0xcc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_TIM_Base_Start_IT+0xd4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <HAL_TIM_Base_Start_IT+0xd8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	@ (800424c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e007      	b.n	8004224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40010400 	.word	0x40010400
 8004248:	40014000 	.word	0x40014000
 800424c:	40001800 	.word	0x40001800

08004250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d020      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0202 	mvn.w	r2, #2
 8004284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8d2 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8c4 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8d5 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0204 	mvn.w	r2, #4
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8ac 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f89e 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8af 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0208 	mvn.w	r2, #8
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2204      	movs	r2, #4
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f886 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f878 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f889 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2208      	movs	r2, #8
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f860 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f852 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f863 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0201 	mvn.w	r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc ffa8 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f982 	bl	80046e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f834 	bl	800446c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0220 	mvn.w	r2, #32
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f954 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a46      	ldr	r2, [pc, #280]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d00f      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a43      	ldr	r2, [pc, #268]	@ (80045b0 <TIM_Base_SetConfig+0x130>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a42      	ldr	r2, [pc, #264]	@ (80045b4 <TIM_Base_SetConfig+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a41      	ldr	r2, [pc, #260]	@ (80045b8 <TIM_Base_SetConfig+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a35      	ldr	r2, [pc, #212]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e0:	d027      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a32      	ldr	r2, [pc, #200]	@ (80045b0 <TIM_Base_SetConfig+0x130>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a31      	ldr	r2, [pc, #196]	@ (80045b4 <TIM_Base_SetConfig+0x134>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a30      	ldr	r2, [pc, #192]	@ (80045b8 <TIM_Base_SetConfig+0x138>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2e      	ldr	r2, [pc, #184]	@ (80045c0 <TIM_Base_SetConfig+0x140>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2d      	ldr	r2, [pc, #180]	@ (80045c4 <TIM_Base_SetConfig+0x144>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <TIM_Base_SetConfig+0x148>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	@ (80045cc <TIM_Base_SetConfig+0x14c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	@ (80045d0 <TIM_Base_SetConfig+0x150>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <TIM_Base_SetConfig+0x154>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a10      	ldr	r2, [pc, #64]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]
  }
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40010400 	.word	0x40010400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800
 80045cc:	40001800 	.word	0x40001800
 80045d0:	40001c00 	.word	0x40001c00
 80045d4:	40002000 	.word	0x40002000

080045d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e05a      	b.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463c:	d01d      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1d      	ldr	r2, [pc, #116]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a15      	ldr	r2, [pc, #84]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10c      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40001800 	.word	0x40001800

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e042      	b.n	8004790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd f88c 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800473a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f991 	bl	8004a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d175      	bne.n	80048a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Transmit+0x2c>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e06e      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	@ 0x21
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7fd f945 	bl	8001a64 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800480c:	e02e      	b.n	800486c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	@ 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f866 	bl	80048ea <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03a      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cb      	bne.n	800480e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	@ 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f832 	bl	80048ea <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b2db      	uxtb	r3, r3
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4613      	mov	r3, r2
 80048f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	e03b      	b.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d037      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fd f8ae 	bl	8001a64 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <UART_WaitOnFlagUntilTimeout+0x30>
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03a      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b80      	cmp	r3, #128	@ 0x80
 8004930:	d020      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d01d      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d116      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f81d 	bl	800499c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2208      	movs	r2, #8
 8004966:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e00f      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d0b4      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b095      	sub	sp, #84	@ 0x54
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d119      	bne.n	8004a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a34:	61ba      	str	r2, [r7, #24]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a56:	bf00      	nop
 8004a58:	3754      	adds	r7, #84	@ 0x54
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b0c0      	sub	sp, #256	@ 0x100
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	68d9      	ldr	r1, [r3, #12]
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	ea40 0301 	orr.w	r3, r0, r1
 8004a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004abc:	f021 010c 	bic.w	r1, r1, #12
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aca:	430b      	orrs	r3, r1
 8004acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	6999      	ldr	r1, [r3, #24]
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	ea40 0301 	orr.w	r3, r0, r1
 8004aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b8f      	ldr	r3, [pc, #572]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d005      	beq.n	8004b04 <UART_SetConfig+0xa0>
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b8d      	ldr	r3, [pc, #564]	@ (8004d34 <UART_SetConfig+0x2d0>)
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d104      	bne.n	8004b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b04:	f7ff fad0 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8004b08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b0c:	e003      	b.n	8004b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b0e:	f7ff fab7 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8004b12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b20:	f040 810c 	bne.w	8004d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b36:	4622      	mov	r2, r4
 8004b38:	462b      	mov	r3, r5
 8004b3a:	1891      	adds	r1, r2, r2
 8004b3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b3e:	415b      	adcs	r3, r3
 8004b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b46:	4621      	mov	r1, r4
 8004b48:	eb12 0801 	adds.w	r8, r2, r1
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	eb43 0901 	adc.w	r9, r3, r1
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b66:	4690      	mov	r8, r2
 8004b68:	4699      	mov	r9, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	eb18 0303 	adds.w	r3, r8, r3
 8004b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b74:	462b      	mov	r3, r5
 8004b76:	eb49 0303 	adc.w	r3, r9, r3
 8004b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b92:	460b      	mov	r3, r1
 8004b94:	18db      	adds	r3, r3, r3
 8004b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b98:	4613      	mov	r3, r2
 8004b9a:	eb42 0303 	adc.w	r3, r2, r3
 8004b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ba8:	f7fb fb0e 	bl	80001c8 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4b61      	ldr	r3, [pc, #388]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	011c      	lsls	r4, r3, #4
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bdc:	4641      	mov	r1, r8
 8004bde:	eb12 0a01 	adds.w	sl, r2, r1
 8004be2:	4649      	mov	r1, r9
 8004be4:	eb43 0b01 	adc.w	fp, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bfc:	4692      	mov	sl, r2
 8004bfe:	469b      	mov	fp, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	eb1a 0303 	adds.w	r3, sl, r3
 8004c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	18db      	adds	r3, r3, r3
 8004c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c2e:	4613      	mov	r3, r2
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c3e:	f7fb fac3 	bl	80001c8 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2264      	movs	r2, #100	@ 0x64
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c5e:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004c60:	fba3 2302 	umull	r2, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c6c:	441c      	add	r4, r3
 8004c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	1891      	adds	r1, r2, r2
 8004c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c88:	415b      	adcs	r3, r3
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c90:	4641      	mov	r1, r8
 8004c92:	1851      	adds	r1, r2, r1
 8004c94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c96:	4649      	mov	r1, r9
 8004c98:	414b      	adcs	r3, r1
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ca8:	4659      	mov	r1, fp
 8004caa:	00cb      	lsls	r3, r1, #3
 8004cac:	4651      	mov	r1, sl
 8004cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	00ca      	lsls	r2, r1, #3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	18db      	adds	r3, r3, r3
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cea:	4613      	mov	r3, r2
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cfa:	f7fb fa65 	bl	80001c8 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004d04:	fba3 1302 	umull	r1, r3, r3, r2
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	2164      	movs	r1, #100	@ 0x64
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	3332      	adds	r3, #50	@ 0x32
 8004d16:	4a08      	ldr	r2, [pc, #32]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	f003 0207 	and.w	r2, r3, #7
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4422      	add	r2, r4
 8004d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d2c:	e106      	b.n	8004f3c <UART_SetConfig+0x4d8>
 8004d2e:	bf00      	nop
 8004d30:	40011000 	.word	0x40011000
 8004d34:	40011400 	.word	0x40011400
 8004d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d4e:	4642      	mov	r2, r8
 8004d50:	464b      	mov	r3, r9
 8004d52:	1891      	adds	r1, r2, r2
 8004d54:	6239      	str	r1, [r7, #32]
 8004d56:	415b      	adcs	r3, r3
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d5e:	4641      	mov	r1, r8
 8004d60:	1854      	adds	r4, r2, r1
 8004d62:	4649      	mov	r1, r9
 8004d64:	eb43 0501 	adc.w	r5, r3, r1
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	00eb      	lsls	r3, r5, #3
 8004d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d76:	00e2      	lsls	r2, r4, #3
 8004d78:	4614      	mov	r4, r2
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	4643      	mov	r3, r8
 8004d7e:	18e3      	adds	r3, r4, r3
 8004d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d84:	464b      	mov	r3, r9
 8004d86:	eb45 0303 	adc.w	r3, r5, r3
 8004d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004daa:	4629      	mov	r1, r5
 8004dac:	008b      	lsls	r3, r1, #2
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db4:	4621      	mov	r1, r4
 8004db6:	008a      	lsls	r2, r1, #2
 8004db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004dbc:	f7fb fa04 	bl	80001c8 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b60      	ldr	r3, [pc, #384]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	011c      	lsls	r4, r3, #4
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	61b9      	str	r1, [r7, #24]
 8004de8:	415b      	adcs	r3, r3
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6139      	str	r1, [r7, #16]
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e48:	4649      	mov	r1, r9
 8004e4a:	008b      	lsls	r3, r1, #2
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e52:	4641      	mov	r1, r8
 8004e54:	008a      	lsls	r2, r1, #2
 8004e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e5a:	f7fb f9b5 	bl	80001c8 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004e66:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2264      	movs	r2, #100	@ 0x64
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	1acb      	subs	r3, r1, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	@ 0x32
 8004e78:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e84:	441c      	add	r4, r3
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	1851      	adds	r1, r2, r1
 8004ea8:	6039      	str	r1, [r7, #0]
 8004eaa:	4649      	mov	r1, r9
 8004eac:	414b      	adcs	r3, r1
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	00cb      	lsls	r3, r1, #3
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	00ca      	lsls	r2, r1, #3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	460a      	mov	r2, r1
 8004eda:	eb42 0303 	adc.w	r3, r2, r3
 8004ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ef8:	4649      	mov	r1, r9
 8004efa:	008b      	lsls	r3, r1, #2
 8004efc:	4641      	mov	r1, r8
 8004efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f02:	4641      	mov	r1, r8
 8004f04:	008a      	lsls	r2, r1, #2
 8004f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f0a:	f7fb f95d 	bl	80001c8 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004f14:	fba3 1302 	umull	r1, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2164      	movs	r1, #100	@ 0x64
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	3332      	adds	r3, #50	@ 0x32
 8004f26:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <UART_SetConfig+0x4e4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4422      	add	r2, r4
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f42:	46bd      	mov	sp, r7
 8004f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f48:	51eb851f 	.word	0x51eb851f

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__libc_init_array>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f94 <__libc_init_array+0x38>)
 8004f60:	4c0d      	ldr	r4, [pc, #52]	@ (8004f98 <__libc_init_array+0x3c>)
 8004f62:	1b64      	subs	r4, r4, r5
 8004f64:	10a4      	asrs	r4, r4, #2
 8004f66:	2600      	movs	r6, #0
 8004f68:	42a6      	cmp	r6, r4
 8004f6a:	d109      	bne.n	8004f80 <__libc_init_array+0x24>
 8004f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f9c <__libc_init_array+0x40>)
 8004f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa0 <__libc_init_array+0x44>)
 8004f70:	f000 f818 	bl	8004fa4 <_init>
 8004f74:	1b64      	subs	r4, r4, r5
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	2600      	movs	r6, #0
 8004f7a:	42a6      	cmp	r6, r4
 8004f7c:	d105      	bne.n	8004f8a <__libc_init_array+0x2e>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f84:	4798      	blx	r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7ee      	b.n	8004f68 <__libc_init_array+0xc>
 8004f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8e:	4798      	blx	r3
 8004f90:	3601      	adds	r6, #1
 8004f92:	e7f2      	b.n	8004f7a <__libc_init_array+0x1e>
 8004f94:	08005040 	.word	0x08005040
 8004f98:	08005040 	.word	0x08005040
 8004f9c:	08005040 	.word	0x08005040
 8004fa0:	08005044 	.word	0x08005044

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
