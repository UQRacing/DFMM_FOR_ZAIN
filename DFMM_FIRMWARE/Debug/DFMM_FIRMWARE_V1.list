
DFMM_FIRMWARE_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c14  08005c14  00006c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c1c  08005c1c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c20  08005c20  00006c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005c24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000003cc  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125e6  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eef  00000000  00000000  00019682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c97  00000000  00000000  0001d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002310a  00000000  00000000  0001e267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015557  00000000  00000000  00041371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38d3  00000000  00000000  000568c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a19b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ab4  00000000  00000000  0012a1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aec 	.word	0x08005aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005aec 	.word	0x08005aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <setLED>:
 */
#include "ASSI.h"
uint8_t LED_Data[NUM_LED][4];

void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	603b      	str	r3, [r7, #0]
    LED_Data[led][0] = led;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	b2d9      	uxtb	r1, r3
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <setLED+0x58>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[led][1] = GREEN;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	b2d9      	uxtb	r1, r3
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <setLED+0x58>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	460a      	mov	r2, r1
 8000588:	705a      	strb	r2, [r3, #1]
    LED_Data[led][2] = RED;
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <setLED+0x58>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	460a      	mov	r2, r1
 8000598:	709a      	strb	r2, [r3, #2]
    LED_Data[led][3] = BLUE;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2d9      	uxtb	r1, r3
 800059e:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <setLED+0x58>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	70da      	strb	r2, [r3, #3]
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088

080005bc <ws2812_synchronous>:

void ws2812_synchronous (int GREEN, int RED, int BLUE)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	//Here I'm bit shifting the values from SetLED as the LED strip reads GRB values not RGB values
    uint32_t color = (GREEN << 8) | (RED<<4) | BLUE;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61fb      	str	r3, [r7, #28]
    //Twice as many LED's lit up (i.e. if NUM_LED was 5, then sending 24 bytes for each LED (72 bits)
    //Would light up 10 LED's instead of 5 and these would be the wrong colour
    //Hence, I changed the sendData buffer to be a 12 byte array and this made the right number of LED's light up
    //But the colours being delivered are slightly off and the first LED turns green, (I'm not sure how to resolve this)
    uint8_t sendData[12];
    int indx = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 12; i >=0; i--)
 80005dc:	230c      	movs	r3, #12
 80005de:	623b      	str	r3, [r7, #32]
 80005e0:	e01b      	b.n	800061a <ws2812_synchronous+0x5e>
    {
    	//The if statement below shifts the bit present to the least significant bit and checks if this is a 1 or 0
        if (((color >> i) & 0x01) == 1)
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	fa22 f303 	lsr.w	r3, r2, r3
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d008      	beq.n	8000604 <ws2812_synchronous+0x48>
            sendData[indx++] = 0b110;  // store 1
 80005f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80005f8:	3328      	adds	r3, #40	@ 0x28
 80005fa:	443b      	add	r3, r7
 80005fc:	2206      	movs	r2, #6
 80005fe:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000602:	e007      	b.n	8000614 <ws2812_synchronous+0x58>
        else
            sendData[indx++] = 0b100;  // store 0
 8000604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	627a      	str	r2, [r7, #36]	@ 0x24
 800060a:	3328      	adds	r3, #40	@ 0x28
 800060c:	443b      	add	r3, r7
 800060e:	2204      	movs	r2, #4
 8000610:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 12; i >=0; i--)
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	3b01      	subs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dae0      	bge.n	80005e2 <ws2812_synchronous+0x26>
    }

    //Calling the DMA transmit function so that data can be sent
    //I'm using DMA as it results in the fastest data transfer and less lag
    HAL_UART_Transmit_DMA(&huart1, sendData, 12);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	220c      	movs	r2, #12
 8000626:	4619      	mov	r1, r3
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <ws2812_synchronous+0x8c>)
 800062a:	f003 fed1 	bl	80043d0 <HAL_UART_Transmit_DMA>
    //The line below only allows data to be transmitted again after the data beforehand has been transmitted
    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY); // Wait for DMA transfer to complete
 800062e:	bf00      	nop
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <ws2812_synchronous+0x8c>)
 8000632:	f003 ff69 	bl	8004508 <HAL_UART_GetState>
 8000636:	4603      	mov	r3, r0
 8000638:	2b20      	cmp	r3, #32
 800063a:	d1f9      	bne.n	8000630 <ws2812_synchronous+0x74>
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000244 	.word	0x20000244

0800064c <WS2812_Send>:

void WS2812_Send (void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LED; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e016      	b.n	8000686 <WS2812_Send+0x3a>
    {
        ws2812_synchronous(LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <WS2812_Send+0x50>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	4618      	mov	r0, r3
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <WS2812_Send+0x50>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	4619      	mov	r1, r3
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <WS2812_Send+0x50>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	461a      	mov	r2, r3
 800067c:	f7ff ff9e 	bl	80005bc <ws2812_synchronous>
    for (int i = 0; i < NUM_LED; i++)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b07      	cmp	r3, #7
 800068a:	dde5      	ble.n	8000658 <WS2812_Send+0xc>
    }
    HAL_Delay(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f001 f955 	bl	800193c <HAL_Delay>
 // Wait for all data to be latched
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000088 	.word	0x20000088

080006a0 <ASSI_Off>:
//The functions above are essential to driving the LED's.
//The functions below are specifically for the ASSI status


void ASSI_Off(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	for (int i=0; i< NUM_LED; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	e008      	b.n	80006be <ASSI_Off+0x1e>
	{
		setLED(i, 0,0,0);
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff54 	bl	8000560 <setLED>
	for (int i=0; i< NUM_LED; i++)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	ddf3      	ble.n	80006ac <ASSI_Off+0xc>
	}
	WS2812_Send();
 80006c4:	f7ff ffc2 	bl	800064c <WS2812_Send>
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 f937 	bl	800193c <HAL_Delay>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <ASSI_Ready>:

void ASSI_Ready(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
	//This keeps the LED strip a continous yellow
	for (int i=0; i<NUM_LED; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	e008      	b.n	80006f4 <ASSI_Ready+0x1e>
	{
		//This sets the LED's to yellow, weirdly one would expect this to turn the strip green
		//But this turns the lights yellow, some tuning may be required for different strips
		setLED(i,0,255,0);
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	@ 0xff
 80006e6:	2100      	movs	r1, #0
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff39 	bl	8000560 <setLED>
	for (int i=0; i<NUM_LED; i++)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	ddf3      	ble.n	80006e2 <ASSI_Ready+0xc>
	}
	WS2812_Send();
 80006fa:	f7ff ffa7 	bl	800064c <WS2812_Send>
	HAL_Delay(10);
 80006fe:	200a      	movs	r0, #10
 8000700:	f001 f91c 	bl	800193c <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ASSI_Driving>:

void ASSI_Driving(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	//This is yellow flashing lights
	//Setting the LED's yellow initially
	for (int i =0; i<NUM_LED; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	e008      	b.n	800072a <ASSI_Driving+0x1e>
	{
		setLED(i, 0, 255, 0);
 8000718:	2300      	movs	r3, #0
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	2100      	movs	r1, #0
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff1e 	bl	8000560 <setLED>
	for (int i =0; i<NUM_LED; i++)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b07      	cmp	r3, #7
 800072e:	ddf3      	ble.n	8000718 <ASSI_Driving+0xc>
	}
	//Sending this data to the strip
	WS2812_Send();
 8000730:	f7ff ff8c 	bl	800064c <WS2812_Send>
	//Delay for the flashing
	HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f001 f900 	bl	800193c <HAL_Delay>
	for (int i=0; i<NUM_LED; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e008      	b.n	8000754 <ASSI_Driving+0x48>
	{
		//Switching the LED's off
		setLED(i, 0,0,0);
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	f7ff ff09 	bl	8000560 <setLED>
	for (int i=0; i<NUM_LED; i++)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b07      	cmp	r3, #7
 8000758:	ddf3      	ble.n	8000742 <ASSI_Driving+0x36>
	}
	WS2812_Send();
 800075a:	f7ff ff77 	bl	800064c <WS2812_Send>
	//Adding an extra delay just to ensure the line has been completely reset
	HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000762:	f001 f8eb 	bl	800193c <HAL_Delay>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <ASSI_Emergency>:

void ASSI_Emergency(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
	//This is blue flashing lights
	//Setting the LED's blue initially
		for (int i =0; i<NUM_LED; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	e008      	b.n	800078c <ASSI_Emergency+0x1e>
		{
			//This is the colour data for a dark blue, light blue can be achieved by setLED(i,0,50,255);
			//The timings are slightly off hence why the G value is 100
			setLED(i, 0, 100, 255);
 800077a:	23ff      	movs	r3, #255	@ 0xff
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	2100      	movs	r1, #0
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff feed 	bl	8000560 <setLED>
		for (int i =0; i<NUM_LED; i++)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3301      	adds	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b07      	cmp	r3, #7
 8000790:	ddf3      	ble.n	800077a <ASSI_Emergency+0xc>
		}
		//Sending this data to the strip
		WS2812_Send();
 8000792:	f7ff ff5b 	bl	800064c <WS2812_Send>
		//Delay for the flashing
		HAL_Delay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079a:	f001 f8cf 	bl	800193c <HAL_Delay>
		for (int i=0; i<NUM_LED; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	e008      	b.n	80007b6 <ASSI_Emergency+0x48>
		{
			//Switching the LED's off
			setLED(i, 0,0,0);
 80007a4:	2300      	movs	r3, #0
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	6838      	ldr	r0, [r7, #0]
 80007ac:	f7ff fed8 	bl	8000560 <setLED>
		for (int i=0; i<NUM_LED; i++)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	ddf3      	ble.n	80007a4 <ASSI_Emergency+0x36>
		}
		WS2812_Send();
 80007bc:	f7ff ff46 	bl	800064c <WS2812_Send>
		HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c4:	f001 f8ba 	bl	800193c <HAL_Delay>

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ASSI_Finished>:

void ASSI_Finished(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e008      	b.n	80007ee <ASSI_Finished+0x1e>
	{
		//This sets the LED's to a blue colour
		setLED(i,0,100,255);
 80007dc:	23ff      	movs	r3, #255	@ 0xff
 80007de:	2264      	movs	r2, #100	@ 0x64
 80007e0:	2100      	movs	r1, #0
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff febc 	bl	8000560 <setLED>
	for (int i=0; i<NUM_LED; i++)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3301      	adds	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	ddf3      	ble.n	80007dc <ASSI_Finished+0xc>
	}
	WS2812_Send();
 80007f4:	f7ff ff2a 	bl	800064c <WS2812_Send>
	HAL_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f001 f89f 	bl	800193c <HAL_Delay>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x9c>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_ADC1_Init+0xa0>)
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000868:	f001 f88c 	bl	8001984 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fd3b 	bl	80012ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000876:	2301      	movs	r3, #1
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_ADC1_Init+0x98>)
 8000888:	f001 f8c0 	bl	8001a0c <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000892:	f000 fd2b 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000a8 	.word	0x200000a8
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <MX_ADC2_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008ec:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_ADC2_Init+0xa0>)
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_ADC2_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_ADC2_Init+0x98>)
 8000906:	2201      	movs	r2, #1
 8000908:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	@ (8000944 <MX_ADC2_Init+0x98>)
 800090c:	f001 f83a 	bl	8001984 <HAL_ADC_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 fce9 	bl	80012ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800091a:	2302      	movs	r3, #2
 800091c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	@ (8000944 <MX_ADC2_Init+0x98>)
 800092c:	f001 f86e 	bl	8001a0c <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000936:	f000 fcd9 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000f0 	.word	0x200000f0
 8000948:	40012100 	.word	0x40012100
 800094c:	0f000001 	.word	0x0f000001

08000950 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a28 <HAL_ADC_MspInit+0xd8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d128      	bne.n	80009c4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a2c      	ldr	r2, [pc, #176]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 800097c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a25      	ldr	r2, [pc, #148]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ANL1_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <HAL_ADC_MspInit+0xe0>)
 80009be:	f002 fb59 	bl	8003074 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009c2:	e02c      	b.n	8000a1e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_ADC_MspInit+0xe4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d127      	bne.n	8000a1e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_ADC_MspInit+0xdc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANL2_Pin;
 8000a06:	2304      	movs	r3, #4
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANL2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_ADC_MspInit+0xe0>)
 8000a1a:	f002 fb2b 	bl	8003074 <HAL_GPIO_Init>
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	@ 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012000 	.word	0x40012000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40012100 	.word	0x40012100

08000a38 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.IDE = CAN_ID_STD;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_CAN1_Init+0x80>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_CAN1_Init+0x80>)
 8000a44:	f240 4246 	movw	r2, #1094	@ 0x446
 8000a48:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_CAN1_Init+0x80>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_CAN1_Init+0x80>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	611a      	str	r2, [r3, #16]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <MX_CAN1_Init+0x88>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a70:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000a74:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a7c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_CAN1_Init+0x84>)
 8000aa4:	f001 f9d0 	bl	8001e48 <HAL_CAN_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_CAN1_Init+0x7a>
  {
    Error_Handler();
 8000aae:	f000 fc1d 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000138 	.word	0x20000138
 8000abc:	20000184 	.word	0x20000184
 8000ac0:	40006400 	.word	0x40006400

08000ac4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b58 <HAL_CAN_MspInit+0x94>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d134      	bne.n	8000b50 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_CAN_MspInit+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b30:	2309      	movs	r3, #9
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <HAL_CAN_MspInit+0x9c>)
 8000b3c:	f002 fa9a 	bl	8003074 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2014      	movs	r0, #20
 8000b46:	f001 fee0 	bl	800290a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b4a:	2014      	movs	r0, #20
 8000b4c:	f001 fef9 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40006400 	.word	0x40006400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <ReceiveMessage>:
	canhandler->FilterScale = CAN_FILTERSCALE_32BIT;
	canhandler->SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
	HAL_CAN_ConfigFilter(&hcan1, canhandler);
}

void ReceiveMessage(CAN_RxHeaderTypeDef *ReceptionHeader, uint8_t *Receive_Data) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	if (ReceptionHeader->StdId == M150_ID) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2204      	movs	r2, #4
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d134      	bne.n	8000be2 <ReceiveMessage+0x7e>
		if (0x01 == *(Receive_Data + 7)) {
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d103      	bne.n	8000b8a <ReceiveMessage+0x26>
			EBS_Energy_Check = 1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <ReceiveMessage+0xb8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e02b      	b.n	8000be2 <ReceiveMessage+0x7e>
		}
		else if (0x02 == *(Receive_Data + 7)) {
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	3307      	adds	r3, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d103      	bne.n	8000b9c <ReceiveMessage+0x38>
			EBS_Pressure_Check = 1;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <ReceiveMessage+0xbc>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e022      	b.n	8000be2 <ReceiveMessage+0x7e>
		}
		else if (0x10 ==*(Receive_Data + 7)) {
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b10      	cmp	r3, #16
 8000ba4:	d103      	bne.n	8000bae <ReceiveMessage+0x4a>
					Service_Brake_Check = 1;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <ReceiveMessage+0xc0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e019      	b.n	8000be2 <ReceiveMessage+0x7e>
		}
		else if (0x04 == *(Receive_Data + 7)) {
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d103      	bne.n	8000bc0 <ReceiveMessage+0x5c>
			EBS_Pressure_Check = 0;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <ReceiveMessage+0xbc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e010      	b.n	8000be2 <ReceiveMessage+0x7e>
		}
		else if (0x08 == *(Receive_Data + 7)) {
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3307      	adds	r3, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d103      	bne.n	8000bd2 <ReceiveMessage+0x6e>
			EBS_Pressure_Check = 0;
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <ReceiveMessage+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <ReceiveMessage+0x7e>
		}
		else if (0x20 ==*(Receive_Data + 7)) {
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b20      	cmp	r3, #32
 8000bda:	d102      	bne.n	8000be2 <ReceiveMessage+0x7e>
			Service_Brake_Check = 0;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <ReceiveMessage+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
		}
	}
	if (ReceptionHeader->StdId == EPOS4_ID) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2208      	movs	r2, #8
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d110      	bne.n	8000c0e <ReceiveMessage+0xaa>
			if (0x01 == *(Receive_Data + 7)) {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3307      	adds	r3, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d103      	bne.n	8000bfe <ReceiveMessage+0x9a>
				Steering_Actuator_Check = 1;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <ReceiveMessage+0xc4>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
			}
			else if (0x02 == *(Receive_Data + 7)) {
				Steering_Actuator_Check = 0;
			}
	}
}
 8000bfc:	e007      	b.n	8000c0e <ReceiveMessage+0xaa>
			else if (0x02 == *(Receive_Data + 7)) {
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3307      	adds	r3, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d102      	bne.n	8000c0e <ReceiveMessage+0xaa>
				Steering_Actuator_Check = 0;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <ReceiveMessage+0xc4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000174 	.word	0x20000174
 8000c20:	20000178 	.word	0x20000178
 8000c24:	2000017c 	.word	0x2000017c
 8000c28:	20000180 	.word	0x20000180

08000c2c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f001 f9ff 	bl	800203e <HAL_CAN_GetRxMessage>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000c46:	f000 fb51 	bl	80012ec <Error_Handler>
  }
  ReceiveMessage(&RxHeader, RxData);
 8000c4a:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000c4e:	f7ff ff89 	bl	8000b64 <ReceiveMessage>
	}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000016c 	.word	0x2000016c
 8000c60:	20000150 	.word	0x20000150

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <MX_DMA_Init+0x3c>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_DMA_Init+0x3c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2046      	movs	r0, #70	@ 0x46
 8000c8c:	f001 fe3d 	bl	800290a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000c90:	2046      	movs	r0, #70	@ 0x46
 8000c92:	f001 fe56 	bl	8002942 <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b59      	ldr	r3, [pc, #356]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a58      	ldr	r2, [pc, #352]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b56      	ldr	r3, [pc, #344]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b52      	ldr	r3, [pc, #328]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a51      	ldr	r2, [pc, #324]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <MX_GPIO_Init+0x180>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASMS__SIG_GPIO_Port, ASMS__SIG_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	4845      	ldr	r0, [pc, #276]	@ (8000e28 <MX_GPIO_Init+0x184>)
 8000d14:	f002 fb62 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4843      	ldr	r0, [pc, #268]	@ (8000e2c <MX_GPIO_Init+0x188>)
 8000d1e:	f002 fb5d 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AS_SDC_Pin|WDI_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d28:	4841      	ldr	r0, [pc, #260]	@ (8000e30 <MX_GPIO_Init+0x18c>)
 8000d2a:	f002 fb57 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BMS_FLT_Pin|BMS_FAULT_Pin|BSPD_FLT_Pin|WDG_STATUS_Pin;
 8000d2e:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	4839      	ldr	r0, [pc, #228]	@ (8000e28 <MX_GPIO_Init+0x184>)
 8000d44:	f002 f996 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_FAULT_Pin;
 8000d48:	2340      	movs	r3, #64	@ 0x40
 8000d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IMD_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4833      	ldr	r0, [pc, #204]	@ (8000e28 <MX_GPIO_Init+0x184>)
 8000d5c:	f002 f98a 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ASMS__SIG_Pin;
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASMS__SIG_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	482c      	ldr	r0, [pc, #176]	@ (8000e28 <MX_GPIO_Init+0x184>)
 8000d78:	f002 f97c 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS_CLOSE_SDC_Pin;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS_CLOSE_SDC_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	4826      	ldr	r0, [pc, #152]	@ (8000e2c <MX_GPIO_Init+0x188>)
 8000d94:	f002 f96e 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = _3V3_TS_SWITCH_Pin|AS_SWITCH_Pin;
 8000d98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	4820      	ldr	r0, [pc, #128]	@ (8000e30 <MX_GPIO_Init+0x18c>)
 8000dae:	f002 f961 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_CHECK_Pin|WDO_Pin;
 8000db2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481a      	ldr	r0, [pc, #104]	@ (8000e30 <MX_GPIO_Init+0x18c>)
 8000dc8:	f002 f954 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AS_SDC_Pin|WDI_Pin;
 8000dcc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	4812      	ldr	r0, [pc, #72]	@ (8000e30 <MX_GPIO_Init+0x18c>)
 8000de6:	f002 f945 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_1_SIG_Pin|ROT_2_SIG_Pin;
 8000dea:	23c0      	movs	r3, #192	@ 0xc0
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <MX_GPIO_Init+0x188>)
 8000dfe:	f002 f939 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ROT_3_SIG_Pin|ROT_4_SIG_Pin;
 8000e02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_GPIO_Init+0x188>)
 8000e18:	f002 f92c 	bl	8003074 <HAL_GPIO_Init>

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020400 	.word	0x40020400

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ASMS_Status = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  enum SYSTEM_FAILURE;
  FAILURE_MODE_READING FAILURE_MODE = NONE;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ROT_SWITCH R2D;
  AS__INDICATOR_STATES State_Variables = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  AS__INDICATOR_STATES* indicators = &State_Variables;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	61fb      	str	r3, [r7, #28]
  Read_Rotary(&R2D);
 8000e56:	f107 031b 	add.w	r3, r7, #27
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fa0e 	bl	800127c <Read_Rotary>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e60:	f000 fcfa 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 f938 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e68:	f7ff ff1c 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f7ff fefa 	bl	8000c64 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e70:	f7ff fde2 	bl	8000a38 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000e74:	f7ff fcc8 	bl	8000808 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e78:	f7ff fd18 	bl	80008ac <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000e7c:	f000 fc14 	bl	80016a8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000e80:	f000 fb68 	bl	8001554 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e84:	f000 fb9c 	bl	80015c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4887      	ldr	r0, [pc, #540]	@ (80010a8 <main+0x274>)
 8000e8c:	f001 f9e9 	bl	8002262 <HAL_CAN_ActivateNotification>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <main+0x66>
  {
	  Error_Handler();
 8000e96:	f000 fa29 	bl	80012ec <Error_Handler>
  }

  ASSI_Off();
 8000e9a:	f7ff fc01 	bl	80006a0 <ASSI_Off>
  HAL_GPIO_WritePin(ANL1_GPIO_Port, ANL1_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4882      	ldr	r0, [pc, #520]	@ (80010ac <main+0x278>)
 8000ea4:	f002 fa9a 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ANL2_GPIO_Port, ANL2_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2104      	movs	r1, #4
 8000eac:	487f      	ldr	r0, [pc, #508]	@ (80010ac <main+0x278>)
 8000eae:	f002 fa95 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000eb2:	487f      	ldr	r0, [pc, #508]	@ (80010b0 <main+0x27c>)
 8000eb4:	f002 ff6e 	bl	8003d94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000eb8:	487e      	ldr	r0, [pc, #504]	@ (80010b4 <main+0x280>)
 8000eba:	f002 ff6b 	bl	8003d94 <HAL_TIM_Base_Start_IT>

  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 8000ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80010b4 <main+0x280>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec4:	4a7c      	ldr	r2, [pc, #496]	@ (80010b8 <main+0x284>)
 8000ec6:	6013      	str	r3, [r2, #0]
  while (HAL_GPIO_ReadPin(GPIOB, SDC_CHECK_Pin) == 0) {
 8000ec8:	e00f      	b.n	8000eea <main+0xb6>
	  if (timecheck - __HAL_TIM_GET_COUNTER(&htim7) > 15) {
 8000eca:	4b7b      	ldr	r3, [pc, #492]	@ (80010b8 <main+0x284>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b79      	ldr	r3, [pc, #484]	@ (80010b4 <main+0x280>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	d907      	bls.n	8000eea <main+0xb6>
		  /* insert error handler for SDC not working, power on reset showing continued transitory behaviour
		   * or TS Switch not sending signal */
		  FAILURE_MODE = SDC_FAILURE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		  SystemFailureHandler(FAILURE_MODE);
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f96b 	bl	80011c0 <SystemFailureHandler>
  while (HAL_GPIO_ReadPin(GPIOB, SDC_CHECK_Pin) == 0) {
 8000eea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eee:	4873      	ldr	r0, [pc, #460]	@ (80010bc <main+0x288>)
 8000ef0:	f002 fa5c 	bl	80033ac <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0e7      	beq.n	8000eca <main+0x96>
	  }
  }

  HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8000efa:	2036      	movs	r0, #54	@ 0x36
 8000efc:	f001 fd2f 	bl	800295e <HAL_NVIC_DisableIRQ>
  HAL_Delay(200);
 8000f00:	20c8      	movs	r0, #200	@ 0xc8
 8000f02:	f000 fd1b 	bl	800193c <HAL_Delay>
  if (HAL_GPIO_ReadPin(GPIOB, SDC_CHECK_Pin) == 1) {
 8000f06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0a:	486c      	ldr	r0, [pc, #432]	@ (80010bc <main+0x288>)
 8000f0c:	f002 fa4e 	bl	80033ac <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d107      	bne.n	8000f26 <main+0xf2>
	  /* insert error handler for dysfunctional Non-Prog logic leading to constant high SDC_Check*/
	  FAILURE_MODE = NON_PROG_FAILURE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  SystemFailureHandler(FAILURE_MODE);
 8000f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f94d 	bl	80011c0 <SystemFailureHandler>
  }

  timecheck = __HAL_TIM_GET_COUNTER(&htim7);
 8000f26:	4b63      	ldr	r3, [pc, #396]	@ (80010b4 <main+0x280>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	4a62      	ldr	r2, [pc, #392]	@ (80010b8 <main+0x284>)
 8000f2e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f30:	2036      	movs	r0, #54	@ 0x36
 8000f32:	f001 fd06 	bl	8002942 <HAL_NVIC_EnableIRQ>
  while (EBS_Energy_Check == 0 && EBS_Pressure_Check == 0) {
 8000f36:	bf00      	nop
 8000f38:	4b61      	ldr	r3, [pc, #388]	@ (80010c0 <main+0x28c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <main+0x112>
 8000f40:	4b60      	ldr	r3, [pc, #384]	@ (80010c4 <main+0x290>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
		  SystemFailureHandler(FAILURE_MODE);
	  }
  }


  HAL_GPIO_WritePin(AS_CLOSE_SDC_GPIO_Port, AS_CLOSE_SDC_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2110      	movs	r1, #16
 8000f4a:	485f      	ldr	r0, [pc, #380]	@ (80010c8 <main+0x294>)
 8000f4c:	f002 fa46 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f54:	f000 fcf2 	bl	800193c <HAL_Delay>

  HAL_GPIO_WritePin(ANL1_GPIO_Port, ANL1_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4853      	ldr	r0, [pc, #332]	@ (80010ac <main+0x278>)
 8000f5e:	f002 fa3d 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 8000f62:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000f66:	f000 fce9 	bl	800193c <HAL_Delay>
  if (EBS_Pressure_Check == 0) {
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <main+0x290>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <main+0x14e>
	  FAILURE_MODE = EBS_FAILURE;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  SystemFailureHandler(FAILURE_MODE);
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f91f 	bl	80011c0 <SystemFailureHandler>
    }
  HAL_GPIO_WritePin(ANL1_GPIO_Port, ANL1_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2102      	movs	r1, #2
 8000f86:	4849      	ldr	r0, [pc, #292]	@ (80010ac <main+0x278>)
 8000f88:	f002 fa28 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f90:	f000 fcd4 	bl	800193c <HAL_Delay>

  av_status = READY;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	@ (80010cc <main+0x298>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ASMS_Status = HAL_GPIO_ReadPin(ASMS__SIG_GPIO_Port, ASMS__SIG_Pin);
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	4843      	ldr	r0, [pc, #268]	@ (80010ac <main+0x278>)
 8000f9e:	f002 fa05 	bl	80033ac <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	623b      	str	r3, [r7, #32]
	AV_State_Outputs(av_status, FAILURE_MODE);
 8000fa6:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <main+0x298>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f937 	bl	8001224 <AV_State_Outputs>
	Read_Rotary(&R2D);
 8000fb6:	f107 031b 	add.w	r3, r7, #27
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f95e 	bl	800127c <Read_Rotary>
	indicators->R_S = R2D;
 8000fc0:	7efa      	ldrb	r2, [r7, #27]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	711a      	strb	r2, [r3, #4]
	indicators->TS = HAL_GPIO_ReadPin(_3V3_TS_SWITCH_GPIO_Port, _3V3_TS_SWITCH_Pin);
 8000fc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fca:	483c      	ldr	r0, [pc, #240]	@ (80010bc <main+0x288>)
 8000fcc:	f002 f9ee 	bl	80033ac <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	601a      	str	r2, [r3, #0]
	indicators->SB = Service_Brake_Check;
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80010d0 <main+0x29c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	60da      	str	r2, [r3, #12]
	indicators->SA = Steering_Actuator_Check;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <main+0x2a0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	609a      	str	r2, [r3, #8]

	if (EBS_Energy_Check == 1 && EBS_Pressure_Check == 1) {
 8000fe8:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <main+0x28c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d107      	bne.n	8001000 <main+0x1cc>
 8000ff0:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <main+0x290>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d103      	bne.n	8001000 <main+0x1cc>
		indicators->EBS = 1;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	e024      	b.n	800104a <main+0x216>
	}
	else if (EBS_Energy_Check == 0 && EBS_Pressure_Check == 0) {
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <main+0x28c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <main+0x1e4>
 8001008:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <main+0x290>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <main+0x1e4>
		indicators->EBS = 0;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	e018      	b.n	800104a <main+0x216>
	}
	else if (EBS_Energy_Check == 1 && EBS_Pressure_Check == 1 && HAL_GPIO_ReadPin(ANL1_GPIO_Port, ANL1_Pin) == 0 && HAL_GPIO_ReadPin(ANL2_GPIO_Port, ANL2_Pin) == 0) {
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <main+0x28c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d114      	bne.n	800104a <main+0x216>
 8001020:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <main+0x290>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d110      	bne.n	800104a <main+0x216>
 8001028:	2102      	movs	r1, #2
 800102a:	4820      	ldr	r0, [pc, #128]	@ (80010ac <main+0x278>)
 800102c:	f002 f9be 	bl	80033ac <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <main+0x216>
 8001036:	2104      	movs	r1, #4
 8001038:	481c      	ldr	r0, [pc, #112]	@ (80010ac <main+0x278>)
 800103a:	f002 f9b7 	bl	80033ac <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <main+0x216>
			indicators->EBS = 2;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2202      	movs	r2, #2
 8001048:	611a      	str	r2, [r3, #16]
	}

	switch(av_status) {
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <main+0x298>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d1a3      	bne.n	8000f9a <main+0x166>
			case OFF:
				if(indicators->R_S == ROT_1 && indicators->TS == 1 && ASMS_Status == 0) {
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <main+0x23c>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d106      	bne.n	8001070 <main+0x23c>
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <main+0x23c>
					av_status = MANUAL;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <main+0x298>)
 800106a:	2205      	movs	r2, #5
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e01a      	b.n	80010a6 <main+0x272>
				}
				else if(indicators->R_S == ROT_2 && indicators->TS == 1
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d190      	bne.n	8000f9a <main+0x166>
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d18c      	bne.n	8000f9a <main+0x166>
						&& ASMS_Status == 1 && indicators->EBS == 2 &&
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d189      	bne.n	8000f9a <main+0x166>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d185      	bne.n	8000f9a <main+0x166>
						indicators->SB == 1 && indicators->SA == 1) {
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	68db      	ldr	r3, [r3, #12]
						&& ASMS_Status == 1 && indicators->EBS == 2 &&
 8001092:	2b01      	cmp	r3, #1
 8001094:	d181      	bne.n	8000f9a <main+0x166>
						indicators->SB == 1 && indicators->SA == 1) {
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	f47f af7d 	bne.w	8000f9a <main+0x166>
					av_status = DRIVING;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <main+0x298>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	ASMS_Status = HAL_GPIO_ReadPin(ASMS__SIG_GPIO_Port, ASMS__SIG_Pin);
 80010a6:	e778      	b.n	8000f9a <main+0x166>
 80010a8:	20000184 	.word	0x20000184
 80010ac:	40020000 	.word	0x40020000
 80010b0:	200001b4 	.word	0x200001b4
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	200001ac 	.word	0x200001ac
 80010bc:	40020400 	.word	0x40020400
 80010c0:	20000174 	.word	0x20000174
 80010c4:	20000178 	.word	0x20000178
 80010c8:	40020800 	.word	0x40020800
 80010cc:	20000000 	.word	0x20000000
 80010d0:	2000017c 	.word	0x2000017c
 80010d4:	20000180 	.word	0x20000180

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fee7 	bl	8004eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <SystemClock_Config+0xb4>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a21      	ldr	r2, [pc, #132]	@ (800118c <SystemClock_Config+0xb4>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <SystemClock_Config+0xb4>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <SystemClock_Config+0xb8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <SystemClock_Config+0xb8>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <SystemClock_Config+0xb8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f002 f97b 	bl	8003444 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001154:	f000 f8ca 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fbde 	bl	8003934 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800117e:	f000 f8b5 	bl	80012ec <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d104      	bne.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
	  HAL_GPIO_TogglePin(GPIOB, WDI_Pin);
 80011a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011aa:	f002 f930 	bl	800340e <HAL_GPIO_TogglePin>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001b4 	.word	0x200001b4
 80011bc:	40020400 	.word	0x40020400

080011c0 <SystemFailureHandler>:

void SystemFailureHandler(FAILURE_MODE_READING fm) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	switch (fm) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d81d      	bhi.n	800120c <SystemFailureHandler+0x4c>
 80011d0:	a201      	add	r2, pc, #4	@ (adr r2, 80011d8 <SystemFailureHandler+0x18>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011ef 	.word	0x080011ef
 80011dc:	080011f9 	.word	0x080011f9
 80011e0:	08001203 	.word	0x08001203
 80011e4:	080011e9 	.word	0x080011e9
		case NONE:
			printf("Everything is fine why was this even called?");
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <SystemFailureHandler+0x54>)
 80011ea:	f003 fe11 	bl	8004e10 <iprintf>
		case SDC_FAILURE:
			printf("SDC/TS Switch/PoR Failure: CHECK CHECK CHECK");
 80011ee:	480a      	ldr	r0, [pc, #40]	@ (8001218 <SystemFailureHandler+0x58>)
 80011f0:	f003 fe0e 	bl	8004e10 <iprintf>
			Error_Handler();
 80011f4:	f000 f87a 	bl	80012ec <Error_Handler>
		case NON_PROG_FAILURE:
			printf("Non Programmable Logic Failure: CHECK CHECK CHECK");
 80011f8:	4808      	ldr	r0, [pc, #32]	@ (800121c <SystemFailureHandler+0x5c>)
 80011fa:	f003 fe09 	bl	8004e10 <iprintf>
			Error_Handler();
 80011fe:	f000 f875 	bl	80012ec <Error_Handler>
		case EBS_FAILURE:
			printf("EBS/Brake Failure: CHECK CHECK CHECK");
 8001202:	4807      	ldr	r0, [pc, #28]	@ (8001220 <SystemFailureHandler+0x60>)
 8001204:	f003 fe04 	bl	8004e10 <iprintf>
			Error_Handler();
 8001208:	f000 f870 	bl	80012ec <Error_Handler>
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08005b04 	.word	0x08005b04
 8001218:	08005b34 	.word	0x08005b34
 800121c:	08005b64 	.word	0x08005b64
 8001220:	08005b98 	.word	0x08005b98

08001224 <AV_State_Outputs>:

void AV_State_Outputs(AV_STATE status, FAILURE_MODE_READING FM) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	switch(status) {
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d81c      	bhi.n	8001274 <AV_State_Outputs+0x50>
 800123a:	a201      	add	r2, pc, #4	@ (adr r2, 8001240 <AV_State_Outputs+0x1c>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001259 	.word	0x08001259
 8001244:	0800125d 	.word	0x0800125d
 8001248:	0800126d 	.word	0x0800126d
 800124c:	08001261 	.word	0x08001261
 8001250:	08001269 	.word	0x08001269
 8001254:	08001271 	.word	0x08001271
		case (READY):
				ASSI_Ready();
 8001258:	f7ff fa3d 	bl	80006d6 <ASSI_Ready>
		case (DRIVING):
				ASSI_Driving();
 800125c:	f7ff fa56 	bl	800070c <ASSI_Driving>
		case (EMERGENCY):
				SystemFailureHandler(FM);
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffac 	bl	80011c0 <SystemFailureHandler>
		case (FINISHED):
				ASSI_Finished();
 8001268:	f7ff fab2 	bl	80007d0 <ASSI_Finished>
		case (OFF):
				ASSI_Off();
 800126c:	f7ff fa18 	bl	80006a0 <ASSI_Off>
		case (MANUAL):
				ASSI_Off();
 8001270:	f7ff fa16 	bl	80006a0 <ASSI_Off>
	}
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Read_Rotary>:

void Read_Rotary(ROT_SWITCH *RS) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(ROT_1_SIG_GPIO_Port, ROT_1_SIG_Pin)) {
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <Read_Rotary+0x6c>)
 8001288:	f002 f890 	bl	80033ac <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d103      	bne.n	800129a <Read_Rotary+0x1e>
		*RS = ROT_1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
			*RS = ROT_3;
		}
	else if (GPIO_PIN_SET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
			*RS = ROT_4;
		}
}
 8001298:	e021      	b.n	80012de <Read_Rotary+0x62>
	else if (GPIO_PIN_SET == HAL_GPIO_ReadPin(ROT_2_SIG_GPIO_Port, ROT_2_SIG_Pin)) {
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <Read_Rotary+0x6c>)
 800129e:	f002 f885 	bl	80033ac <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d103      	bne.n	80012b0 <Read_Rotary+0x34>
		*RS = ROT_2;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	e016      	b.n	80012de <Read_Rotary+0x62>
	else if (GPIO_PIN_SET == HAL_GPIO_ReadPin(ROT_3_SIG_GPIO_Port, ROT_3_SIG_Pin)) {
 80012b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <Read_Rotary+0x6c>)
 80012b6:	f002 f879 	bl	80033ac <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d103      	bne.n	80012c8 <Read_Rotary+0x4c>
			*RS = ROT_3;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
}
 80012c6:	e00a      	b.n	80012de <Read_Rotary+0x62>
	else if (GPIO_PIN_SET == HAL_GPIO_ReadPin(ROT_4_SIG_GPIO_Port, ROT_4_SIG_Pin)) {
 80012c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012cc:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <Read_Rotary+0x6c>)
 80012ce:	f002 f86d 	bl	80033ac <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <Read_Rotary+0x62>
			*RS = ROT_4;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020800 	.word	0x40020800

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ASSI_Emergency();
 80012f4:	f7ff fa3b 	bl	800076e <ASSI_Emergency>
 80012f8:	e7fc      	b.n	80012f4 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 faab 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <CAN1_RX0_IRQHandler+0x10>)
 80013b2:	f000 ff7c 	bl	80022ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000184 	.word	0x20000184

080013c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM6_DAC_IRQHandler+0x10>)
 80013c6:	f002 fd55 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001b4 	.word	0x200001b4

080013d4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <DMA2_Stream7_IRQHandler+0x10>)
 80013da:	f001 fbe1 	bl	8002ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000288 	.word	0x20000288

080013e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
  }
  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001482:	605a      	str	r2, [r3, #4]
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f003 fd30 	bl	8004f58 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20020000 	.word	0x20020000
 8001524:	00000400 	.word	0x00000400
 8001528:	200001b0 	.word	0x200001b0
 800152c:	20000438 	.word	0x20000438

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	463b      	mov	r3, r7
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_TIM6_Init+0x64>)
 8001564:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_TIM6_Init+0x68>)
 8001566:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 61000;
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_TIM6_Init+0x64>)
 800156a:	f64e 6248 	movw	r2, #61000	@ 0xee48
 800156e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_TIM6_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 25;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_TIM6_Init+0x64>)
 8001578:	2219      	movs	r2, #25
 800157a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_TIM6_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001582:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_TIM6_Init+0x64>)
 8001584:	f002 fbb6 	bl	8003cf4 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800158e:	f7ff fead 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <MX_TIM6_Init+0x64>)
 80015a0:	f002 fe38 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f7ff fe9f 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001b4 	.word	0x200001b4
 80015bc:	40001000 	.word	0x40001000

080015c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015d0:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <MX_TIM7_Init+0x68>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <MX_TIM7_Init+0x64>)
 80015f0:	f002 fb80 	bl	8003cf4 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80015fa:	f7ff fe77 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <MX_TIM7_Init+0x64>)
 800160c:	f002 fe02 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001616:	f7ff fe69 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001fc 	.word	0x200001fc
 8001628:	40001400 	.word	0x40001400

0800162c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a18      	ldr	r2, [pc, #96]	@ (800169c <HAL_TIM_Base_MspInit+0x70>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d116      	bne.n	800166c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2036      	movs	r0, #54	@ 0x36
 8001660:	f001 f953 	bl	800290a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001664:	2036      	movs	r0, #54	@ 0x36
 8001666:	f001 f96c 	bl	8002942 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800166a:	e012      	b.n	8001692 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <HAL_TIM_Base_MspInit+0x78>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10d      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40001000 	.word	0x40001000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40001400 	.word	0x40001400

080016a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART1_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ce:	2208      	movs	r2, #8
 80016d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f002 fe28 	bl	8004334 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f7ff fdff 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000244 	.word	0x20000244
 80016f8:	40011000 	.word	0x40011000

080016fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a35      	ldr	r2, [pc, #212]	@ (80017f0 <HAL_UART_MspInit+0xf4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d163      	bne.n	80017e6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a33      	ldr	r2, [pc, #204]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <HAL_UART_MspInit+0xf8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001756:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001768:	2307      	movs	r3, #7
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4821      	ldr	r0, [pc, #132]	@ (80017f8 <HAL_UART_MspInit+0xfc>)
 8001774:	f001 fc7e 	bl	8003074 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_UART_MspInit+0x100>)
 800177a:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <HAL_UART_MspInit+0x104>)
 800177c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_UART_MspInit+0x100>)
 8001780:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001784:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <HAL_UART_MspInit+0x100>)
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_UART_MspInit+0x100>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_UART_MspInit+0x100>)
 8001794:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001798:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0x100>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017b4:	2204      	movs	r2, #4
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017ca:	480c      	ldr	r0, [pc, #48]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017cc:	f001 f8e2 	bl	8002994 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80017d6:	f7ff fd89 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_UART_MspInit+0x100>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	@ 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	20000288 	.word	0x20000288
 8001800:	400264b8 	.word	0x400264b8

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480d      	ldr	r0, [pc, #52]	@ (8001840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180a:	490e      	ldr	r1, [pc, #56]	@ (8001844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800180c:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001820:	4c0b      	ldr	r4, [pc, #44]	@ (8001850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182e:	f7ff fe7f 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f003 fb97 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fafd 	bl	8000e34 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001848:	08005c24 	.word	0x08005c24
  ldr r2, =_sbss
 800184c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001850:	20000438 	.word	0x20000438

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f001 f837 	bl	80028f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fd36 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f85d 	bl	800297a <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f001 f817 	bl	800290a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000004 	.word	0x20000004
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000000c 	.word	0x2000000c
 8001920:	200002e8 	.word	0x200002e8

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200002e8 	.word	0x200002e8

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d005      	beq.n	8001962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <HAL_Delay+0x44>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001962:	bf00      	nop
 8001964:	f7ff ffde 	bl	8001924 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d8f7      	bhi.n	8001964 <HAL_Delay+0x28>
  {
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000000c 	.word	0x2000000c

08001984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e033      	b.n	8001a02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe ffd4 	bl	8000950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019ca:	f023 0302 	bic.w	r3, r3, #2
 80019ce:	f043 0202 	orr.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f93a 	bl	8001c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019f2:	e001      	b.n	80019f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1c>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e105      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x228>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	d925      	bls.n	8001a84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68d9      	ldr	r1, [r3, #12]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b1e      	subs	r3, #30
 8001a4e:	2207      	movs	r2, #7
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43da      	mvns	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68d9      	ldr	r1, [r3, #12]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4603      	mov	r3, r0
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4403      	add	r3, r0
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	e022      	b.n	8001aca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	2207      	movs	r2, #7
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4403      	add	r3, r0
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d824      	bhi.n	8001b1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b05      	subs	r3, #5
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b05      	subs	r3, #5
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b1a:	e04c      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	d824      	bhi.n	8001b6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b23      	subs	r3, #35	@ 0x23
 8001b36:	221f      	movs	r2, #31
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	400a      	ands	r2, r1
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b23      	subs	r3, #35	@ 0x23
 8001b60:	fa00 f203 	lsl.w	r2, r0, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b6c:	e023      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b41      	subs	r3, #65	@ 0x41
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b41      	subs	r3, #65	@ 0x41
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_ADC_ConfigChannel+0x234>)
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <HAL_ADC_ConfigChannel+0x238>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1cc>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_ADC_ConfigChannel+0x238>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d123      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x21e>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d003      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x1e6>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b11      	cmp	r3, #17
 8001bf0:	d11b      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d111      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_ADC_ConfigChannel+0x23c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <HAL_ADC_ConfigChannel+0x240>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0c9a      	lsrs	r2, r3, #18
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012300 	.word	0x40012300
 8001c44:	40012000 	.word	0x40012000
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c58:	4b79      	ldr	r3, [pc, #484]	@ (8001e40 <ADC_Init+0x1f0>)
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	021a      	lsls	r2, r3, #8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	4a58      	ldr	r2, [pc, #352]	@ (8001e44 <ADC_Init+0x1f4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e00f      	b.n	8001d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0202 	bic.w	r2, r2, #2
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	005a      	lsls	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	3b01      	subs	r3, #1
 8001da8:	035a      	lsls	r2, r3, #13
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	e007      	b.n	8001dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	051a      	lsls	r2, r3, #20
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e06:	025a      	lsls	r2, r3, #9
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	029a      	lsls	r2, r3, #10
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40012300 	.word	0x40012300
 8001e44:	0f000001 	.word	0x0f000001

08001e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0ed      	b.n	8002036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fe2c 	bl	8000ac4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7c:	f7ff fd52 	bl	8001924 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e82:	e012      	b.n	8001eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e84:	f7ff fd4e 	bl	8001924 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d90b      	bls.n	8001eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0c5      	b.n	8002036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0e5      	beq.n	8001e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0202 	bic.w	r2, r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec8:	f7ff fd2c 	bl	8001924 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ece:	e012      	b.n	8001ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ed0:	f7ff fd28 	bl	8001924 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b0a      	cmp	r3, #10
 8001edc:	d90b      	bls.n	8001ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2205      	movs	r2, #5
 8001eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e09f      	b.n	8002036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e5      	bne.n	8001ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e007      	b.n	8001f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7e5b      	ldrb	r3, [r3, #25]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e9b      	ldrb	r3, [r3, #26]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d108      	bne.n	8001f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0220 	bic.w	r2, r2, #32
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7edb      	ldrb	r3, [r3, #27]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0210 	bic.w	r2, r2, #16
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e007      	b.n	8001fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0210 	orr.w	r2, r2, #16
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7f1b      	ldrb	r3, [r3, #28]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0208 	bic.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f5b      	ldrb	r3, [r3, #29]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0204 	orr.w	r2, r2, #4
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e007      	b.n	8002000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	ea42 0103 	orr.w	r1, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800203e:	b480      	push	{r7}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_CAN_GetRxMessage+0x24>
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80f3 	bne.w	8002248 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10e      	bne.n	8002086 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0e7      	b.n	8002256 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0d8      	b.n	8002256 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	331b      	adds	r3, #27
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0204 	and.w	r2, r3, #4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	331b      	adds	r3, #27
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0d5b      	lsrs	r3, r3, #21
 80020d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	331b      	adds	r3, #27
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	331b      	adds	r3, #27
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0202 	and.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	331b      	adds	r3, #27
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	3304      	adds	r3, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	331b      	adds	r3, #27
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	331b      	adds	r3, #27
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	3304      	adds	r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0a1a      	lsrs	r2, r3, #8
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0c1a      	lsrs	r2, r3, #16
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	3302      	adds	r3, #2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e1a      	lsrs	r2, r3, #24
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3303      	adds	r3, #3
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3304      	adds	r3, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0a1a      	lsrs	r2, r3, #8
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3305      	adds	r3, #5
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0c1a      	lsrs	r2, r3, #16
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3306      	adds	r3, #6
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0e1a      	lsrs	r2, r3, #24
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3307      	adds	r3, #7
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0220 	orr.w	r2, r2, #32
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	e007      	b.n	8002244 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0220 	orr.w	r2, r2, #32
 8002242:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e006      	b.n	8002256 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_CAN_ActivateNotification+0x1e>
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d109      	bne.n	8002294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6959      	ldr	r1, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e006      	b.n	80022a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	@ 0x28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d07c      	beq.n	80023ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d023      	beq.n	8002346 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f983 	bl	800261c <HAL_CAN_TxMailbox0CompleteCallback>
 8002316:	e016      	b.n	8002346 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
 800232a:	e00c      	b.n	8002346 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
 800233e:	e002      	b.n	8002346 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f989 	bl	8002658 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d024      	beq.n	800239a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002358:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f963 	bl	8002630 <HAL_CAN_TxMailbox1CompleteCallback>
 800236a:	e016      	b.n	800239a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	e00c      	b.n	800239a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
 8002392:	e002      	b.n	800239a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f969 	bl	800266c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d024      	beq.n	80023ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f943 	bl	8002644 <HAL_CAN_TxMailbox2CompleteCallback>
 80023be:	e016      	b.n	80023ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d2:	e00c      	b.n	80023ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e6:	e002      	b.n	80023ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f949 	bl	8002680 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00c      	beq.n	8002412 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2210      	movs	r2, #16
 8002410:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2208      	movs	r2, #8
 800242c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f930 	bl	8002694 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe fbed 	bl	8000c2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2208      	movs	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f912 	bl	80026bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8f9 	bl	80026a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2210      	movs	r2, #16
 80024d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8fc 	bl	80026d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2208      	movs	r2, #8
 80024f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f8f5 	bl	80026e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d07b      	beq.n	80025fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d072      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002568:	2b00      	cmp	r3, #0
 800256a:	d043      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03e      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800257c:	2b60      	cmp	r3, #96	@ 0x60
 800257e:	d02b      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x32a>
 8002580:	2b60      	cmp	r3, #96	@ 0x60
 8002582:	d82e      	bhi.n	80025e2 <HAL_CAN_IRQHandler+0x334>
 8002584:	2b50      	cmp	r3, #80	@ 0x50
 8002586:	d022      	beq.n	80025ce <HAL_CAN_IRQHandler+0x320>
 8002588:	2b50      	cmp	r3, #80	@ 0x50
 800258a:	d82a      	bhi.n	80025e2 <HAL_CAN_IRQHandler+0x334>
 800258c:	2b40      	cmp	r3, #64	@ 0x40
 800258e:	d019      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x316>
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d826      	bhi.n	80025e2 <HAL_CAN_IRQHandler+0x334>
 8002594:	2b30      	cmp	r3, #48	@ 0x30
 8002596:	d010      	beq.n	80025ba <HAL_CAN_IRQHandler+0x30c>
 8002598:	2b30      	cmp	r3, #48	@ 0x30
 800259a:	d822      	bhi.n	80025e2 <HAL_CAN_IRQHandler+0x334>
 800259c:	2b10      	cmp	r3, #16
 800259e:	d002      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x2f8>
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d005      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025a4:	e01d      	b.n	80025e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ae:	e019      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025b8:	e014      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c2:	e00f      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025cc:	e00a      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025d6:	e005      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025e0:	e000      	b.n	80025e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80025e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2204      	movs	r2, #4
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f872 	bl	80026f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db12      	blt.n	80027e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	490a      	ldr	r1, [pc, #40]	@ (80027f0 <__NVIC_DisableIRQ+0x44>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	3320      	adds	r3, #32
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027d8:	f3bf 8f4f 	dsb	sy
}
 80027dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027de:	f3bf 8f6f 	isb	sy
}
 80027e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100

080027f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db0a      	blt.n	800281e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	490c      	ldr	r1, [pc, #48]	@ (8002840 <__NVIC_SetPriority+0x4c>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800281c:	e00a      	b.n	8002834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4908      	ldr	r1, [pc, #32]	@ (8002844 <__NVIC_SetPriority+0x50>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3b04      	subs	r3, #4
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	440b      	add	r3, r1
 8002832:	761a      	strb	r2, [r3, #24]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	@ 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf28      	it	cs
 8002866:	2304      	movcs	r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	d902      	bls.n	8002878 <NVIC_EncodePriority+0x30>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3b03      	subs	r3, #3
 8002876:	e000      	b.n	800287a <NVIC_EncodePriority+0x32>
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43d9      	mvns	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	4313      	orrs	r3, r2
         );
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	@ 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c0:	d301      	bcc.n	80028c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00f      	b.n	80028e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <SysTick_Config+0x40>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ce:	210f      	movs	r1, #15
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f7ff ff8e 	bl	80027f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <SysTick_Config+0x40>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028de:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <SysTick_Config+0x40>)
 80028e0:	2207      	movs	r2, #7
 80028e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010

080028f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff05 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800291c:	f7ff ff1a 	bl	8002754 <__NVIC_GetPriorityGrouping>
 8002920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f7ff ff8e 	bl	8002848 <NVIC_EncodePriority>
 800292c:	4602      	mov	r2, r0
 800292e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff5d 	bl	80027f4 <__NVIC_SetPriority>
}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff0d 	bl	8002770 <__NVIC_EnableIRQ>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff1d 	bl	80027ac <__NVIC_DisableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff94 	bl	80028b0 <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7fe ffc0 	bl	8001924 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e099      	b.n	8002ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d0:	e00f      	b.n	80029f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d2:	f7fe ffa7 	bl	8001924 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d908      	bls.n	80029f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e078      	b.n	8002ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e8      	bne.n	80029d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4b38      	ldr	r3, [pc, #224]	@ (8002aec <HAL_DMA_Init+0x158>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4313      	orrs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0307 	bic.w	r3, r3, #7
 8002a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d117      	bne.n	8002ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa6f 	bl	8002f7c <DMA_CheckFifoParam>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2240      	movs	r2, #64	@ 0x40
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e016      	b.n	8002ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa26 	bl	8002f10 <DMA_CalcBaseAndBitshift>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	223f      	movs	r2, #63	@ 0x3f
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	f010803f 	.word	0xf010803f

08002af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_DMA_Start_IT+0x26>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e040      	b.n	8002b98 <HAL_DMA_Start_IT+0xa8>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d12f      	bne.n	8002b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9b8 	bl	8002eb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	223f      	movs	r2, #63	@ 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0216 	orr.w	r2, r2, #22
 8002b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0208 	orr.w	r2, r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e005      	b.n	8002b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bac:	4b8e      	ldr	r3, [pc, #568]	@ (8002de8 <HAL_DMA_IRQHandler+0x248>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8002dec <HAL_DMA_IRQHandler+0x24c>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0a9b      	lsrs	r3, r3, #10
 8002bb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	2208      	movs	r2, #8
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01a      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0204 	bic.w	r2, r2, #4
 8002bf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2201      	movs	r2, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2201      	movs	r2, #1
 8002c30:	409a      	lsls	r2, r3
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	2204      	movs	r2, #4
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2204      	movs	r2, #4
 8002c66:	409a      	lsls	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	f043 0204 	orr.w	r2, r3, #4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d043      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03c      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d024      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e01f      	b.n	8002d10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e016      	b.n	8002d10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0208 	bic.w	r2, r2, #8
 8002cfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2220      	movs	r2, #32
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 808f 	beq.w	8002e40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8087 	beq.w	8002e40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	2220      	movs	r2, #32
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d136      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0216 	bic.w	r2, r2, #22
 8002d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_DMA_IRQHandler+0x1da>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0208 	bic.w	r2, r2, #8
 8002d88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	223f      	movs	r2, #63	@ 0x3f
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d07e      	beq.n	8002eac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
        }
        return;
 8002db6:	e079      	b.n	8002eac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01d      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10d      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d031      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
 8002de4:	e02c      	b.n	8002e40 <HAL_DMA_IRQHandler+0x2a0>
 8002de6:	bf00      	nop
 8002de8:	20000004 	.word	0x20000004
 8002dec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
 8002e00:	e01e      	b.n	8002e40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0210 	bic.w	r2, r2, #16
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d032      	beq.n	8002eae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d022      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d307      	bcc.n	8002e88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f2      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x2cc>
 8002e86:	e000      	b.n	8002e8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	e000      	b.n	8002eae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eac:	bf00      	nop
    }
  }
}
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b40      	cmp	r3, #64	@ 0x40
 8002ee0:	d108      	bne.n	8002ef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ef2:	e007      	b.n	8002f04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3b10      	subs	r3, #16
 8002f20:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <DMA_CalcBaseAndBitshift+0x64>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f2a:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <DMA_CalcBaseAndBitshift+0x68>)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d909      	bls.n	8002f52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	1d1a      	adds	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f50:	e007      	b.n	8002f62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	aaaaaaab 	.word	0xaaaaaaab
 8002f78:	08005bd8 	.word	0x08005bd8

08002f7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11f      	bne.n	8002fd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d856      	bhi.n	800304a <DMA_CheckFifoParam+0xce>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <DMA_CheckFifoParam+0x28>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fc7 	.word	0x08002fc7
 8002fac:	08002fb5 	.word	0x08002fb5
 8002fb0:	0800304b 	.word	0x0800304b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d046      	beq.n	800304e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc4:	e043      	b.n	800304e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fce:	d140      	bne.n	8003052 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd4:	e03d      	b.n	8003052 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fde:	d121      	bne.n	8003024 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d837      	bhi.n	8003056 <DMA_CheckFifoParam+0xda>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <DMA_CheckFifoParam+0x70>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003003 	.word	0x08003003
 8002ff4:	08002ffd 	.word	0x08002ffd
 8002ff8:	08003015 	.word	0x08003015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e030      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003006:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d025      	beq.n	800305a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003012:	e022      	b.n	800305a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800301c:	d11f      	bne.n	800305e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003022:	e01c      	b.n	800305e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d903      	bls.n	8003032 <DMA_CheckFifoParam+0xb6>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d003      	beq.n	8003038 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003030:	e018      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
      break;
 8003036:	e015      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	e00b      	b.n	8003062 <DMA_CheckFifoParam+0xe6>
      break;
 800304a:	bf00      	nop
 800304c:	e00a      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;
 800304e:	bf00      	nop
 8003050:	e008      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;
 8003052:	bf00      	nop
 8003054:	e006      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e004      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e002      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;   
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <DMA_CheckFifoParam+0xe8>
      break;
 8003062:	bf00      	nop
    }
  } 
  
  return status; 
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e16b      	b.n	8003368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f040 815a 	bne.w	8003362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d005      	beq.n	80030c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d130      	bne.n	8003128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 0201 	and.w	r2, r3, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b03      	cmp	r3, #3
 8003132:	d017      	beq.n	8003164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d123      	bne.n	80031b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3208      	adds	r2, #8
 8003178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220f      	movs	r2, #15
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08da      	lsrs	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80b4 	beq.w	8003362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	4a5f      	ldr	r2, [pc, #380]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 8003204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003208:	6453      	str	r3, [r2, #68]	@ 0x44
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <HAL_GPIO_Init+0x30c>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003216:	4a5b      	ldr	r2, [pc, #364]	@ (8003384 <HAL_GPIO_Init+0x310>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a52      	ldr	r2, [pc, #328]	@ (8003388 <HAL_GPIO_Init+0x314>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02b      	beq.n	800329a <HAL_GPIO_Init+0x226>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a51      	ldr	r2, [pc, #324]	@ (800338c <HAL_GPIO_Init+0x318>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x222>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a50      	ldr	r2, [pc, #320]	@ (8003390 <HAL_GPIO_Init+0x31c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x21e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	@ (8003394 <HAL_GPIO_Init+0x320>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x21a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4e      	ldr	r2, [pc, #312]	@ (8003398 <HAL_GPIO_Init+0x324>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x216>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4d      	ldr	r2, [pc, #308]	@ (800339c <HAL_GPIO_Init+0x328>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x212>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4c      	ldr	r2, [pc, #304]	@ (80033a0 <HAL_GPIO_Init+0x32c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x20e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4b      	ldr	r2, [pc, #300]	@ (80033a4 <HAL_GPIO_Init+0x330>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x20a>
 800327a:	2307      	movs	r3, #7
 800327c:	e00e      	b.n	800329c <HAL_GPIO_Init+0x228>
 800327e:	2308      	movs	r3, #8
 8003280:	e00c      	b.n	800329c <HAL_GPIO_Init+0x228>
 8003282:	2306      	movs	r3, #6
 8003284:	e00a      	b.n	800329c <HAL_GPIO_Init+0x228>
 8003286:	2305      	movs	r3, #5
 8003288:	e008      	b.n	800329c <HAL_GPIO_Init+0x228>
 800328a:	2304      	movs	r3, #4
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x228>
 800328e:	2303      	movs	r3, #3
 8003290:	e004      	b.n	800329c <HAL_GPIO_Init+0x228>
 8003292:	2302      	movs	r3, #2
 8003294:	e002      	b.n	800329c <HAL_GPIO_Init+0x228>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_GPIO_Init+0x228>
 800329a:	2300      	movs	r3, #0
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	f002 0203 	and.w	r2, r2, #3
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	4093      	lsls	r3, r2
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ac:	4935      	ldr	r1, [pc, #212]	@ (8003384 <HAL_GPIO_Init+0x310>)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ba:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032de:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e4:	4b30      	ldr	r3, [pc, #192]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003308:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800330e:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003332:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003338:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800335c:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3301      	adds	r3, #1
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	f67f ae90 	bls.w	8003090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	3724      	adds	r7, #36	@ 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
 8003384:	40013800 	.word	0x40013800
 8003388:	40020000 	.word	0x40020000
 800338c:	40020400 	.word	0x40020400
 8003390:	40020800 	.word	0x40020800
 8003394:	40020c00 	.word	0x40020c00
 8003398:	40021000 	.word	0x40021000
 800339c:	40021400 	.word	0x40021400
 80033a0:	40021800 	.word	0x40021800
 80033a4:	40021c00 	.word	0x40021c00
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	041a      	lsls	r2, r3, #16
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43d9      	mvns	r1, r3
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	400b      	ands	r3, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	619a      	str	r2, [r3, #24]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e267      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d00c      	beq.n	8003488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d112      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b82      	ldr	r3, [pc, #520]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b7e      	ldr	r3, [pc, #504]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05b      	beq.n	800354c <HAL_RCC_OscConfig+0x108>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e242      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x74>
 80034aa:	4b76      	ldr	r3, [pc, #472]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e01d      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b70      	ldr	r3, [pc, #448]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034dc:	4b69      	ldr	r3, [pc, #420]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a68      	ldr	r2, [pc, #416]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b66      	ldr	r3, [pc, #408]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fa12 	bl	8001924 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe fa0e 	bl	8001924 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e207      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b5b      	ldr	r3, [pc, #364]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0xc0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe f9fe 	bl	8001924 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fe f9fa 	bl	8001924 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	@ 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1f3      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	4b51      	ldr	r3, [pc, #324]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xe8>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	4b4a      	ldr	r3, [pc, #296]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b47      	ldr	r3, [pc, #284]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356e:	2b08      	cmp	r3, #8
 8003570:	d11c      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b44      	ldr	r3, [pc, #272]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	4b41      	ldr	r3, [pc, #260]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1c7      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4937      	ldr	r1, [pc, #220]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	e03a      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	4b34      	ldr	r3, [pc, #208]	@ (8003688 <HAL_RCC_OscConfig+0x244>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe f9b3 	bl	8001924 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c2:	f7fe f9af 	bl	8001924 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1a8      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b28      	ldr	r3, [pc, #160]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4925      	ldr	r1, [pc, #148]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f6:	4b24      	ldr	r3, [pc, #144]	@ (8003688 <HAL_RCC_OscConfig+0x244>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f992 	bl	8001924 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe f98e 	bl	8001924 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e187      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <HAL_RCC_OscConfig+0x248>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe f972 	bl	8001924 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003644:	f7fe f96e 	bl	8001924 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e167      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <HAL_RCC_OscConfig+0x240>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x200>
 8003662:	e01b      	b.n	800369c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_OscConfig+0x248>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe f95b 	bl	8001924 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	e00e      	b.n	8003690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003672:	f7fe f957 	bl	8001924 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d907      	bls.n	8003690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e150      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	42470000 	.word	0x42470000
 800368c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b88      	ldr	r3, [pc, #544]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ea      	bne.n	8003672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8097 	beq.w	80037d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b81      	ldr	r3, [pc, #516]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b7d      	ldr	r3, [pc, #500]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	4a7c      	ldr	r2, [pc, #496]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ca:	4b7a      	ldr	r3, [pc, #488]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b77      	ldr	r3, [pc, #476]	@ (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b74      	ldr	r3, [pc, #464]	@ (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	@ (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fe f917 	bl	8001924 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fe f913 	bl	8001924 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e10c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b6a      	ldr	r3, [pc, #424]	@ (80038b8 <HAL_RCC_OscConfig+0x474>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x2ea>
 8003720:	4b64      	ldr	r3, [pc, #400]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	4a63      	ldr	r2, [pc, #396]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	@ 0x70
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x30c>
 8003736:	4b5f      	ldr	r3, [pc, #380]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	4a5e      	ldr	r2, [pc, #376]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	@ 0x70
 8003742:	4b5c      	ldr	r3, [pc, #368]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	4a5b      	ldr	r2, [pc, #364]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	@ 0x70
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 8003750:	4b58      	ldr	r3, [pc, #352]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a57      	ldr	r2, [pc, #348]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
 800375c:	4b55      	ldr	r3, [pc, #340]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	4a54      	ldr	r2, [pc, #336]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe f8d8 	bl	8001924 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe f8d4 	bl	8001924 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e0cb      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	4b49      	ldr	r3, [pc, #292]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ee      	beq.n	8003778 <HAL_RCC_OscConfig+0x334>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fe f8c2 	bl	8001924 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe f8be 	bl	8001924 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0b5      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	4a38      	ldr	r2, [pc, #224]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a1 	beq.w	8003924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e2:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d05c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d141      	bne.n	800387a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <HAL_RCC_OscConfig+0x478>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe f892 	bl	8001924 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe f88e 	bl	8001924 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e087      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	491b      	ldr	r1, [pc, #108]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x478>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe f867 	bl	8001924 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe f863 	bl	8001924 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e05c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x416>
 8003878:	e054      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe f850 	bl	8001924 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe f84c 	bl	8001924 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e045      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x444>
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e038      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d121      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0cc      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b68      	ldr	r3, [pc, #416]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d90c      	bls.n	8003970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b65      	ldr	r3, [pc, #404]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a58      	ldr	r2, [pc, #352]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a52      	ldr	r2, [pc, #328]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d044      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b3f      	ldr	r3, [pc, #252]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3b      	ldr	r3, [pc, #236]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e067      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b37      	ldr	r3, [pc, #220]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4934      	ldr	r1, [pc, #208]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a24:	f7fd ff7e 	bl	8001924 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fd ff7a 	bl	8001924 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2b      	ldr	r3, [pc, #172]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b25      	ldr	r3, [pc, #148]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d20c      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	@ (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fede 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08005bc0 	.word	0x08005bc0
 8003af8:	20000004 	.word	0x20000004
 8003afc:	20000008 	.word	0x20000008

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b090      	sub	sp, #64	@ 0x40
 8003b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b10:	2300      	movs	r3, #0
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b18:	4b59      	ldr	r3, [pc, #356]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x40>
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	f200 80a1 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b32:	e09b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b53      	ldr	r3, [pc, #332]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b36:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003b38:	e09b      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3a:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b3e:	e098      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b4f      	ldr	r3, [pc, #316]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b4a      	ldr	r3, [pc, #296]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b6c:	fb03 f201 	mul.w	r2, r3, r1
 8003b70:	2300      	movs	r3, #0
 8003b72:	fb00 f303 	mul.w	r3, r0, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4a43      	ldr	r2, [pc, #268]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b80:	460a      	mov	r2, r1
 8003b82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b86:	4413      	add	r3, r2
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b9a:	f7fc fb69 	bl	8000270 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba6:	e053      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4b35      	ldr	r3, [pc, #212]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	617a      	str	r2, [r7, #20]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bba:	f04f 0b00 	mov.w	fp, #0
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	465b      	mov	r3, fp
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	0159      	lsls	r1, r3, #5
 8003bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd0:	0150      	lsls	r0, r2, #5
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bda:	eb63 090b 	sbc.w	r9, r3, fp
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	00eb      	lsls	r3, r5, #3
 8003c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c08:	00e2      	lsls	r2, r4, #3
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	eb14 030a 	adds.w	r3, r4, sl
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	eb45 030b 	adc.w	r3, r5, fp
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c26:	4629      	mov	r1, r5
 8003c28:	028b      	lsls	r3, r1, #10
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c30:	4621      	mov	r1, r4
 8003c32:	028a      	lsls	r2, r1, #10
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c44:	f7fc fb14 	bl	8000270 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3740      	adds	r7, #64	@ 0x40
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	017d7840 	.word	0x017d7840

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	08005bd0 	.word	0x08005bd0

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	f7ff ffdc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	@ (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	08005bd0 	.word	0x08005bd0

08003cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e041      	b.n	8003d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fc86 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f000 f9ce 	bl	80040d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e04e      	b.n	8003e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	e007      	b.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40001800 	.word	0x40001800

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8ee 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8e0 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8f1 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8c4 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8b6 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8c7 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f89a 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f88c 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f89d 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f870 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f862 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f873 	bl	80040ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd f8ce 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f97e 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b40      	cmp	r3, #64	@ 0x40
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f838 	bl	80040c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f948 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a40      	ldr	r2, [pc, #256]	@ (80041e8 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3d      	ldr	r2, [pc, #244]	@ (80041ec <TIM_Base_SetConfig+0x118>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3c      	ldr	r2, [pc, #240]	@ (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3b      	ldr	r2, [pc, #236]	@ (80041f4 <TIM_Base_SetConfig+0x120>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3a      	ldr	r2, [pc, #232]	@ (80041f8 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2f      	ldr	r2, [pc, #188]	@ (80041e8 <TIM_Base_SetConfig+0x114>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004134:	d027      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <TIM_Base_SetConfig+0x118>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d023      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <TIM_Base_SetConfig+0x11c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2a      	ldr	r2, [pc, #168]	@ (80041f4 <TIM_Base_SetConfig+0x120>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a29      	ldr	r2, [pc, #164]	@ (80041f8 <TIM_Base_SetConfig+0x124>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a28      	ldr	r2, [pc, #160]	@ (80041fc <TIM_Base_SetConfig+0x128>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <TIM_Base_SetConfig+0x12c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a26      	ldr	r2, [pc, #152]	@ (8004204 <TIM_Base_SetConfig+0x130>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a25      	ldr	r2, [pc, #148]	@ (8004208 <TIM_Base_SetConfig+0x134>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a24      	ldr	r2, [pc, #144]	@ (800420c <TIM_Base_SetConfig+0x138>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a23      	ldr	r2, [pc, #140]	@ (8004210 <TIM_Base_SetConfig+0x13c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	40001800 	.word	0x40001800
 800420c:	40001c00 	.word	0x40001c00
 8004210:	40002000 	.word	0x40002000

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e05a      	b.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a21      	ldr	r2, [pc, #132]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004278:	d01d      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1a      	ldr	r2, [pc, #104]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10c      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40010400 	.word	0x40010400
 8004304:	40014000 	.word	0x40014000
 8004308:	40001800 	.word	0x40001800

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e03f      	b.n	80043c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd f9ce 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	@ 0x24
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa13 	bl	80047a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800438c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	@ 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d165      	bne.n	80044b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_Transmit_DMA+0x26>
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e05e      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit_DMA+0x38>
 8004404:	2302      	movs	r3, #2
 8004406:	e057      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xe8>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2221      	movs	r2, #33	@ 0x21
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	4a22      	ldr	r2, [pc, #136]	@ (80044c0 <HAL_UART_Transmit_DMA+0xf0>)
 8004436:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	4a21      	ldr	r2, [pc, #132]	@ (80044c4 <HAL_UART_Transmit_DMA+0xf4>)
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	4a20      	ldr	r2, [pc, #128]	@ (80044c8 <HAL_UART_Transmit_DMA+0xf8>)
 8004446:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	2200      	movs	r2, #0
 800444e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800445a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3304      	adds	r3, #4
 8004464:	461a      	mov	r2, r3
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	f7fe fb42 	bl	8002af0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004474:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800449e:	627a      	str	r2, [r7, #36]	@ 0x24
 80044a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6a39      	ldr	r1, [r7, #32]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e5      	bne.n	800447e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3730      	adds	r7, #48	@ 0x30
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08004545 	.word	0x08004545
 80044c4:	080045df 	.word	0x080045df
 80044c8:	080045fb 	.word	0x080045fb

080044cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004528:	b2db      	uxtb	r3, r3
 800452a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	b2db      	uxtb	r3, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b090      	sub	sp, #64	@ 0x40
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d137      	bne.n	80045d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004562:	2200      	movs	r2, #0
 8004564:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	623b      	str	r3, [r7, #32]
   return(result);
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800457c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800457e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004586:	633a      	str	r2, [r7, #48]	@ 0x30
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800458c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e5      	bne.n	8004566 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800459a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ba:	61fa      	str	r2, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	617b      	str	r3, [r7, #20]
   return(result);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e5      	bne.n	800459a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ce:	e002      	b.n	80045d6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045d2:	f7ff ff7b 	bl	80044cc <HAL_UART_TxCpltCallback>
}
 80045d6:	bf00      	nop
 80045d8:	3740      	adds	r7, #64	@ 0x40
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff ff77 	bl	80044e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b21      	cmp	r3, #33	@ 0x21
 800462c:	d108      	bne.n	8004640 <UART_DMAError+0x46>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800463a:	68b8      	ldr	r0, [r7, #8]
 800463c:	f000 f827 	bl	800468e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b22      	cmp	r3, #34	@ 0x22
 8004660:	d108      	bne.n	8004674 <UART_DMAError+0x7a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	f000 f835 	bl	80046de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f043 0210 	orr.w	r2, r3, #16
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f7ff ff37 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b089      	sub	sp, #36	@ 0x24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	61ba      	str	r2, [r7, #24]
 80046b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6979      	ldr	r1, [r7, #20]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	613b      	str	r3, [r7, #16]
   return(result);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80046d2:	bf00      	nop
 80046d4:	3724      	adds	r7, #36	@ 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046de:	b480      	push	{r7}
 80046e0:	b095      	sub	sp, #84	@ 0x54
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004706:	643a      	str	r2, [r7, #64]	@ 0x40
 8004708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800470c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	61fb      	str	r3, [r7, #28]
   return(result);
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800473a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	2b01      	cmp	r3, #1
 8004754:	d119      	bne.n	800478a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	60bb      	str	r3, [r7, #8]
   return(result);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f023 0310 	bic.w	r3, r3, #16
 800476c:	647b      	str	r3, [r7, #68]	@ 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004776:	61ba      	str	r2, [r7, #24]
 8004778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	613b      	str	r3, [r7, #16]
   return(result);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004798:	bf00      	nop
 800479a:	3754      	adds	r7, #84	@ 0x54
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b0c0      	sub	sp, #256	@ 0x100
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	68d9      	ldr	r1, [r3, #12]
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	ea40 0301 	orr.w	r3, r0, r1
 80047cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	431a      	orrs	r2, r3
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047fc:	f021 010c 	bic.w	r1, r1, #12
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800480a:	430b      	orrs	r3, r1
 800480c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481e:	6999      	ldr	r1, [r3, #24]
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	ea40 0301 	orr.w	r3, r0, r1
 800482a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b8f      	ldr	r3, [pc, #572]	@ (8004a70 <UART_SetConfig+0x2cc>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d005      	beq.n	8004844 <UART_SetConfig+0xa0>
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a74 <UART_SetConfig+0x2d0>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d104      	bne.n	800484e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7ff fa42 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8004848:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800484c:	e003      	b.n	8004856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7ff fa29 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8004852:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004860:	f040 810c 	bne.w	8004a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800486e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	1891      	adds	r1, r2, r2
 800487c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800487e:	415b      	adcs	r3, r3
 8004880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004886:	4621      	mov	r1, r4
 8004888:	eb12 0801 	adds.w	r8, r2, r1
 800488c:	4629      	mov	r1, r5
 800488e:	eb43 0901 	adc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048b4:	462b      	mov	r3, r5
 80048b6:	eb49 0303 	adc.w	r3, r9, r3
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048d2:	460b      	mov	r3, r1
 80048d4:	18db      	adds	r3, r3, r3
 80048d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d8:	4613      	mov	r3, r2
 80048da:	eb42 0303 	adc.w	r3, r2, r3
 80048de:	657b      	str	r3, [r7, #84]	@ 0x54
 80048e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048e8:	f7fb fcc2 	bl	8000270 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4b61      	ldr	r3, [pc, #388]	@ (8004a78 <UART_SetConfig+0x2d4>)
 80048f2:	fba3 2302 	umull	r2, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	011c      	lsls	r4, r3, #4
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004904:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	1891      	adds	r1, r2, r2
 8004912:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004914:	415b      	adcs	r3, r3
 8004916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800491c:	4641      	mov	r1, r8
 800491e:	eb12 0a01 	adds.w	sl, r2, r1
 8004922:	4649      	mov	r1, r9
 8004924:	eb43 0b01 	adc.w	fp, r3, r1
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493c:	4692      	mov	sl, r2
 800493e:	469b      	mov	fp, r3
 8004940:	4643      	mov	r3, r8
 8004942:	eb1a 0303 	adds.w	r3, sl, r3
 8004946:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800494a:	464b      	mov	r3, r9
 800494c:	eb4b 0303 	adc.w	r3, fp, r3
 8004950:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004960:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004968:	460b      	mov	r3, r1
 800496a:	18db      	adds	r3, r3, r3
 800496c:	643b      	str	r3, [r7, #64]	@ 0x40
 800496e:	4613      	mov	r3, r2
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
 8004976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800497a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800497e:	f7fb fc77 	bl	8000270 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4611      	mov	r1, r2
 8004988:	4b3b      	ldr	r3, [pc, #236]	@ (8004a78 <UART_SetConfig+0x2d4>)
 800498a:	fba3 2301 	umull	r2, r3, r3, r1
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2264      	movs	r2, #100	@ 0x64
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	1acb      	subs	r3, r1, r3
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800499e:	4b36      	ldr	r3, [pc, #216]	@ (8004a78 <UART_SetConfig+0x2d4>)
 80049a0:	fba3 2302 	umull	r2, r3, r3, r2
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049ac:	441c      	add	r4, r3
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049c8:	415b      	adcs	r3, r3
 80049ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049d0:	4641      	mov	r1, r8
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80049d6:	4649      	mov	r1, r9
 80049d8:	414b      	adcs	r3, r1
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049e8:	4659      	mov	r1, fp
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4651      	mov	r1, sl
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a04:	464b      	mov	r3, r9
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a24:	460b      	mov	r3, r1
 8004a26:	18db      	adds	r3, r3, r3
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	eb42 0303 	adc.w	r3, r2, r3
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a3a:	f7fb fc19 	bl	8000270 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <UART_SetConfig+0x2d4>)
 8004a44:	fba3 1302 	umull	r1, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2164      	movs	r1, #100	@ 0x64
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3332      	adds	r3, #50	@ 0x32
 8004a56:	4a08      	ldr	r2, [pc, #32]	@ (8004a78 <UART_SetConfig+0x2d4>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 0207 	and.w	r2, r3, #7
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4422      	add	r2, r4
 8004a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a6c:	e106      	b.n	8004c7c <UART_SetConfig+0x4d8>
 8004a6e:	bf00      	nop
 8004a70:	40011000 	.word	0x40011000
 8004a74:	40011400 	.word	0x40011400
 8004a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a8e:	4642      	mov	r2, r8
 8004a90:	464b      	mov	r3, r9
 8004a92:	1891      	adds	r1, r2, r2
 8004a94:	6239      	str	r1, [r7, #32]
 8004a96:	415b      	adcs	r3, r3
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	1854      	adds	r4, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0501 	adc.w	r5, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	00eb      	lsls	r3, r5, #3
 8004ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab6:	00e2      	lsls	r2, r4, #3
 8004ab8:	4614      	mov	r4, r2
 8004aba:	461d      	mov	r5, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	18e3      	adds	r3, r4, r3
 8004ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	eb45 0303 	adc.w	r3, r5, r3
 8004aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aea:	4629      	mov	r1, r5
 8004aec:	008b      	lsls	r3, r1, #2
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af4:	4621      	mov	r1, r4
 8004af6:	008a      	lsls	r2, r1, #2
 8004af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004afc:	f7fb fbb8 	bl	8000270 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4b60      	ldr	r3, [pc, #384]	@ (8004c88 <UART_SetConfig+0x4e4>)
 8004b06:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	011c      	lsls	r4, r3, #4
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	61b9      	str	r1, [r7, #24]
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b30:	4641      	mov	r1, r8
 8004b32:	1851      	adds	r1, r2, r1
 8004b34:	6139      	str	r1, [r7, #16]
 8004b36:	4649      	mov	r1, r9
 8004b38:	414b      	adcs	r3, r1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	00cb      	lsls	r3, r1, #3
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b52:	4651      	mov	r1, sl
 8004b54:	00ca      	lsls	r2, r1, #3
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b64:	464b      	mov	r3, r9
 8004b66:	460a      	mov	r2, r1
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b88:	4649      	mov	r1, r9
 8004b8a:	008b      	lsls	r3, r1, #2
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b92:	4641      	mov	r1, r8
 8004b94:	008a      	lsls	r2, r1, #2
 8004b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b9a:	f7fb fb69 	bl	8000270 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2264      	movs	r2, #100	@ 0x64
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	1acb      	subs	r3, r1, r3
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	3332      	adds	r3, #50	@ 0x32
 8004bb8:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <UART_SetConfig+0x4e4>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc4:	441c      	add	r4, r3
 8004bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bca:	2200      	movs	r2, #0
 8004bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bce:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be4:	4641      	mov	r1, r8
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	4649      	mov	r1, r9
 8004bec:	414b      	adcs	r3, r1
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	00cb      	lsls	r3, r1, #3
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c06:	4651      	mov	r1, sl
 8004c08:	00ca      	lsls	r2, r1, #3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4642      	mov	r2, r8
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c16:	464b      	mov	r3, r9
 8004c18:	460a      	mov	r2, r1
 8004c1a:	eb42 0303 	adc.w	r3, r2, r3
 8004c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c38:	4649      	mov	r1, r9
 8004c3a:	008b      	lsls	r3, r1, #2
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c42:	4641      	mov	r1, r8
 8004c44:	008a      	lsls	r2, r1, #2
 8004c46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c4a:	f7fb fb11 	bl	8000270 <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <UART_SetConfig+0x4e4>)
 8004c54:	fba3 1302 	umull	r1, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	2164      	movs	r1, #100	@ 0x64
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	3332      	adds	r3, #50	@ 0x32
 8004c66:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <UART_SetConfig+0x4e4>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	f003 020f 	and.w	r2, r3, #15
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4422      	add	r2, r4
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c82:	46bd      	mov	sp, r7
 8004c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c88:	51eb851f 	.word	0x51eb851f

08004c8c <std>:
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	e9c0 3300 	strd	r3, r3, [r0]
 8004c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c9a:	6083      	str	r3, [r0, #8]
 8004c9c:	8181      	strh	r1, [r0, #12]
 8004c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ca0:	81c2      	strh	r2, [r0, #14]
 8004ca2:	6183      	str	r3, [r0, #24]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	305c      	adds	r0, #92	@ 0x5c
 8004caa:	f000 f906 	bl	8004eba <memset>
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <std+0x58>)
 8004cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <std+0x5c>)
 8004cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <std+0x60>)
 8004cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <std+0x64>)
 8004cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <std+0x68>)
 8004cc0:	6224      	str	r4, [r4, #32]
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d006      	beq.n	8004cd4 <std+0x48>
 8004cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cca:	4294      	cmp	r4, r2
 8004ccc:	d002      	beq.n	8004cd4 <std+0x48>
 8004cce:	33d0      	adds	r3, #208	@ 0xd0
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d105      	bne.n	8004ce0 <std+0x54>
 8004cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cdc:	f000 b966 	b.w	8004fac <__retarget_lock_init_recursive>
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	bf00      	nop
 8004ce4:	08004e35 	.word	0x08004e35
 8004ce8:	08004e57 	.word	0x08004e57
 8004cec:	08004e8f 	.word	0x08004e8f
 8004cf0:	08004eb3 	.word	0x08004eb3
 8004cf4:	200002ec 	.word	0x200002ec

08004cf8 <stdio_exit_handler>:
 8004cf8:	4a02      	ldr	r2, [pc, #8]	@ (8004d04 <stdio_exit_handler+0xc>)
 8004cfa:	4903      	ldr	r1, [pc, #12]	@ (8004d08 <stdio_exit_handler+0x10>)
 8004cfc:	4803      	ldr	r0, [pc, #12]	@ (8004d0c <stdio_exit_handler+0x14>)
 8004cfe:	f000 b869 	b.w	8004dd4 <_fwalk_sglue>
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010
 8004d08:	0800584d 	.word	0x0800584d
 8004d0c:	20000020 	.word	0x20000020

08004d10 <cleanup_stdio>:
 8004d10:	6841      	ldr	r1, [r0, #4]
 8004d12:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <cleanup_stdio+0x34>)
 8004d14:	4299      	cmp	r1, r3
 8004d16:	b510      	push	{r4, lr}
 8004d18:	4604      	mov	r4, r0
 8004d1a:	d001      	beq.n	8004d20 <cleanup_stdio+0x10>
 8004d1c:	f000 fd96 	bl	800584c <_fflush_r>
 8004d20:	68a1      	ldr	r1, [r4, #8]
 8004d22:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <cleanup_stdio+0x38>)
 8004d24:	4299      	cmp	r1, r3
 8004d26:	d002      	beq.n	8004d2e <cleanup_stdio+0x1e>
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fd8f 	bl	800584c <_fflush_r>
 8004d2e:	68e1      	ldr	r1, [r4, #12]
 8004d30:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <cleanup_stdio+0x3c>)
 8004d32:	4299      	cmp	r1, r3
 8004d34:	d004      	beq.n	8004d40 <cleanup_stdio+0x30>
 8004d36:	4620      	mov	r0, r4
 8004d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3c:	f000 bd86 	b.w	800584c <_fflush_r>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	bf00      	nop
 8004d44:	200002ec 	.word	0x200002ec
 8004d48:	20000354 	.word	0x20000354
 8004d4c:	200003bc 	.word	0x200003bc

08004d50 <global_stdio_init.part.0>:
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <global_stdio_init.part.0+0x30>)
 8004d54:	4c0b      	ldr	r4, [pc, #44]	@ (8004d84 <global_stdio_init.part.0+0x34>)
 8004d56:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <global_stdio_init.part.0+0x38>)
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2104      	movs	r1, #4
 8004d60:	f7ff ff94 	bl	8004c8c <std>
 8004d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2109      	movs	r1, #9
 8004d6c:	f7ff ff8e 	bl	8004c8c <std>
 8004d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d74:	2202      	movs	r2, #2
 8004d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7a:	2112      	movs	r1, #18
 8004d7c:	f7ff bf86 	b.w	8004c8c <std>
 8004d80:	20000424 	.word	0x20000424
 8004d84:	200002ec 	.word	0x200002ec
 8004d88:	08004cf9 	.word	0x08004cf9

08004d8c <__sfp_lock_acquire>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	@ (8004d94 <__sfp_lock_acquire+0x8>)
 8004d8e:	f000 b90e 	b.w	8004fae <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	2000042d 	.word	0x2000042d

08004d98 <__sfp_lock_release>:
 8004d98:	4801      	ldr	r0, [pc, #4]	@ (8004da0 <__sfp_lock_release+0x8>)
 8004d9a:	f000 b909 	b.w	8004fb0 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	2000042d 	.word	0x2000042d

08004da4 <__sinit>:
 8004da4:	b510      	push	{r4, lr}
 8004da6:	4604      	mov	r4, r0
 8004da8:	f7ff fff0 	bl	8004d8c <__sfp_lock_acquire>
 8004dac:	6a23      	ldr	r3, [r4, #32]
 8004dae:	b11b      	cbz	r3, 8004db8 <__sinit+0x14>
 8004db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db4:	f7ff bff0 	b.w	8004d98 <__sfp_lock_release>
 8004db8:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <__sinit+0x28>)
 8004dba:	6223      	str	r3, [r4, #32]
 8004dbc:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <__sinit+0x2c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f5      	bne.n	8004db0 <__sinit+0xc>
 8004dc4:	f7ff ffc4 	bl	8004d50 <global_stdio_init.part.0>
 8004dc8:	e7f2      	b.n	8004db0 <__sinit+0xc>
 8004dca:	bf00      	nop
 8004dcc:	08004d11 	.word	0x08004d11
 8004dd0:	20000424 	.word	0x20000424

08004dd4 <_fwalk_sglue>:
 8004dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	4607      	mov	r7, r0
 8004dda:	4688      	mov	r8, r1
 8004ddc:	4614      	mov	r4, r2
 8004dde:	2600      	movs	r6, #0
 8004de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de4:	f1b9 0901 	subs.w	r9, r9, #1
 8004de8:	d505      	bpl.n	8004df6 <_fwalk_sglue+0x22>
 8004dea:	6824      	ldr	r4, [r4, #0]
 8004dec:	2c00      	cmp	r4, #0
 8004dee:	d1f7      	bne.n	8004de0 <_fwalk_sglue+0xc>
 8004df0:	4630      	mov	r0, r6
 8004df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df6:	89ab      	ldrh	r3, [r5, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d907      	bls.n	8004e0c <_fwalk_sglue+0x38>
 8004dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e00:	3301      	adds	r3, #1
 8004e02:	d003      	beq.n	8004e0c <_fwalk_sglue+0x38>
 8004e04:	4629      	mov	r1, r5
 8004e06:	4638      	mov	r0, r7
 8004e08:	47c0      	blx	r8
 8004e0a:	4306      	orrs	r6, r0
 8004e0c:	3568      	adds	r5, #104	@ 0x68
 8004e0e:	e7e9      	b.n	8004de4 <_fwalk_sglue+0x10>

08004e10 <iprintf>:
 8004e10:	b40f      	push	{r0, r1, r2, r3}
 8004e12:	b507      	push	{r0, r1, r2, lr}
 8004e14:	4906      	ldr	r1, [pc, #24]	@ (8004e30 <iprintf+0x20>)
 8004e16:	ab04      	add	r3, sp, #16
 8004e18:	6808      	ldr	r0, [r1, #0]
 8004e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1e:	6881      	ldr	r1, [r0, #8]
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	f000 f9e9 	bl	80051f8 <_vfiprintf_r>
 8004e26:	b003      	add	sp, #12
 8004e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr
 8004e30:	2000001c 	.word	0x2000001c

08004e34 <__sread>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	460c      	mov	r4, r1
 8004e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3c:	f000 f868 	bl	8004f10 <_read_r>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	bfab      	itete	ge
 8004e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e46:	89a3      	ldrhlt	r3, [r4, #12]
 8004e48:	181b      	addge	r3, r3, r0
 8004e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e4e:	bfac      	ite	ge
 8004e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e52:	81a3      	strhlt	r3, [r4, #12]
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <__swrite>:
 8004e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	461f      	mov	r7, r3
 8004e5c:	898b      	ldrh	r3, [r1, #12]
 8004e5e:	05db      	lsls	r3, r3, #23
 8004e60:	4605      	mov	r5, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4616      	mov	r6, r2
 8004e66:	d505      	bpl.n	8004e74 <__swrite+0x1e>
 8004e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f000 f83c 	bl	8004eec <_lseek_r>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	4632      	mov	r2, r6
 8004e82:	463b      	mov	r3, r7
 8004e84:	4628      	mov	r0, r5
 8004e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8a:	f000 b853 	b.w	8004f34 <_write_r>

08004e8e <__sseek>:
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 f829 	bl	8004eec <_lseek_r>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	bf15      	itete	ne
 8004ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004eaa:	81a3      	strheq	r3, [r4, #12]
 8004eac:	bf18      	it	ne
 8004eae:	81a3      	strhne	r3, [r4, #12]
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <__sclose>:
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 b809 	b.w	8004ecc <_close_r>

08004eba <memset>:
 8004eba:	4402      	add	r2, r0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d100      	bne.n	8004ec4 <memset+0xa>
 8004ec2:	4770      	bx	lr
 8004ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec8:	e7f9      	b.n	8004ebe <memset+0x4>
	...

08004ecc <_close_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d06      	ldr	r5, [pc, #24]	@ (8004ee8 <_close_r+0x1c>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	f7fc fabf 	bl	800145a <_close>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_close_r+0x1a>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_close_r+0x1a>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000428 	.word	0x20000428

08004eec <_lseek_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	@ (8004f0c <_lseek_r+0x20>)
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	602a      	str	r2, [r5, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7fc fad4 	bl	80014a8 <_lseek>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_lseek_r+0x1e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_lseek_r+0x1e>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000428 	.word	0x20000428

08004f10 <_read_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d07      	ldr	r5, [pc, #28]	@ (8004f30 <_read_r+0x20>)
 8004f14:	4604      	mov	r4, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	602a      	str	r2, [r5, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fc fa62 	bl	80013e8 <_read>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_read_r+0x1e>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_read_r+0x1e>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000428 	.word	0x20000428

08004f34 <_write_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	@ (8004f54 <_write_r+0x20>)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc fa6d 	bl	8001422 <_write>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_write_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_write_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000428 	.word	0x20000428

08004f58 <__errno>:
 8004f58:	4b01      	ldr	r3, [pc, #4]	@ (8004f60 <__errno+0x8>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	2000001c 	.word	0x2000001c

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	@ (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	@ (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f000 fdb8 	bl	8005aec <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	08005c1c 	.word	0x08005c1c
 8004fa0:	08005c1c 	.word	0x08005c1c
 8004fa4:	08005c1c 	.word	0x08005c1c
 8004fa8:	08005c20 	.word	0x08005c20

08004fac <__retarget_lock_init_recursive>:
 8004fac:	4770      	bx	lr

08004fae <__retarget_lock_acquire_recursive>:
 8004fae:	4770      	bx	lr

08004fb0 <__retarget_lock_release_recursive>:
 8004fb0:	4770      	bx	lr
	...

08004fb4 <_free_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d041      	beq.n	8005040 <_free_r+0x8c>
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f0c      	subs	r4, r1, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfb8      	it	lt
 8004fc6:	18e4      	addlt	r4, r4, r3
 8004fc8:	f000 f8e0 	bl	800518c <__malloc_lock>
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <_free_r+0x90>)
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	b933      	cbnz	r3, 8004fe0 <_free_r+0x2c>
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6014      	str	r4, [r2, #0]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fdc:	f000 b8dc 	b.w	8005198 <__malloc_unlock>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d908      	bls.n	8004ff6 <_free_r+0x42>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	1821      	adds	r1, r4, r0
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf01      	itttt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	1809      	addeq	r1, r1, r0
 8004ff2:	6021      	streq	r1, [r4, #0]
 8004ff4:	e7ed      	b.n	8004fd2 <_free_r+0x1e>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b10b      	cbz	r3, 8005000 <_free_r+0x4c>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d9fa      	bls.n	8004ff6 <_free_r+0x42>
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	1850      	adds	r0, r2, r1
 8005004:	42a0      	cmp	r0, r4
 8005006:	d10b      	bne.n	8005020 <_free_r+0x6c>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	4401      	add	r1, r0
 800500c:	1850      	adds	r0, r2, r1
 800500e:	4283      	cmp	r3, r0
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	d1e0      	bne.n	8004fd6 <_free_r+0x22>
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6053      	str	r3, [r2, #4]
 800501a:	4408      	add	r0, r1
 800501c:	6010      	str	r0, [r2, #0]
 800501e:	e7da      	b.n	8004fd6 <_free_r+0x22>
 8005020:	d902      	bls.n	8005028 <_free_r+0x74>
 8005022:	230c      	movs	r3, #12
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	e7d6      	b.n	8004fd6 <_free_r+0x22>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	1821      	adds	r1, r4, r0
 800502c:	428b      	cmp	r3, r1
 800502e:	bf04      	itt	eq
 8005030:	6819      	ldreq	r1, [r3, #0]
 8005032:	685b      	ldreq	r3, [r3, #4]
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	bf04      	itt	eq
 8005038:	1809      	addeq	r1, r1, r0
 800503a:	6021      	streq	r1, [r4, #0]
 800503c:	6054      	str	r4, [r2, #4]
 800503e:	e7ca      	b.n	8004fd6 <_free_r+0x22>
 8005040:	bd38      	pop	{r3, r4, r5, pc}
 8005042:	bf00      	nop
 8005044:	20000434 	.word	0x20000434

08005048 <sbrk_aligned>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4e0f      	ldr	r6, [pc, #60]	@ (8005088 <sbrk_aligned+0x40>)
 800504c:	460c      	mov	r4, r1
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	4605      	mov	r5, r0
 8005052:	b911      	cbnz	r1, 800505a <sbrk_aligned+0x12>
 8005054:	f000 fcb6 	bl	80059c4 <_sbrk_r>
 8005058:	6030      	str	r0, [r6, #0]
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 fcb1 	bl	80059c4 <_sbrk_r>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	d103      	bne.n	800506e <sbrk_aligned+0x26>
 8005066:	f04f 34ff 	mov.w	r4, #4294967295
 800506a:	4620      	mov	r0, r4
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	1cc4      	adds	r4, r0, #3
 8005070:	f024 0403 	bic.w	r4, r4, #3
 8005074:	42a0      	cmp	r0, r4
 8005076:	d0f8      	beq.n	800506a <sbrk_aligned+0x22>
 8005078:	1a21      	subs	r1, r4, r0
 800507a:	4628      	mov	r0, r5
 800507c:	f000 fca2 	bl	80059c4 <_sbrk_r>
 8005080:	3001      	adds	r0, #1
 8005082:	d1f2      	bne.n	800506a <sbrk_aligned+0x22>
 8005084:	e7ef      	b.n	8005066 <sbrk_aligned+0x1e>
 8005086:	bf00      	nop
 8005088:	20000430 	.word	0x20000430

0800508c <_malloc_r>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	1ccd      	adds	r5, r1, #3
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	2d00      	cmp	r5, #0
 80050a0:	4606      	mov	r6, r0
 80050a2:	db01      	blt.n	80050a8 <_malloc_r+0x1c>
 80050a4:	42a9      	cmp	r1, r5
 80050a6:	d904      	bls.n	80050b2 <_malloc_r+0x26>
 80050a8:	230c      	movs	r3, #12
 80050aa:	6033      	str	r3, [r6, #0]
 80050ac:	2000      	movs	r0, #0
 80050ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005188 <_malloc_r+0xfc>
 80050b6:	f000 f869 	bl	800518c <__malloc_lock>
 80050ba:	f8d8 3000 	ldr.w	r3, [r8]
 80050be:	461c      	mov	r4, r3
 80050c0:	bb44      	cbnz	r4, 8005114 <_malloc_r+0x88>
 80050c2:	4629      	mov	r1, r5
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff ffbf 	bl	8005048 <sbrk_aligned>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	4604      	mov	r4, r0
 80050ce:	d158      	bne.n	8005182 <_malloc_r+0xf6>
 80050d0:	f8d8 4000 	ldr.w	r4, [r8]
 80050d4:	4627      	mov	r7, r4
 80050d6:	2f00      	cmp	r7, #0
 80050d8:	d143      	bne.n	8005162 <_malloc_r+0xd6>
 80050da:	2c00      	cmp	r4, #0
 80050dc:	d04b      	beq.n	8005176 <_malloc_r+0xea>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4639      	mov	r1, r7
 80050e2:	4630      	mov	r0, r6
 80050e4:	eb04 0903 	add.w	r9, r4, r3
 80050e8:	f000 fc6c 	bl	80059c4 <_sbrk_r>
 80050ec:	4581      	cmp	r9, r0
 80050ee:	d142      	bne.n	8005176 <_malloc_r+0xea>
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	1a6d      	subs	r5, r5, r1
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff ffa6 	bl	8005048 <sbrk_aligned>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d03a      	beq.n	8005176 <_malloc_r+0xea>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	442b      	add	r3, r5
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	f8d8 3000 	ldr.w	r3, [r8]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	bb62      	cbnz	r2, 8005168 <_malloc_r+0xdc>
 800510e:	f8c8 7000 	str.w	r7, [r8]
 8005112:	e00f      	b.n	8005134 <_malloc_r+0xa8>
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	1b52      	subs	r2, r2, r5
 8005118:	d420      	bmi.n	800515c <_malloc_r+0xd0>
 800511a:	2a0b      	cmp	r2, #11
 800511c:	d917      	bls.n	800514e <_malloc_r+0xc2>
 800511e:	1961      	adds	r1, r4, r5
 8005120:	42a3      	cmp	r3, r4
 8005122:	6025      	str	r5, [r4, #0]
 8005124:	bf18      	it	ne
 8005126:	6059      	strne	r1, [r3, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	bf08      	it	eq
 800512c:	f8c8 1000 	streq.w	r1, [r8]
 8005130:	5162      	str	r2, [r4, r5]
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	4630      	mov	r0, r6
 8005136:	f000 f82f 	bl	8005198 <__malloc_unlock>
 800513a:	f104 000b 	add.w	r0, r4, #11
 800513e:	1d23      	adds	r3, r4, #4
 8005140:	f020 0007 	bic.w	r0, r0, #7
 8005144:	1ac2      	subs	r2, r0, r3
 8005146:	bf1c      	itt	ne
 8005148:	1a1b      	subne	r3, r3, r0
 800514a:	50a3      	strne	r3, [r4, r2]
 800514c:	e7af      	b.n	80050ae <_malloc_r+0x22>
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	42a3      	cmp	r3, r4
 8005152:	bf0c      	ite	eq
 8005154:	f8c8 2000 	streq.w	r2, [r8]
 8005158:	605a      	strne	r2, [r3, #4]
 800515a:	e7eb      	b.n	8005134 <_malloc_r+0xa8>
 800515c:	4623      	mov	r3, r4
 800515e:	6864      	ldr	r4, [r4, #4]
 8005160:	e7ae      	b.n	80050c0 <_malloc_r+0x34>
 8005162:	463c      	mov	r4, r7
 8005164:	687f      	ldr	r7, [r7, #4]
 8005166:	e7b6      	b.n	80050d6 <_malloc_r+0x4a>
 8005168:	461a      	mov	r2, r3
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	42a3      	cmp	r3, r4
 800516e:	d1fb      	bne.n	8005168 <_malloc_r+0xdc>
 8005170:	2300      	movs	r3, #0
 8005172:	6053      	str	r3, [r2, #4]
 8005174:	e7de      	b.n	8005134 <_malloc_r+0xa8>
 8005176:	230c      	movs	r3, #12
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	4630      	mov	r0, r6
 800517c:	f000 f80c 	bl	8005198 <__malloc_unlock>
 8005180:	e794      	b.n	80050ac <_malloc_r+0x20>
 8005182:	6005      	str	r5, [r0, #0]
 8005184:	e7d6      	b.n	8005134 <_malloc_r+0xa8>
 8005186:	bf00      	nop
 8005188:	20000434 	.word	0x20000434

0800518c <__malloc_lock>:
 800518c:	4801      	ldr	r0, [pc, #4]	@ (8005194 <__malloc_lock+0x8>)
 800518e:	f7ff bf0e 	b.w	8004fae <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	2000042c 	.word	0x2000042c

08005198 <__malloc_unlock>:
 8005198:	4801      	ldr	r0, [pc, #4]	@ (80051a0 <__malloc_unlock+0x8>)
 800519a:	f7ff bf09 	b.w	8004fb0 <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	2000042c 	.word	0x2000042c

080051a4 <__sfputc_r>:
 80051a4:	6893      	ldr	r3, [r2, #8]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	b410      	push	{r4}
 80051ac:	6093      	str	r3, [r2, #8]
 80051ae:	da08      	bge.n	80051c2 <__sfputc_r+0x1e>
 80051b0:	6994      	ldr	r4, [r2, #24]
 80051b2:	42a3      	cmp	r3, r4
 80051b4:	db01      	blt.n	80051ba <__sfputc_r+0x16>
 80051b6:	290a      	cmp	r1, #10
 80051b8:	d103      	bne.n	80051c2 <__sfputc_r+0x1e>
 80051ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051be:	f000 bb6d 	b.w	800589c <__swbuf_r>
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	1c58      	adds	r0, r3, #1
 80051c6:	6010      	str	r0, [r2, #0]
 80051c8:	7019      	strb	r1, [r3, #0]
 80051ca:	4608      	mov	r0, r1
 80051cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <__sfputs_r>:
 80051d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d4:	4606      	mov	r6, r0
 80051d6:	460f      	mov	r7, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	18d5      	adds	r5, r2, r3
 80051dc:	42ac      	cmp	r4, r5
 80051de:	d101      	bne.n	80051e4 <__sfputs_r+0x12>
 80051e0:	2000      	movs	r0, #0
 80051e2:	e007      	b.n	80051f4 <__sfputs_r+0x22>
 80051e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e8:	463a      	mov	r2, r7
 80051ea:	4630      	mov	r0, r6
 80051ec:	f7ff ffda 	bl	80051a4 <__sfputc_r>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d1f3      	bne.n	80051dc <__sfputs_r+0xa>
 80051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051f8 <_vfiprintf_r>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	460d      	mov	r5, r1
 80051fe:	b09d      	sub	sp, #116	@ 0x74
 8005200:	4614      	mov	r4, r2
 8005202:	4698      	mov	r8, r3
 8005204:	4606      	mov	r6, r0
 8005206:	b118      	cbz	r0, 8005210 <_vfiprintf_r+0x18>
 8005208:	6a03      	ldr	r3, [r0, #32]
 800520a:	b90b      	cbnz	r3, 8005210 <_vfiprintf_r+0x18>
 800520c:	f7ff fdca 	bl	8004da4 <__sinit>
 8005210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005212:	07d9      	lsls	r1, r3, #31
 8005214:	d405      	bmi.n	8005222 <_vfiprintf_r+0x2a>
 8005216:	89ab      	ldrh	r3, [r5, #12]
 8005218:	059a      	lsls	r2, r3, #22
 800521a:	d402      	bmi.n	8005222 <_vfiprintf_r+0x2a>
 800521c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800521e:	f7ff fec6 	bl	8004fae <__retarget_lock_acquire_recursive>
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	d501      	bpl.n	800522c <_vfiprintf_r+0x34>
 8005228:	692b      	ldr	r3, [r5, #16]
 800522a:	b99b      	cbnz	r3, 8005254 <_vfiprintf_r+0x5c>
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f000 fb72 	bl	8005918 <__swsetup_r>
 8005234:	b170      	cbz	r0, 8005254 <_vfiprintf_r+0x5c>
 8005236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005238:	07dc      	lsls	r4, r3, #31
 800523a:	d504      	bpl.n	8005246 <_vfiprintf_r+0x4e>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b01d      	add	sp, #116	@ 0x74
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	0598      	lsls	r0, r3, #22
 800524a:	d4f7      	bmi.n	800523c <_vfiprintf_r+0x44>
 800524c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800524e:	f7ff feaf 	bl	8004fb0 <__retarget_lock_release_recursive>
 8005252:	e7f3      	b.n	800523c <_vfiprintf_r+0x44>
 8005254:	2300      	movs	r3, #0
 8005256:	9309      	str	r3, [sp, #36]	@ 0x24
 8005258:	2320      	movs	r3, #32
 800525a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800525e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005262:	2330      	movs	r3, #48	@ 0x30
 8005264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005414 <_vfiprintf_r+0x21c>
 8005268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800526c:	f04f 0901 	mov.w	r9, #1
 8005270:	4623      	mov	r3, r4
 8005272:	469a      	mov	sl, r3
 8005274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005278:	b10a      	cbz	r2, 800527e <_vfiprintf_r+0x86>
 800527a:	2a25      	cmp	r2, #37	@ 0x25
 800527c:	d1f9      	bne.n	8005272 <_vfiprintf_r+0x7a>
 800527e:	ebba 0b04 	subs.w	fp, sl, r4
 8005282:	d00b      	beq.n	800529c <_vfiprintf_r+0xa4>
 8005284:	465b      	mov	r3, fp
 8005286:	4622      	mov	r2, r4
 8005288:	4629      	mov	r1, r5
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff ffa1 	bl	80051d2 <__sfputs_r>
 8005290:	3001      	adds	r0, #1
 8005292:	f000 80a7 	beq.w	80053e4 <_vfiprintf_r+0x1ec>
 8005296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005298:	445a      	add	r2, fp
 800529a:	9209      	str	r2, [sp, #36]	@ 0x24
 800529c:	f89a 3000 	ldrb.w	r3, [sl]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 809f 	beq.w	80053e4 <_vfiprintf_r+0x1ec>
 80052a6:	2300      	movs	r3, #0
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b0:	f10a 0a01 	add.w	sl, sl, #1
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80052be:	4654      	mov	r4, sl
 80052c0:	2205      	movs	r2, #5
 80052c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c6:	4853      	ldr	r0, [pc, #332]	@ (8005414 <_vfiprintf_r+0x21c>)
 80052c8:	f7fa ff82 	bl	80001d0 <memchr>
 80052cc:	9a04      	ldr	r2, [sp, #16]
 80052ce:	b9d8      	cbnz	r0, 8005308 <_vfiprintf_r+0x110>
 80052d0:	06d1      	lsls	r1, r2, #27
 80052d2:	bf44      	itt	mi
 80052d4:	2320      	movmi	r3, #32
 80052d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052da:	0713      	lsls	r3, r2, #28
 80052dc:	bf44      	itt	mi
 80052de:	232b      	movmi	r3, #43	@ 0x2b
 80052e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052e4:	f89a 3000 	ldrb.w	r3, [sl]
 80052e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ea:	d015      	beq.n	8005318 <_vfiprintf_r+0x120>
 80052ec:	9a07      	ldr	r2, [sp, #28]
 80052ee:	4654      	mov	r4, sl
 80052f0:	2000      	movs	r0, #0
 80052f2:	f04f 0c0a 	mov.w	ip, #10
 80052f6:	4621      	mov	r1, r4
 80052f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fc:	3b30      	subs	r3, #48	@ 0x30
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d94b      	bls.n	800539a <_vfiprintf_r+0x1a2>
 8005302:	b1b0      	cbz	r0, 8005332 <_vfiprintf_r+0x13a>
 8005304:	9207      	str	r2, [sp, #28]
 8005306:	e014      	b.n	8005332 <_vfiprintf_r+0x13a>
 8005308:	eba0 0308 	sub.w	r3, r0, r8
 800530c:	fa09 f303 	lsl.w	r3, r9, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	46a2      	mov	sl, r4
 8005316:	e7d2      	b.n	80052be <_vfiprintf_r+0xc6>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	1d19      	adds	r1, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	9103      	str	r1, [sp, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	bfbb      	ittet	lt
 8005324:	425b      	neglt	r3, r3
 8005326:	f042 0202 	orrlt.w	r2, r2, #2
 800532a:	9307      	strge	r3, [sp, #28]
 800532c:	9307      	strlt	r3, [sp, #28]
 800532e:	bfb8      	it	lt
 8005330:	9204      	strlt	r2, [sp, #16]
 8005332:	7823      	ldrb	r3, [r4, #0]
 8005334:	2b2e      	cmp	r3, #46	@ 0x2e
 8005336:	d10a      	bne.n	800534e <_vfiprintf_r+0x156>
 8005338:	7863      	ldrb	r3, [r4, #1]
 800533a:	2b2a      	cmp	r3, #42	@ 0x2a
 800533c:	d132      	bne.n	80053a4 <_vfiprintf_r+0x1ac>
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	9203      	str	r2, [sp, #12]
 8005346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800534a:	3402      	adds	r4, #2
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005424 <_vfiprintf_r+0x22c>
 8005352:	7821      	ldrb	r1, [r4, #0]
 8005354:	2203      	movs	r2, #3
 8005356:	4650      	mov	r0, sl
 8005358:	f7fa ff3a 	bl	80001d0 <memchr>
 800535c:	b138      	cbz	r0, 800536e <_vfiprintf_r+0x176>
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	eba0 000a 	sub.w	r0, r0, sl
 8005364:	2240      	movs	r2, #64	@ 0x40
 8005366:	4082      	lsls	r2, r0
 8005368:	4313      	orrs	r3, r2
 800536a:	3401      	adds	r4, #1
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005372:	4829      	ldr	r0, [pc, #164]	@ (8005418 <_vfiprintf_r+0x220>)
 8005374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005378:	2206      	movs	r2, #6
 800537a:	f7fa ff29 	bl	80001d0 <memchr>
 800537e:	2800      	cmp	r0, #0
 8005380:	d03f      	beq.n	8005402 <_vfiprintf_r+0x20a>
 8005382:	4b26      	ldr	r3, [pc, #152]	@ (800541c <_vfiprintf_r+0x224>)
 8005384:	bb1b      	cbnz	r3, 80053ce <_vfiprintf_r+0x1d6>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	3307      	adds	r3, #7
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	3308      	adds	r3, #8
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005394:	443b      	add	r3, r7
 8005396:	9309      	str	r3, [sp, #36]	@ 0x24
 8005398:	e76a      	b.n	8005270 <_vfiprintf_r+0x78>
 800539a:	fb0c 3202 	mla	r2, ip, r2, r3
 800539e:	460c      	mov	r4, r1
 80053a0:	2001      	movs	r0, #1
 80053a2:	e7a8      	b.n	80052f6 <_vfiprintf_r+0xfe>
 80053a4:	2300      	movs	r3, #0
 80053a6:	3401      	adds	r4, #1
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	4619      	mov	r1, r3
 80053ac:	f04f 0c0a 	mov.w	ip, #10
 80053b0:	4620      	mov	r0, r4
 80053b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b6:	3a30      	subs	r2, #48	@ 0x30
 80053b8:	2a09      	cmp	r2, #9
 80053ba:	d903      	bls.n	80053c4 <_vfiprintf_r+0x1cc>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0c6      	beq.n	800534e <_vfiprintf_r+0x156>
 80053c0:	9105      	str	r1, [sp, #20]
 80053c2:	e7c4      	b.n	800534e <_vfiprintf_r+0x156>
 80053c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c8:	4604      	mov	r4, r0
 80053ca:	2301      	movs	r3, #1
 80053cc:	e7f0      	b.n	80053b0 <_vfiprintf_r+0x1b8>
 80053ce:	ab03      	add	r3, sp, #12
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	462a      	mov	r2, r5
 80053d4:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <_vfiprintf_r+0x228>)
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	4630      	mov	r0, r6
 80053da:	f3af 8000 	nop.w
 80053de:	4607      	mov	r7, r0
 80053e0:	1c78      	adds	r0, r7, #1
 80053e2:	d1d6      	bne.n	8005392 <_vfiprintf_r+0x19a>
 80053e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053e6:	07d9      	lsls	r1, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_vfiprintf_r+0x1fe>
 80053ea:	89ab      	ldrh	r3, [r5, #12]
 80053ec:	059a      	lsls	r2, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_vfiprintf_r+0x1fe>
 80053f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053f2:	f7ff fddd 	bl	8004fb0 <__retarget_lock_release_recursive>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	065b      	lsls	r3, r3, #25
 80053fa:	f53f af1f 	bmi.w	800523c <_vfiprintf_r+0x44>
 80053fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005400:	e71e      	b.n	8005240 <_vfiprintf_r+0x48>
 8005402:	ab03      	add	r3, sp, #12
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	462a      	mov	r2, r5
 8005408:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <_vfiprintf_r+0x228>)
 800540a:	a904      	add	r1, sp, #16
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f879 	bl	8005504 <_printf_i>
 8005412:	e7e4      	b.n	80053de <_vfiprintf_r+0x1e6>
 8005414:	08005be0 	.word	0x08005be0
 8005418:	08005bea 	.word	0x08005bea
 800541c:	00000000 	.word	0x00000000
 8005420:	080051d3 	.word	0x080051d3
 8005424:	08005be6 	.word	0x08005be6

08005428 <_printf_common>:
 8005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	4616      	mov	r6, r2
 800542e:	4698      	mov	r8, r3
 8005430:	688a      	ldr	r2, [r1, #8]
 8005432:	690b      	ldr	r3, [r1, #16]
 8005434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005438:	4293      	cmp	r3, r2
 800543a:	bfb8      	it	lt
 800543c:	4613      	movlt	r3, r2
 800543e:	6033      	str	r3, [r6, #0]
 8005440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005444:	4607      	mov	r7, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b10a      	cbz	r2, 800544e <_printf_common+0x26>
 800544a:	3301      	adds	r3, #1
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	0699      	lsls	r1, r3, #26
 8005452:	bf42      	ittt	mi
 8005454:	6833      	ldrmi	r3, [r6, #0]
 8005456:	3302      	addmi	r3, #2
 8005458:	6033      	strmi	r3, [r6, #0]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	f015 0506 	ands.w	r5, r5, #6
 8005460:	d106      	bne.n	8005470 <_printf_common+0x48>
 8005462:	f104 0a19 	add.w	sl, r4, #25
 8005466:	68e3      	ldr	r3, [r4, #12]
 8005468:	6832      	ldr	r2, [r6, #0]
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	42ab      	cmp	r3, r5
 800546e:	dc26      	bgt.n	80054be <_printf_common+0x96>
 8005470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	3b00      	subs	r3, #0
 8005478:	bf18      	it	ne
 800547a:	2301      	movne	r3, #1
 800547c:	0692      	lsls	r2, r2, #26
 800547e:	d42b      	bmi.n	80054d8 <_printf_common+0xb0>
 8005480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005484:	4641      	mov	r1, r8
 8005486:	4638      	mov	r0, r7
 8005488:	47c8      	blx	r9
 800548a:	3001      	adds	r0, #1
 800548c:	d01e      	beq.n	80054cc <_printf_common+0xa4>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6922      	ldr	r2, [r4, #16]
 8005492:	f003 0306 	and.w	r3, r3, #6
 8005496:	2b04      	cmp	r3, #4
 8005498:	bf02      	ittt	eq
 800549a:	68e5      	ldreq	r5, [r4, #12]
 800549c:	6833      	ldreq	r3, [r6, #0]
 800549e:	1aed      	subeq	r5, r5, r3
 80054a0:	68a3      	ldr	r3, [r4, #8]
 80054a2:	bf0c      	ite	eq
 80054a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a8:	2500      	movne	r5, #0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	bfc4      	itt	gt
 80054ae:	1a9b      	subgt	r3, r3, r2
 80054b0:	18ed      	addgt	r5, r5, r3
 80054b2:	2600      	movs	r6, #0
 80054b4:	341a      	adds	r4, #26
 80054b6:	42b5      	cmp	r5, r6
 80054b8:	d11a      	bne.n	80054f0 <_printf_common+0xc8>
 80054ba:	2000      	movs	r0, #0
 80054bc:	e008      	b.n	80054d0 <_printf_common+0xa8>
 80054be:	2301      	movs	r3, #1
 80054c0:	4652      	mov	r2, sl
 80054c2:	4641      	mov	r1, r8
 80054c4:	4638      	mov	r0, r7
 80054c6:	47c8      	blx	r9
 80054c8:	3001      	adds	r0, #1
 80054ca:	d103      	bne.n	80054d4 <_printf_common+0xac>
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	3501      	adds	r5, #1
 80054d6:	e7c6      	b.n	8005466 <_printf_common+0x3e>
 80054d8:	18e1      	adds	r1, r4, r3
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	2030      	movs	r0, #48	@ 0x30
 80054de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054e2:	4422      	add	r2, r4
 80054e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054ec:	3302      	adds	r3, #2
 80054ee:	e7c7      	b.n	8005480 <_printf_common+0x58>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4622      	mov	r2, r4
 80054f4:	4641      	mov	r1, r8
 80054f6:	4638      	mov	r0, r7
 80054f8:	47c8      	blx	r9
 80054fa:	3001      	adds	r0, #1
 80054fc:	d0e6      	beq.n	80054cc <_printf_common+0xa4>
 80054fe:	3601      	adds	r6, #1
 8005500:	e7d9      	b.n	80054b6 <_printf_common+0x8e>
	...

08005504 <_printf_i>:
 8005504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	7e0f      	ldrb	r7, [r1, #24]
 800550a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800550c:	2f78      	cmp	r7, #120	@ 0x78
 800550e:	4691      	mov	r9, r2
 8005510:	4680      	mov	r8, r0
 8005512:	460c      	mov	r4, r1
 8005514:	469a      	mov	sl, r3
 8005516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800551a:	d807      	bhi.n	800552c <_printf_i+0x28>
 800551c:	2f62      	cmp	r7, #98	@ 0x62
 800551e:	d80a      	bhi.n	8005536 <_printf_i+0x32>
 8005520:	2f00      	cmp	r7, #0
 8005522:	f000 80d2 	beq.w	80056ca <_printf_i+0x1c6>
 8005526:	2f58      	cmp	r7, #88	@ 0x58
 8005528:	f000 80b9 	beq.w	800569e <_printf_i+0x19a>
 800552c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005534:	e03a      	b.n	80055ac <_printf_i+0xa8>
 8005536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800553a:	2b15      	cmp	r3, #21
 800553c:	d8f6      	bhi.n	800552c <_printf_i+0x28>
 800553e:	a101      	add	r1, pc, #4	@ (adr r1, 8005544 <_printf_i+0x40>)
 8005540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005544:	0800559d 	.word	0x0800559d
 8005548:	080055b1 	.word	0x080055b1
 800554c:	0800552d 	.word	0x0800552d
 8005550:	0800552d 	.word	0x0800552d
 8005554:	0800552d 	.word	0x0800552d
 8005558:	0800552d 	.word	0x0800552d
 800555c:	080055b1 	.word	0x080055b1
 8005560:	0800552d 	.word	0x0800552d
 8005564:	0800552d 	.word	0x0800552d
 8005568:	0800552d 	.word	0x0800552d
 800556c:	0800552d 	.word	0x0800552d
 8005570:	080056b1 	.word	0x080056b1
 8005574:	080055db 	.word	0x080055db
 8005578:	0800566b 	.word	0x0800566b
 800557c:	0800552d 	.word	0x0800552d
 8005580:	0800552d 	.word	0x0800552d
 8005584:	080056d3 	.word	0x080056d3
 8005588:	0800552d 	.word	0x0800552d
 800558c:	080055db 	.word	0x080055db
 8005590:	0800552d 	.word	0x0800552d
 8005594:	0800552d 	.word	0x0800552d
 8005598:	08005673 	.word	0x08005673
 800559c:	6833      	ldr	r3, [r6, #0]
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6032      	str	r2, [r6, #0]
 80055a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055ac:	2301      	movs	r3, #1
 80055ae:	e09d      	b.n	80056ec <_printf_i+0x1e8>
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	6031      	str	r1, [r6, #0]
 80055b8:	0606      	lsls	r6, r0, #24
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0xbc>
 80055bc:	681d      	ldr	r5, [r3, #0]
 80055be:	e003      	b.n	80055c8 <_printf_i+0xc4>
 80055c0:	0645      	lsls	r5, r0, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0xb8>
 80055c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	da03      	bge.n	80055d4 <_printf_i+0xd0>
 80055cc:	232d      	movs	r3, #45	@ 0x2d
 80055ce:	426d      	negs	r5, r5
 80055d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d4:	4859      	ldr	r0, [pc, #356]	@ (800573c <_printf_i+0x238>)
 80055d6:	230a      	movs	r3, #10
 80055d8:	e011      	b.n	80055fe <_printf_i+0xfa>
 80055da:	6821      	ldr	r1, [r4, #0]
 80055dc:	6833      	ldr	r3, [r6, #0]
 80055de:	0608      	lsls	r0, r1, #24
 80055e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055e4:	d402      	bmi.n	80055ec <_printf_i+0xe8>
 80055e6:	0649      	lsls	r1, r1, #25
 80055e8:	bf48      	it	mi
 80055ea:	b2ad      	uxthmi	r5, r5
 80055ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ee:	4853      	ldr	r0, [pc, #332]	@ (800573c <_printf_i+0x238>)
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	bf14      	ite	ne
 80055f4:	230a      	movne	r3, #10
 80055f6:	2308      	moveq	r3, #8
 80055f8:	2100      	movs	r1, #0
 80055fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055fe:	6866      	ldr	r6, [r4, #4]
 8005600:	60a6      	str	r6, [r4, #8]
 8005602:	2e00      	cmp	r6, #0
 8005604:	bfa2      	ittt	ge
 8005606:	6821      	ldrge	r1, [r4, #0]
 8005608:	f021 0104 	bicge.w	r1, r1, #4
 800560c:	6021      	strge	r1, [r4, #0]
 800560e:	b90d      	cbnz	r5, 8005614 <_printf_i+0x110>
 8005610:	2e00      	cmp	r6, #0
 8005612:	d04b      	beq.n	80056ac <_printf_i+0x1a8>
 8005614:	4616      	mov	r6, r2
 8005616:	fbb5 f1f3 	udiv	r1, r5, r3
 800561a:	fb03 5711 	mls	r7, r3, r1, r5
 800561e:	5dc7      	ldrb	r7, [r0, r7]
 8005620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005624:	462f      	mov	r7, r5
 8005626:	42bb      	cmp	r3, r7
 8005628:	460d      	mov	r5, r1
 800562a:	d9f4      	bls.n	8005616 <_printf_i+0x112>
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10b      	bne.n	8005648 <_printf_i+0x144>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07df      	lsls	r7, r3, #31
 8005634:	d508      	bpl.n	8005648 <_printf_i+0x144>
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	4299      	cmp	r1, r3
 800563c:	bfde      	ittt	le
 800563e:	2330      	movle	r3, #48	@ 0x30
 8005640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005648:	1b92      	subs	r2, r2, r6
 800564a:	6122      	str	r2, [r4, #16]
 800564c:	f8cd a000 	str.w	sl, [sp]
 8005650:	464b      	mov	r3, r9
 8005652:	aa03      	add	r2, sp, #12
 8005654:	4621      	mov	r1, r4
 8005656:	4640      	mov	r0, r8
 8005658:	f7ff fee6 	bl	8005428 <_printf_common>
 800565c:	3001      	adds	r0, #1
 800565e:	d14a      	bne.n	80056f6 <_printf_i+0x1f2>
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	b004      	add	sp, #16
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	f043 0320 	orr.w	r3, r3, #32
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	4833      	ldr	r0, [pc, #204]	@ (8005740 <_printf_i+0x23c>)
 8005674:	2778      	movs	r7, #120	@ 0x78
 8005676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	6831      	ldr	r1, [r6, #0]
 800567e:	061f      	lsls	r7, r3, #24
 8005680:	f851 5b04 	ldr.w	r5, [r1], #4
 8005684:	d402      	bmi.n	800568c <_printf_i+0x188>
 8005686:	065f      	lsls	r7, r3, #25
 8005688:	bf48      	it	mi
 800568a:	b2ad      	uxthmi	r5, r5
 800568c:	6031      	str	r1, [r6, #0]
 800568e:	07d9      	lsls	r1, r3, #31
 8005690:	bf44      	itt	mi
 8005692:	f043 0320 	orrmi.w	r3, r3, #32
 8005696:	6023      	strmi	r3, [r4, #0]
 8005698:	b11d      	cbz	r5, 80056a2 <_printf_i+0x19e>
 800569a:	2310      	movs	r3, #16
 800569c:	e7ac      	b.n	80055f8 <_printf_i+0xf4>
 800569e:	4827      	ldr	r0, [pc, #156]	@ (800573c <_printf_i+0x238>)
 80056a0:	e7e9      	b.n	8005676 <_printf_i+0x172>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f023 0320 	bic.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	e7f6      	b.n	800569a <_printf_i+0x196>
 80056ac:	4616      	mov	r6, r2
 80056ae:	e7bd      	b.n	800562c <_printf_i+0x128>
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	6961      	ldr	r1, [r4, #20]
 80056b6:	1d18      	adds	r0, r3, #4
 80056b8:	6030      	str	r0, [r6, #0]
 80056ba:	062e      	lsls	r6, r5, #24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0x1c0>
 80056c0:	6019      	str	r1, [r3, #0]
 80056c2:	e002      	b.n	80056ca <_printf_i+0x1c6>
 80056c4:	0668      	lsls	r0, r5, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0x1bc>
 80056c8:	8019      	strh	r1, [r3, #0]
 80056ca:	2300      	movs	r3, #0
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	4616      	mov	r6, r2
 80056d0:	e7bc      	b.n	800564c <_printf_i+0x148>
 80056d2:	6833      	ldr	r3, [r6, #0]
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	6032      	str	r2, [r6, #0]
 80056d8:	681e      	ldr	r6, [r3, #0]
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	2100      	movs	r1, #0
 80056de:	4630      	mov	r0, r6
 80056e0:	f7fa fd76 	bl	80001d0 <memchr>
 80056e4:	b108      	cbz	r0, 80056ea <_printf_i+0x1e6>
 80056e6:	1b80      	subs	r0, r0, r6
 80056e8:	6060      	str	r0, [r4, #4]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	2300      	movs	r3, #0
 80056f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f4:	e7aa      	b.n	800564c <_printf_i+0x148>
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d0ad      	beq.n	8005660 <_printf_i+0x15c>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	079b      	lsls	r3, r3, #30
 8005708:	d413      	bmi.n	8005732 <_printf_i+0x22e>
 800570a:	68e0      	ldr	r0, [r4, #12]
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	4298      	cmp	r0, r3
 8005710:	bfb8      	it	lt
 8005712:	4618      	movlt	r0, r3
 8005714:	e7a6      	b.n	8005664 <_printf_i+0x160>
 8005716:	2301      	movs	r3, #1
 8005718:	4632      	mov	r2, r6
 800571a:	4649      	mov	r1, r9
 800571c:	4640      	mov	r0, r8
 800571e:	47d0      	blx	sl
 8005720:	3001      	adds	r0, #1
 8005722:	d09d      	beq.n	8005660 <_printf_i+0x15c>
 8005724:	3501      	adds	r5, #1
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	9903      	ldr	r1, [sp, #12]
 800572a:	1a5b      	subs	r3, r3, r1
 800572c:	42ab      	cmp	r3, r5
 800572e:	dcf2      	bgt.n	8005716 <_printf_i+0x212>
 8005730:	e7eb      	b.n	800570a <_printf_i+0x206>
 8005732:	2500      	movs	r5, #0
 8005734:	f104 0619 	add.w	r6, r4, #25
 8005738:	e7f5      	b.n	8005726 <_printf_i+0x222>
 800573a:	bf00      	nop
 800573c:	08005bf1 	.word	0x08005bf1
 8005740:	08005c02 	.word	0x08005c02

08005744 <__sflush_r>:
 8005744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	0716      	lsls	r6, r2, #28
 800574e:	4605      	mov	r5, r0
 8005750:	460c      	mov	r4, r1
 8005752:	d454      	bmi.n	80057fe <__sflush_r+0xba>
 8005754:	684b      	ldr	r3, [r1, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	dc02      	bgt.n	8005760 <__sflush_r+0x1c>
 800575a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	dd48      	ble.n	80057f2 <__sflush_r+0xae>
 8005760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005762:	2e00      	cmp	r6, #0
 8005764:	d045      	beq.n	80057f2 <__sflush_r+0xae>
 8005766:	2300      	movs	r3, #0
 8005768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800576c:	682f      	ldr	r7, [r5, #0]
 800576e:	6a21      	ldr	r1, [r4, #32]
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	d030      	beq.n	80057d6 <__sflush_r+0x92>
 8005774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	0759      	lsls	r1, r3, #29
 800577a:	d505      	bpl.n	8005788 <__sflush_r+0x44>
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005782:	b10b      	cbz	r3, 8005788 <__sflush_r+0x44>
 8005784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800578c:	6a21      	ldr	r1, [r4, #32]
 800578e:	4628      	mov	r0, r5
 8005790:	47b0      	blx	r6
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	d106      	bne.n	80057a6 <__sflush_r+0x62>
 8005798:	6829      	ldr	r1, [r5, #0]
 800579a:	291d      	cmp	r1, #29
 800579c:	d82b      	bhi.n	80057f6 <__sflush_r+0xb2>
 800579e:	4a2a      	ldr	r2, [pc, #168]	@ (8005848 <__sflush_r+0x104>)
 80057a0:	410a      	asrs	r2, r1
 80057a2:	07d6      	lsls	r6, r2, #31
 80057a4:	d427      	bmi.n	80057f6 <__sflush_r+0xb2>
 80057a6:	2200      	movs	r2, #0
 80057a8:	6062      	str	r2, [r4, #4]
 80057aa:	04d9      	lsls	r1, r3, #19
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	d504      	bpl.n	80057bc <__sflush_r+0x78>
 80057b2:	1c42      	adds	r2, r0, #1
 80057b4:	d101      	bne.n	80057ba <__sflush_r+0x76>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	b903      	cbnz	r3, 80057bc <__sflush_r+0x78>
 80057ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80057bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057be:	602f      	str	r7, [r5, #0]
 80057c0:	b1b9      	cbz	r1, 80057f2 <__sflush_r+0xae>
 80057c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c6:	4299      	cmp	r1, r3
 80057c8:	d002      	beq.n	80057d0 <__sflush_r+0x8c>
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7ff fbf2 	bl	8004fb4 <_free_r>
 80057d0:	2300      	movs	r3, #0
 80057d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d4:	e00d      	b.n	80057f2 <__sflush_r+0xae>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4628      	mov	r0, r5
 80057da:	47b0      	blx	r6
 80057dc:	4602      	mov	r2, r0
 80057de:	1c50      	adds	r0, r2, #1
 80057e0:	d1c9      	bne.n	8005776 <__sflush_r+0x32>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0c6      	beq.n	8005776 <__sflush_r+0x32>
 80057e8:	2b1d      	cmp	r3, #29
 80057ea:	d001      	beq.n	80057f0 <__sflush_r+0xac>
 80057ec:	2b16      	cmp	r3, #22
 80057ee:	d11e      	bne.n	800582e <__sflush_r+0xea>
 80057f0:	602f      	str	r7, [r5, #0]
 80057f2:	2000      	movs	r0, #0
 80057f4:	e022      	b.n	800583c <__sflush_r+0xf8>
 80057f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057fa:	b21b      	sxth	r3, r3
 80057fc:	e01b      	b.n	8005836 <__sflush_r+0xf2>
 80057fe:	690f      	ldr	r7, [r1, #16]
 8005800:	2f00      	cmp	r7, #0
 8005802:	d0f6      	beq.n	80057f2 <__sflush_r+0xae>
 8005804:	0793      	lsls	r3, r2, #30
 8005806:	680e      	ldr	r6, [r1, #0]
 8005808:	bf08      	it	eq
 800580a:	694b      	ldreq	r3, [r1, #20]
 800580c:	600f      	str	r7, [r1, #0]
 800580e:	bf18      	it	ne
 8005810:	2300      	movne	r3, #0
 8005812:	eba6 0807 	sub.w	r8, r6, r7
 8005816:	608b      	str	r3, [r1, #8]
 8005818:	f1b8 0f00 	cmp.w	r8, #0
 800581c:	dde9      	ble.n	80057f2 <__sflush_r+0xae>
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005822:	4643      	mov	r3, r8
 8005824:	463a      	mov	r2, r7
 8005826:	4628      	mov	r0, r5
 8005828:	47b0      	blx	r6
 800582a:	2800      	cmp	r0, #0
 800582c:	dc08      	bgt.n	8005840 <__sflush_r+0xfc>
 800582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	4407      	add	r7, r0
 8005842:	eba8 0800 	sub.w	r8, r8, r0
 8005846:	e7e7      	b.n	8005818 <__sflush_r+0xd4>
 8005848:	dfbffffe 	.word	0xdfbffffe

0800584c <_fflush_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	b913      	cbnz	r3, 800585c <_fflush_r+0x10>
 8005856:	2500      	movs	r5, #0
 8005858:	4628      	mov	r0, r5
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	b118      	cbz	r0, 8005866 <_fflush_r+0x1a>
 800585e:	6a03      	ldr	r3, [r0, #32]
 8005860:	b90b      	cbnz	r3, 8005866 <_fflush_r+0x1a>
 8005862:	f7ff fa9f 	bl	8004da4 <__sinit>
 8005866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f3      	beq.n	8005856 <_fflush_r+0xa>
 800586e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005870:	07d0      	lsls	r0, r2, #31
 8005872:	d404      	bmi.n	800587e <_fflush_r+0x32>
 8005874:	0599      	lsls	r1, r3, #22
 8005876:	d402      	bmi.n	800587e <_fflush_r+0x32>
 8005878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800587a:	f7ff fb98 	bl	8004fae <__retarget_lock_acquire_recursive>
 800587e:	4628      	mov	r0, r5
 8005880:	4621      	mov	r1, r4
 8005882:	f7ff ff5f 	bl	8005744 <__sflush_r>
 8005886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005888:	07da      	lsls	r2, r3, #31
 800588a:	4605      	mov	r5, r0
 800588c:	d4e4      	bmi.n	8005858 <_fflush_r+0xc>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	d4e1      	bmi.n	8005858 <_fflush_r+0xc>
 8005894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005896:	f7ff fb8b 	bl	8004fb0 <__retarget_lock_release_recursive>
 800589a:	e7dd      	b.n	8005858 <_fflush_r+0xc>

0800589c <__swbuf_r>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	460e      	mov	r6, r1
 80058a0:	4614      	mov	r4, r2
 80058a2:	4605      	mov	r5, r0
 80058a4:	b118      	cbz	r0, 80058ae <__swbuf_r+0x12>
 80058a6:	6a03      	ldr	r3, [r0, #32]
 80058a8:	b90b      	cbnz	r3, 80058ae <__swbuf_r+0x12>
 80058aa:	f7ff fa7b 	bl	8004da4 <__sinit>
 80058ae:	69a3      	ldr	r3, [r4, #24]
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	071a      	lsls	r2, r3, #28
 80058b6:	d501      	bpl.n	80058bc <__swbuf_r+0x20>
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	b943      	cbnz	r3, 80058ce <__swbuf_r+0x32>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f82a 	bl	8005918 <__swsetup_r>
 80058c4:	b118      	cbz	r0, 80058ce <__swbuf_r+0x32>
 80058c6:	f04f 37ff 	mov.w	r7, #4294967295
 80058ca:	4638      	mov	r0, r7
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	6922      	ldr	r2, [r4, #16]
 80058d2:	1a98      	subs	r0, r3, r2
 80058d4:	6963      	ldr	r3, [r4, #20]
 80058d6:	b2f6      	uxtb	r6, r6
 80058d8:	4283      	cmp	r3, r0
 80058da:	4637      	mov	r7, r6
 80058dc:	dc05      	bgt.n	80058ea <__swbuf_r+0x4e>
 80058de:	4621      	mov	r1, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7ff ffb3 	bl	800584c <_fflush_r>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1ed      	bne.n	80058c6 <__swbuf_r+0x2a>
 80058ea:	68a3      	ldr	r3, [r4, #8]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	60a3      	str	r3, [r4, #8]
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	701e      	strb	r6, [r3, #0]
 80058f8:	6962      	ldr	r2, [r4, #20]
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d004      	beq.n	800590a <__swbuf_r+0x6e>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	07db      	lsls	r3, r3, #31
 8005904:	d5e1      	bpl.n	80058ca <__swbuf_r+0x2e>
 8005906:	2e0a      	cmp	r6, #10
 8005908:	d1df      	bne.n	80058ca <__swbuf_r+0x2e>
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff ff9d 	bl	800584c <_fflush_r>
 8005912:	2800      	cmp	r0, #0
 8005914:	d0d9      	beq.n	80058ca <__swbuf_r+0x2e>
 8005916:	e7d6      	b.n	80058c6 <__swbuf_r+0x2a>

08005918 <__swsetup_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <__swsetup_r+0xa8>)
 800591c:	4605      	mov	r5, r0
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	460c      	mov	r4, r1
 8005922:	b118      	cbz	r0, 800592c <__swsetup_r+0x14>
 8005924:	6a03      	ldr	r3, [r0, #32]
 8005926:	b90b      	cbnz	r3, 800592c <__swsetup_r+0x14>
 8005928:	f7ff fa3c 	bl	8004da4 <__sinit>
 800592c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005930:	0719      	lsls	r1, r3, #28
 8005932:	d422      	bmi.n	800597a <__swsetup_r+0x62>
 8005934:	06da      	lsls	r2, r3, #27
 8005936:	d407      	bmi.n	8005948 <__swsetup_r+0x30>
 8005938:	2209      	movs	r2, #9
 800593a:	602a      	str	r2, [r5, #0]
 800593c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	e033      	b.n	80059b0 <__swsetup_r+0x98>
 8005948:	0758      	lsls	r0, r3, #29
 800594a:	d512      	bpl.n	8005972 <__swsetup_r+0x5a>
 800594c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800594e:	b141      	cbz	r1, 8005962 <__swsetup_r+0x4a>
 8005950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005954:	4299      	cmp	r1, r3
 8005956:	d002      	beq.n	800595e <__swsetup_r+0x46>
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff fb2b 	bl	8004fb4 <_free_r>
 800595e:	2300      	movs	r3, #0
 8005960:	6363      	str	r3, [r4, #52]	@ 0x34
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	b94b      	cbnz	r3, 8005992 <__swsetup_r+0x7a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005988:	d003      	beq.n	8005992 <__swsetup_r+0x7a>
 800598a:	4621      	mov	r1, r4
 800598c:	4628      	mov	r0, r5
 800598e:	f000 f84f 	bl	8005a30 <__smakebuf_r>
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	f013 0201 	ands.w	r2, r3, #1
 800599a:	d00a      	beq.n	80059b2 <__swsetup_r+0x9a>
 800599c:	2200      	movs	r2, #0
 800599e:	60a2      	str	r2, [r4, #8]
 80059a0:	6962      	ldr	r2, [r4, #20]
 80059a2:	4252      	negs	r2, r2
 80059a4:	61a2      	str	r2, [r4, #24]
 80059a6:	6922      	ldr	r2, [r4, #16]
 80059a8:	b942      	cbnz	r2, 80059bc <__swsetup_r+0xa4>
 80059aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059ae:	d1c5      	bne.n	800593c <__swsetup_r+0x24>
 80059b0:	bd38      	pop	{r3, r4, r5, pc}
 80059b2:	0799      	lsls	r1, r3, #30
 80059b4:	bf58      	it	pl
 80059b6:	6962      	ldrpl	r2, [r4, #20]
 80059b8:	60a2      	str	r2, [r4, #8]
 80059ba:	e7f4      	b.n	80059a6 <__swsetup_r+0x8e>
 80059bc:	2000      	movs	r0, #0
 80059be:	e7f7      	b.n	80059b0 <__swsetup_r+0x98>
 80059c0:	2000001c 	.word	0x2000001c

080059c4 <_sbrk_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	@ (80059e0 <_sbrk_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fb fd78 	bl	80014c4 <_sbrk>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_sbrk_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_sbrk_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20000428 	.word	0x20000428

080059e4 <__swhatbuf_r>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2900      	cmp	r1, #0
 80059ee:	b096      	sub	sp, #88	@ 0x58
 80059f0:	4615      	mov	r5, r2
 80059f2:	461e      	mov	r6, r3
 80059f4:	da0d      	bge.n	8005a12 <__swhatbuf_r+0x2e>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2340      	movne	r3, #64	@ 0x40
 8005a04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a08:	2000      	movs	r0, #0
 8005a0a:	6031      	str	r1, [r6, #0]
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	b016      	add	sp, #88	@ 0x58
 8005a10:	bd70      	pop	{r4, r5, r6, pc}
 8005a12:	466a      	mov	r2, sp
 8005a14:	f000 f848 	bl	8005aa8 <_fstat_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	dbec      	blt.n	80059f6 <__swhatbuf_r+0x12>
 8005a1c:	9901      	ldr	r1, [sp, #4]
 8005a1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a26:	4259      	negs	r1, r3
 8005a28:	4159      	adcs	r1, r3
 8005a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a2e:	e7eb      	b.n	8005a08 <__swhatbuf_r+0x24>

08005a30 <__smakebuf_r>:
 8005a30:	898b      	ldrh	r3, [r1, #12]
 8005a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a34:	079d      	lsls	r5, r3, #30
 8005a36:	4606      	mov	r6, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	d507      	bpl.n	8005a4c <__smakebuf_r+0x1c>
 8005a3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	2301      	movs	r3, #1
 8005a46:	6163      	str	r3, [r4, #20]
 8005a48:	b003      	add	sp, #12
 8005a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4c:	ab01      	add	r3, sp, #4
 8005a4e:	466a      	mov	r2, sp
 8005a50:	f7ff ffc8 	bl	80059e4 <__swhatbuf_r>
 8005a54:	9f00      	ldr	r7, [sp, #0]
 8005a56:	4605      	mov	r5, r0
 8005a58:	4639      	mov	r1, r7
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff fb16 	bl	800508c <_malloc_r>
 8005a60:	b948      	cbnz	r0, 8005a76 <__smakebuf_r+0x46>
 8005a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a66:	059a      	lsls	r2, r3, #22
 8005a68:	d4ee      	bmi.n	8005a48 <__smakebuf_r+0x18>
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	81a3      	strh	r3, [r4, #12]
 8005a74:	e7e2      	b.n	8005a3c <__smakebuf_r+0xc>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	6020      	str	r0, [r4, #0]
 8005a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a86:	b15b      	cbz	r3, 8005aa0 <__smakebuf_r+0x70>
 8005a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f000 f81d 	bl	8005acc <_isatty_r>
 8005a92:	b128      	cbz	r0, 8005aa0 <__smakebuf_r+0x70>
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	431d      	orrs	r5, r3
 8005aa4:	81a5      	strh	r5, [r4, #12]
 8005aa6:	e7cf      	b.n	8005a48 <__smakebuf_r+0x18>

08005aa8 <_fstat_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d07      	ldr	r5, [pc, #28]	@ (8005ac8 <_fstat_r+0x20>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	f7fb fcdc 	bl	8001472 <_fstat>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	d102      	bne.n	8005ac4 <_fstat_r+0x1c>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	b103      	cbz	r3, 8005ac4 <_fstat_r+0x1c>
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000428 	.word	0x20000428

08005acc <_isatty_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	@ (8005ae8 <_isatty_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb fcdb 	bl	8001492 <_isatty>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_isatty_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_isatty_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000428 	.word	0x20000428

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
